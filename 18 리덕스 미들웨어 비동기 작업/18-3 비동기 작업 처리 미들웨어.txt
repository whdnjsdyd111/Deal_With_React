            18.3 비동기 작업을 처리하는 미들웨어 사용

미들웨어가 어떤 방식으로 작동하는지 알았다. 이제 오픈 소스 커뮤니티에 공개된 미들웨어를 사용하여 리덕스를 사용하고 있는
프로젝트에서 비동기 작업을 더욱 효율적으로 관리해 보겠다.

비동기 작업을 처리할 때 도움을 주는 미들웨어는 정말 다양하다. 이 책에서 다룰 미들웨어는 다음과 같다.


    - redux-thunk : 비동기 작업을 처리할 때 가장 많이 사용하는 미들웨어이다.
        객체가 아닌 함수 형태의 액션을 디스패치할 수 있게 해준다.
    - redux-saga : redux-thunk 다음으로 가장 많이 사용되는 비동기 작업 관련 미들웨어 라이브러리이다.
        특정 액션이 디스패치되었을 때 정해진 로직에 따라 다른 액션을 디스패치시키는 규칙을 작성하여
        비동기 작업을 처리할 수 있게 해 준다.


        18.3.1 redux thunk

redux-thunk는 리덕스를 사용하는 프로젝트에서 비동기 작업을 처리할 때 가장 기본적으로 사용하는 미들웨어이다.
리덕스의 창시자인 댁 아브라모프가 만들었으며, 리덕스 공식 매뉴얼에서도 이 미들웨어를 사용하여 비동기 작업을 다루는 예시를 보여준다.


    18.3.1.1 Thunk 란?

Thunk는 특정 작업을 나중에 할 수 있도록 미루기 위해 함수 형태로 감싼 것을 의미한다.
예를 들어 주어진 파라미터에 1을 더하는 함수를 만들고 싶다면 다음과 같이 작성할 것이다.


const addOne = x => x + 1;
addOne(1);  // 2


이 코드를 실행하면 addOne을 호출했을 때 바로 1 + 1이 연산된다.
그런데 이 연산 작업을 나중에 하도록 미루고 싶다면  어떻게 해야 할까?


const addOne = x => x + 1;
function addOneThunk(x) {
    const thunk = () => addOne(x);
    return thunk;
}

const fn = addOneThunk(1);
setTimeout(() => {
    const value = fn(); // fn 이 실행되는 시점 연산
    console.log(value);
}, 1000);


이렇게 하면 특정 작업을 나중에 하도록 미룰 수 있다.
만약 addOneThunk를 화살표 함수로만 사용한다면 다음과 같이 구현할 수 있다.


const addOne = x => x + 1;
const addOneThunk = x => () => addOne(x);

const fn = addOneThunk(1);
setTimeout(() => {
    const value = fn(); // fn이 실행되는 시점에 연산
    console.log(value);
}, 1000);


redux-thunk 라이브러리를 사용하면 thunk 함수를 만들어서 디스패치할 수 있다.
그러면 리덕스 미들웨어가 그 함수를 전달받아 store의 dispatch와 getState를 파라미터로 넣어서 호출해 준다.

다음은 redux-thunk 에서 사용할 수 있는 예시 thunk 함수이다.


const sampleThunk = () => (dispatch, getState) => {
    // 현재 상태를 참조할 수 있고,
    // 새 액션을 디스패치할 수도 있다.
}


    18.3.1.2 미들웨어 적용하기

redux-thunk 미들웨어를 설치하고 프로젝트에 적용해 본다.
다음 명령어로 라이브러리를 설치하자.


$ yarn add redux-thunk


스토어를 만들 때 redux-thunk를 적용해보자.


import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { applyMiddleware, createStore } from "redux";
import { Provider } from "react-redux";
import rootReducer from './modules';
// import loggerMiddleware from './lib/loggerMiddleware';
import { createLogger } from "redux-logger";
import ReduxThunk from 'redux-thunk';

const logger = createLogger();
const store = createStore(rootReducer, applyMiddleware(logger, ReduxThunk));

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


    18.3.1.3 Thunk 생성 함수 만들기

redux-thunk는 액션 생성 함수에서 일반 액션 객체를 반환하는 대신에 함수를 반환한다.
increaseAsync 와 decreaseAsync 함수를 만들어 카운터 값을 비동기적으로 한번 변경시켜 보자.


import { createAction, handleActions } from "redux-actions";

const INCREASE = 'counter/INCREASE';
const DECREASE = 'counter/DECREASE';

export const increase = createAction(INCREASE);
export const decrease = createAction(DECREASE);

// 1초 뒤에 increase 혹은 decrease 함수를 디스패치함
export const increaseAsync = () => dispatch => {
    setTimeout(() => {
        dispatch(increase());
    }, 1000);
};

export const decreaseAsync = () => dispatch => {
    setTimeout(() => {
        dispatch(decrease());
    }, 1000);
};

const initialState = 0; // 상태는 꼭 객체일 필요가 없다. 숫자도 작동한다.

const counter = handleActions(
    {
        [INCREASE]: state => state + 1,
        [DECREASE]: state => state - 1
    },
    initialState
);

export default counter;


리덕스 모듈을 수정했으면 CounterContainer에서 호출하던 액션 생성 함수도 변경해 주자.


import React from 'react';
import { connect } from "react-redux";
import { increaseAsync, decreaseAsync } from "../modules/counter";
import Counter from '../components/Counter';

const CounterContainer = ({ number, increaseAsync, decreaseAsync }) => {
    return (
        <Counter number={number} onIncrease={increaseAsync} onDecrease={decreaseAsync} />
    );
};

export default connect(
    state => ({
        number: state.counter
    }),
    {
        increaseAsync,
        decreaseAsync
    }
)(CounterContainer);


코드를 저장하고 브라우저에서 버튼을 눌러 보자. 숫자가 1초 뒤에 변경되는 지 보자.
처음 디스패치되는 액션 함수 형태이고, 두 번째 액션은 객체 형태이다.


    18.3.1.4 웹 요청 비동기 작업 처리하기

이번에는 thunk의 속성을 활용하여 웹 요청 비동기 작업을 처리하는 방법에 대해 알아보겠다.
웹 요청 연습을 하기 위해 JSONPlaceholder(https://jsonplaceholder.typicode.com) 에서 재공되는 가짜 API를 사용하겠다.
사용할 API는 다음과 같다.


    # 포스트 읽기(:id는 1 ~ 100 숫자)
    GET https://jsonplaceholder.typicode.com/:id

    # 모든 사용자 정보 불러오기
    GET https://jsonplaceholder.typicode.com/users


API를 호출할 때는 주로 Promise 기반 웹 클라이언트인 axios를 사용한다.
해당 라이브러리를 설치해 주자.


$ yarn add axios


API를 모두 함수화해 주겠다. 각 API를 호출하는 함수를 따로 작성하면, 나중에 사용할 때 가독성도 좋고
유지 보수도 쉬워진다. 다른 파일에서 불러와 사용할 수 있도록 export를 사용하여 내보내 준다.


import axios from 'axios';

export const getPost = id =>
    axios.get(`https://jsonplaceholder.typicode.com/posts/${id}`);

export const getUsers = id =>
    axios.get(`https://jsonplaceholder.typicode.com/users`);


이제 새로운 리듀서를 만들어 줄 차례이다. 위 API를 사용하여 데이터를 받아와 상태를 관리할 sample 이라는
리듀서를 생성해 보겠다. 주석을 읽으면서 다음 코드를 작성해보자.


import { handleActions } from "redux-actions";
import * as api from '../lib/api';

// 액션 타입을 선언
// 한 요청당 세 개를 만듦

const GET_POST = 'sample/GET_POST';
const GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS';
const GET_POST_FAILURE = 'sample/GET_POST_FAILURE';

const GET_USERS = 'sample/GET_USERS';
const GET_UESRS_SUCCESS = 'sample/GET_USERS_SUCCESS';
const GET_USERS_FAILURE = 'sample/GET_USERS_FAILURE';

// thunk 함수를 생성
// thunk 함수 내부에서는 시작할 때, 성공할 때, 실패했을 때 다른 액션을 디스패치

export const getPost = id => async dispatch => {
    dispatch({ type: GET_POST });   // 요청을 시작한 것을 알림
    try {
        const response = await api.getPost(id);
        dispatch({
            type: GET_POST_SUCCESS,
            payload: response.data
        }); // 요청 성공
    } catch (e) {
        dispatch({
            type: GET_POST_FAILURE,
            payload: e,
            error: true
        }); // 에러 발생
        throw e;    // 나중에 컴포넌트단에서 에러를 조회할 수 있게 해 줌
    }
};

export const getUsers = () => async dispatch => {
    dispatch({ type: GET_USERS });  // 요청을 시작한 것을 알림
    try {
        const response = await api.getUsers();
        dispatch({
            type: GET_UESRS_SUCCESS,
            payload: response.data
        }); // 요청 성공
    } catch (e) {
        dispatch({
            type: GET_USERS_FAILURE,
            payload: e,
            error: true
        }); // 에러 발생
        throw e;    // 나중에 컴포넌트단에서 에러를 조회할 수 있게 해 줌
    }
};

// 초기 상태를 선언한다.
// 요청의 로딩 중 상태는 loading 이라는 객체에서 관리

const initialState = {
    loading: {
        GET_POST: false,
        GET_USERS: false
    },
    post: null,
    users: null
};

const sample = handleActions(
    {
        [GET_POST]: state => ({
            ...state,
            loading: {
                ...state.loading,
                GET_POST: true  // 요청 시작
            }
        }),
        [GET_POST_SUCCESS]: (state, action) => ({
            ...state,
            loading: {
                ...state.loading,
                GET_POST: false // 요청 완료
            },
            post: action.payload
        }),
        [GET_POST_FAILURE]: (state, action) => ({
            ...state,
            loading: {
                ...state.loading,
                GET_POST: false // 요청 완료
            }
        }),
        [GET_USERS]: state => ({
            ...state,
            loading: {
                ...state.loading,
                GET_USERS: true // 요청 시작
            }
        }),
        [GET_UESRS_SUCCESS]: (state, action) => ({
            ...state,
            loading: {
                ...state.loading,
                GET_USERS: false    // 요청 완료
            },
            users: action.payload
        }),
        [GET_USERS_FAILURE]: (state, action) => ({
            ...state,
            loading: {
                ...state.loading,
                GET_USERS: false    // 요청 완료
            }
        })
    },
    initialState
);

export default sample;


모드에서 반복되는 로직이 꽤 있다. 우선 컨테이너 컴포넌트를 사용하여 데이터 요청을 성공적으로 처리하고,
나중에 반복되는 로직을 따로 분리하여 재사용하는 형태로 코드를 리팩토링하겠다.
리듀서를 다 작성했다면 해당 리듀서를 루트 리듀서에 포함시키자.


import { combineReducers } from "redux";
import counter from './counter';
import sample from './sample';

const rootReducer = combineReducers({
    counter,
    sample
});

export default rootReducer;


우선 데이터를 렌더링할 프레젠테이셔널 컴포넌트부터 작성한다.
이 컴포넌트를 작성하려면 먼저 API를 통해 전달받은 데이터의 형식이 어떤 구조인지 확인해야 한다.


// post
{
    userId: 1, 
    id: 1, 
    title: "sunt aut facere repellat provident occaecati excepturi optio reprehenderit", 
    body: "quia et suscipit↵suscipit recusandae consequuntur …strum rerum est autem sunt rem eveniet architecto"
}

// users
{
    id: 1, 
    name: "Leanne Graham", 
    username: "Bret", 
    email: "Sincere@april.biz", 
    address: {
        city: "Gwenborough"
        geo: {lat: "-37.3159", lng: "81.1496"}
        street: "Kulas Light"
        suite: "Apt. 556"
        zipcode: "92998-3874"
    },
    company: {name: "Romaguera-Crona", catchPhrase: "Multi-layered client-server neural-net", bs: "harness real-time e-markets"},
    phone: "1-770-736-8031 x56442"
    username: "Bret"
    website: "hildegard.org
}


이번에 만들 컴포넌트는 post의 경우 title과 body만 보여 주고, user의 경우 username과 email만 보여줄 것이다.
Smaple 컴포넌트를 다음과 같이 작성하자.


import React from 'react';

const Sample = ({ loadingPost, loadingUsers, post, users }) => {
    return (
        <div>
            <section>
                <h1>포스트</h1>
                {loadingPost && '로딩 중...'}
                {!loadingPost && post && (
                    <div>
                        <h3>{post.title}</h3>
                        <h3>{post.body}</h3>
                    </div>
                )}
            </section>
            <hr />
            <section>
                <h1>사용자 목록</h1>
                {loadingUsers && '로딩 중...'}
                {!loadingUsers && users && (
                    <ul>
                        {users.map(user => (
                            <li key={user.id}>
                                {user.username} ({user.email})
                            </li>
                        ))}
                    </ul>
                )}
            </section>
        </div>
    );
};

export default Sample;


데이터를 불러와서 렌더링해 줄 때는 유효성 검사를 해 주는 것이 중요하다.
예를 들어 post && 를 사용하면 post 객체가 유효할 때만 그 내부의 post.title 혹은 post.body 값을 보여준다.
만약 데이터가 없는 상태라면 post.title 을 조회하려고 할 때 자바스크립트 오류가 발생하니 반드시 유효성 검사를 해주어야 한다.

users도 마찬가지로 데이터가 배열 형태로 들어올 것을 기대하고 map 함수를 사용하고 있다.
하지만 유효성 검사를 하지 않으면 null 값에 대해 map 함수를 호출하고, 결국 map 함수가 존재하지 않아 오류가 발생한다.

이제 컨테이너 컴포넌트를 만들어보자.


import React from 'react';
import { connect } from "react-redux";
import Sample from '../components/Sample';
import { getPost, getUsers } from "../modules/sample";

const { useEffect } = React;
const SampleContainer = ({
    getPost,
    getUsers,
    post,
    users,
    loadingPost,
    loadingUsers
}) => {
    // 클래스 형태 컴포넌트였다면 componentDidMount
    useEffect(() => {
        getPost(1);
        getUsers(1);
    }, [getPost, getUsers]);

    return (
        <Smaple
            post={post}
            users={users}
            loadingPost={loadingPost}
            loadingUsers={loadingUsers}
            />
    );
};

export default connect(
    ({ sample }) => ({
        post: sample.post,
        users: sample.users,
        loadingPost: sample.loading.GET_POST,
        loadingUsers: sample.loading.GET_USERS
    }),
    {
        getPost,
        getUsers
    }
)(SampleContainer);


그 다음 App 컴포넌트에서 CounterContainer 대신 SampleContainer를 렌더링해보자.


import React from 'react';
import SampleContainer from './containers/SampleContainer';

const App = () => {
  return (
    <div>
      <SampleContainer />
    </div>
  );
};

export default App;


브라우저를 열어 데이터가 잘 로딩되었는지, 개발자 도구 콘솔에서 액션이 어떤 순서로 발생하는지 확인하자.


    18.3.1.5 리팩토링

API를 요청해야 할 때마다 17줄 정도 되는 thunk 함수를 작성하는 것과 로딩 상태를 리듀서에서 관리하는 작업은
귀찮을 뿐 아니라 코드도 길어지게 만든다. 그러므로 반복되는 로직을 따로 분리하여 코드의 양을 줄여 본다.


export default function createRequestThunk(type, request) {
    // 성공 및 실패 액션 타입을 정의한다.
    const SUCCESS = `${type}_SUCCESS`;
    const FAILURE = `${type}_FAILURE`;
    return params => async dispatch => {
        dispatch({ type }); // 시작됨
        try {
            const response = await request(params);
            dispatch({
                type: SUCCESS,
                payload: response.data
            }); // 성공
        } catch (e) {
            dispatch({
                type: FAILURE,
                payload: e,
                error: true
            }); // 에러 발생
            throw e;
        }
    };
}

// 사용법: createRequestThunk('GET_USERS', api.getUsers);


이번에 만든 유틸 함수는 API 요청을 해 주는 thunk 함수를 한 줄로 생성할 수 있게 해준다.
액션 타입과 API를 요청하는 함수를 파라미터로 넣어 주면 나머지 작업을 대신 처리해 준다.
이 함수를 사용하여 기존 thunk 함수의 코드를 대체시켜 보자.


import { handleActions } from "redux-actions";
import * as api from '../lib/api';
import createRequestThunk from '../lib/createRequestThunk';

// 액션 타입을 선언
// 한 요청당 세 개를 만듦

const GET_POST = 'sample/GET_POST';
const GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS';
const GET_POST_FAILURE = 'sample/GET_POST_FAILURE';

const GET_USERS = 'sample/GET_USERS';
const GET_UESRS_SUCCESS = 'sample/GET_USERS_SUCCESS';
const GET_USERS_FAILURE = 'sample/GET_USERS_FAILURE';

// thunk 함수를 생성
// thunk 함수 내부에서는 시작할 때, 성공할 때, 실패했을 때 다른 액션을 디스패치

export const getPost = createRequestThunk(GET_POST, api.getPost);

export const getUsers = createRequestThunk(GET_USERS, api.getUsers);

// 초기 상태를 선언한다.
// 요청의 로딩 중 상태는 loading 이라는 객체에서 관리

const initialState = {...};

const sample = handleActions(...);

export default sample;


코드가 많이 줄었다. 이전과 똑같이 작동하는지 확인해보자.

이번에는 요청의 로딩 상태를 관리하는 작업을 개선하겠다.
기존에는 리듀서 내부에서 각 요청에 관련된 액션이 디스패치될 때마다 로딩 상태를 변경해 주었는데,
이 작업을 로딩 상태만 관리하는 리덕스 모듈을 따로 생성하여 처리하겠다.


import { createAction, handleActions } from "redux-actions";

const START_LOADING = 'loading/START_LOADING';
const FINISH_LOADING = 'loading/FINISH_LOADING';

/*
    요청을 위한 액션 타입을 payload로 설정한다(예: "sample/GET_POST").
*/

export const startLoading = createAction(
    START_LOADING,
    requestType => requestType
);

export const finishLoading = createAction(
    FINISH_LOADING,
    requestType => requestType
);

const initialState = {};

const loading = handleActions(
    {
        [START_LOADING]: (state, action) => ({
            ...state,
            [action.payload]: true
        }),
        [FINISH_LOADING]: (state, action) => ({
            ...state,
            [action.payload]: false
        })
    },
    initialState
);

export default loading;


다음은 요청이 시작될 때 디스패치할 액션이다.


{
    type: 'loading/START_LOADING',
    payload: 'sample/GET_POST'
}


위 액션이 디스패치되면 loading 리듀서가 관리하고 있는 상태에서 sample/GET_POST 값을 true로 설정해 준다.
만약 기존 상테에 sample/GET_POST 필드가 존재하지 않으면 새로 값을 설정해 준다.
그리고 요청이 끝나면 다음 액션을 디스패치해야 한다.


{
    type: 'loading/FINISH_LOADING',
    payload: 'sample/GET_POST'
}


그러면 기존에 true로 설정했던 값을 다시 false로 전환해준다.
리듀서를 다 작성했으면 루트 리듀서에 포함시키자.


import { combineReducers } from "redux";
import counter from './counter';
import sample from './sample';
import loading from './loading';

const rootReducer = combineReducers({
    counter,
    sample,
    loading
});

export default rootReducer;


loading 리덕스 모듈에서 만든 액션 생성 함수는 앞에서 만든 createRequestThunk에서 사용해준다.


import { startLoading, finishLoading } from "../modules/loading";

export default function createRequestThunk(type, request) {
    // 성공 및 실패 액션 타입을 정의한다.
    const SUCCESS = `${type}_SUCCESS`;
    const FAILURE = `${type}_FAILURE`;
    return params => async dispatch => {
        dispatch({ type }); // 시작됨
        dispatch(startLoading(type));
        try {
            const response = await request(params);
            dispatch({
                type: SUCCESS,
                payload: response.data
            }); // 성공
            dispatch(finishLoading(type));
        } catch (e) {
            dispatch({
                type: FAILURE,
                payload: e,
                error: true
            }); // 에러 발생
            dispatch(startLoading(type));
            throw e;
        }
    };
}

// 사용법: createRequestThunk('GET_USERS', api.getUsers);


그러면 SampleContainer 에서 로딩 상태를 다음과 같이 조회할 수 있다.


import React from 'react';
import { connect } from "react-redux";
import Sample from '../components/Sample';
import { getPost, getUsers } from "../modules/sample";

const { useEffect } = React;
const SampleContainer = ({...}) => {...};

export default connect(
    ({ sample, loading }) => ({
        post: sample.post,
        users: sample.users,
        loadingPost: loading['sample/GET_POST'],
        loadingUsers: loading['sample/GET_USERS']
    }),
    {
        getPost,
        getUsers
    }
)(SampleContainer);


코드를 저장하고 브라우저에서 잘 작동하는 지 확인해보자.
이제 sample 리듀서에서 불필요한 코드를 지워 본다.


import { handleActions } from "redux-actions";
import * as api from '../lib/api';
import createRequestThunk from '../lib/createRequestThunk';

// 액션 타입을 선언
// 한 요청당 세 개를 만듦

const GET_POST = 'sample/GET_POST';
const GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS';

const GET_USERS = 'sample/GET_USERS';
const GET_UESRS_SUCCESS = 'sample/GET_USERS_SUCCESS';

// thunk 함수를 생성
// thunk 함수 내부에서는 시작할 때, 성공할 때, 실패했을 때 다른 액션을 디스패치

export const getPost = createRequestThunk(GET_POST, api.getPost);

export const getUsers = createRequestThunk(GET_USERS, api.getUsers);

// 초기 상태를 선언한다.
// 요청의 로딩 중 상태는 loading 이라는 객체에서 관리

const initialState = {
    post: null,
    users: null
};

const sample = handleActions(
    {
        [GET_POST_SUCCESS]: (state, action) => ({
            ...state,
            post: action.payload
        }),
        [GET_UESRS_SUCCESS]: (state, action) => ({
            ...state,
            users: action.payload
        })
    },
    initialState
);

export default sample;


코드가 훨씬 깔끔해졌다. 이제 sample 리듀서에서는 로딩 중에 대한 상태를 관리할 필요가 없다.
성공했을 때의 케이스만 잘 관리해 주면 된다. 추가로 실패했을 때의 케이스를 관리하고 싶다면 _FAILURE 가 붙은
액현 리듀서에서 처리해주면 된다. 혹은 컨테이너 컴포넌트에서 try/catch 구문을 사용하여 에러 값을 조회할 수도 있다.


useEffect(() => {
    // useEffect 에 파라미터로 넣는 함수는 async로 할 수 없기 때문에
    // 그 내부에서 async 함수를 선언하고 호출
    const fn = async () => {
        try {
            await getPost(1);
            await getUsers(1);
        } catch (e) {
            console.log(e); // 에러 조회
        }
    };
    fn();
}, [getPost, getUsers]);


redux-thunk를 처음 쓸 때는 비록 작성해야 할 코드가 많아서 불편할 수 있다.
유용한 함수와 리듀서를 만들어서 상태를 관리한다면 매우 깔끔한 코드로 기능을 구현할 수 잇다.


        17.3.2 redux-saga

이번에는 redux-saga 를 통해 비동기 작업을 관리하는 방법을 알아보겠다.
이 미들웨어는 redux-thunk 다음으로 많이 사용하는 비동기 작업 관련 미들웨어이다.

redux-thunk는 함수 형태의 액션을 디스패치하여 미들웨어에서 해당 함수에 스토어의 dispatch와 getState를 파라미터로 넣어서 사용하는 원리이다.
그래서 구현한 thunk 함수 내부에서 원하는 API 요청도 하고, 다른 액션을 디스패치하거나 현재 상태를 조회하기도 했다.
대부분의 경우에는 이전 절에서 배운 redux-thunk로도 충분히 기능을 구현할 수 있다.

이번에 배울 redux-saga는 좀 더 까다로운 상황에서 유용하다. 예를 들어 다음과 같은 상황에서는 redux-saga를 사용하는 것이 유리하다.


    - 기존 요청을 취소 처리해야 할 때(불필요한 중복 요청 방지)
    - 특정 액션이 발생했을 때 다른 액션을 발생시키거나, API 요청 등 리덕스와 관계없는 코드를 실행할 때
    - 웹소켓을 사용할 때
    - API 요청 실패 시 재요청해야 할 때


    18.3.2.1 제너레이터 함수 이해하기

redux-saga에서는 ES6의 제너레이터(generator) 함수라는 문법을 사용한다. 보통 일반적인 상황에서는 많이 사용되지 않기 때문에
초반에 진입 장벽이 있을 수 있다.
우선 제너레이터 함수 문법에 대해 알아보자. 이 문법의 핵심 기능은 함수를 작성할 때 함수를 특정 구간에 멈춰 놓을 수 있고,
원할 때 다시 돌아가게 할 수도 있다는 것이다.

다음과 같은 함수가 있다고 가정해보자.


function weirdFunction() {
    return 1;
    return 2;
    return 3;
    return 4;
    return 5;
}


하나의 함수에서 값을 여러 개 반환하는 것은 불가능하므로 이 코드는 제대로 작동하지 않는다.
정확히는 호출할 때마다 맨 위에 있는 값인 1이 반환된다.

하지만 제너레이터 함수를 사용하면 함수에서 값을 순차적으로 반환할 수 있다. 심지어 함수의 흐름을 도중에 멈춰 놓았다가 다시 이어서
진행시킬 수도 있다.

크롬 개발자 도구 콘솔에서 다음 함수를 한번 작성해보자.


function* generatorFunction() {
    console.log('안녕하세요');
    yield 1;
    console.log('제너레이터 함수');
    yield 2;
    console.log('function*');
    yield 3;
    return 4;
}


제너레이터 함수를 만들때는 function* 키워드를 사용한다.
함수를 작성한 뒤에는 다음 코드를 사용해 제너레이터를 생성한다.


const generator = generatorFunction();


제너레이터 함수를 호출했을 때 반환되는 객체를 제너레이터라고 부른다.
이제 다음 코드를 순차적으로 한 줄씩 입력하고 어떤 결과가 나타나는지 확인해보자.


generator.next();
// 안녕하세요
// { value: 1, done: false }
generator.next();
// 제러레이터 함수
// { value: 2, done: false }
generator.next();
// function*
// { value: 3, done: false }
generator.next();
// { value: 4, done: true }
generator.next();
// { value: undefined, done: true }


제너레이터가 처음 만들어지면 함수의 흐름은 멈춰 있는 상태이다. 
next()가 호출되면 다음 yield가 있는 곳까지 호출하고 다시 함수가 멈춘다.
제너레이터 함수를 사용하면 함수를 도중에 멈출 수도 있고, 순차적으로 여러 값을 반환시킬 수도 있다.
next 함수에 파라미터를 넣으면 제너레이터 함수에서 yield 를 사용하여 해당 값을 조회할 수도 있다.

다음 예시 코드를 크롬 개발자 도구 콘솔에서 한번 입력해보자.


function* sumGenerator() {
    console.log('sumGenerator가 만들어졌습니다.');
    let a = yield;
    let b = yield;
    yield a + b;
}

const sum = sumGenerator();
sum.next();
// sumGenerator가 만들어졌습니다.
// { value: undefined, done: false }
sum.next(1);
// { value: undefined, done: false }
sum.next(2);
// { value: 3, done: false }
sum.next();
// { value: undefined, done: true }


redux-saga는 제너레이터 함수 문법을 기반으로 비동기 작업을 관리해 준다.
좀 더 이해하기 쉽게 설명하면, redux-saga는 우리가 디스패치하는 액션을 모니터링해서 그에 따라 필요한 작업을
따로 수행할 수 있는 미들웨어이다.

다음 예시 코드를 크롬 개발자 도구에 한번 입력해 보자.


function* watchGenerator() {
    console.log('모니터링 중...');
    let prevAction = null;
    while(true) {
        const action = yield;
        console.log('이전 액션: ', prevAction);
        prevAction = action;
        if(action.type === 'HELLO') {
            console.log('안녕하세요!');
        }
    }
}

const watch = watchGenerator();

watch.next();
// 모니터링 중...
// { value: undefined, done: false }
watch.next({ type: 'TEST' });
// 이전 액션: null
// { value: undefined, done: false }
watch.next({ type: 'HELLO' });
// 이전 액션: { type: "TEST" }
// 안녕하세요!
// { value: undefined, done: false }


redux-saga는 위 코드와 비슷한 원리로 작동한다.
제너레이터 함수의 작동 방식만 기본적으로 파악하고 있으면, redux-saga에서 제공하는 여러
유용한 유틸 함수를 사용하여 액션을 쉽게 처리할 수 있다.


    18.3.2.2 비동기 카운터 만들기

기존에 thunk 함수로 구현했던 비동기 카운터를 이번에는 redux-saga를 사용하여 구현해 본다.
우선 라이브러리를 설치해 주자.


$ yarn add redux-saga


그리고 counter 리덕스 모듈을 열어서 기존 thunk 함수를 제거하고, INCREMENT_ASYNC 와 DECREMENT_ASYNC 라는 액션 타입을 선언한다.
해당 액션에 대한 액션 생성 함수도 만들고, 이어서 제너레이터 함수를 만든다. 이 제너레이터 함수를 사가라고 부른다.


import { createAction, handleActions } from "redux-actions";
import { delay, put, takeEvery, takeLatest } from "redux-saga/effects";

const INCREASE = 'counter/INCREASE';
const DECREASE = 'counter/DECREASE';

const INCREASE_ASYNC = 'counter/INCREASE_ASYNC';
const DECREASE_ASYNC = 'counter/DECREASE_ASYNC';

export const increase = createAction(INCREASE);
export const decrease = createAction(DECREASE);
// 마우스 클릭 이벤트가 payload 안에 들어가지 않도록
// () => undefined를 두 번재 파라미터로 넣어 준다.
export const increaseAsync = createAction(INCREASE_ASYNC, () => undefined);
export const decreaseAsync = createAction(DECREASE_ASYNC, () => undefined);

function* increaseSaga() {
    yield delay(1000);  // 1초를 기다림
    yield put(increase());  // 특정 액션을 디스패치
}

function* decreaseSaga() {
    yield delay(1000);  // 1초를 기다림
    yield put(decrease());  // 특정 액션을 디스패치
}

export function* counterSaga() {
    // takeEvery는 들어오는 모든 액션에 대해 특정 작업을 처리해 준다.
    yield takeEvery(INCREASE_ASYNC, increaseSaga);
    // takeEvery는 기존에 진행 중이던 작업이 있다면 취소 처리하고
    // 가장 마지막으로 실행된 작업만 수행한다.
    yield takeLatest(DECREASE_ASYNC, decreaseSaga);
}

const initialState = 0; // 상태는 꼭 객체일 필요가 없다. 숫자도 작동한다.

const counter = handleActions(
    {
        [INCREASE]: state => state + 1,
        [DECREASE]: state => state - 1
    },
    initialState
);

export default counter;


그리고 루트 리듀서를 만들었던 것처럼 루트 사가를 만들어 주어야 한다.
추후 다른 리듀서에서도 등록할 것이기 때문이다.


import { combineReducers } from "redux";
import counter, { counterSaga } from './counter';
import sample from './sample';
import loading from './loading';
import { all } from "redux-saga/effects";

const rootReducer = combineReducers({
    counter,
    sample,
    loading
});

export function* rootSaga() {
    // all 함수는 여러 사가를 합쳐 주는 역할
    yield all([counterSaga()]);
}

export default rootReducer;


이제 스토어에 redux-saga 미들웨어를 적용해 준다.


import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { applyMiddleware, createStore } from "redux";
import { Provider } from "react-redux";
import rootReducer, { rootSaga } from './modules';
// import loggerMiddleware from './lib/loggerMiddleware';
import { createLogger } from "redux-logger";
import ReduxThunk from 'redux-thunk';
import createSagaMiddleware from 'redux-saga';

const logger = createLogger();
const sagaMiddleware = createSagaMiddleware();
const store = createStore(
  rootReducer, 
  applyMiddleware(logger, ReduxThunk, sagaMiddleware)
);
sagaMiddleware.run(rootSaga);

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


스토어에 미들웨어를 적용했다면 CounterContainer 컴포넌트를 App 컴포넌트에 렌더링하여 잘 작동하는지 확인하자.
counter 리덕스 모듈이 변경되기는 했지만, 컨테이너 컴포넌트에서 수정해야 할 것은 없다.
왜냐면, 기존에 사용 중이던 thunk 함수와 똑같은 이름으로 액션 생성 함수를 만들었기 때문이다.


import React from 'react';
import CounterContainer from './containers/CounterContainer';

const App = () => {
  return (
    <div>
      <CounterContainer />
    </div>
  );
};

export default App;


여기서 리덕스 개발자 도구를 적용하여 어떤 액션이 디스패치되고 있는지 더 편하게 확인해보자.
먼저 리덕스 개발자 도구 라이브러리를 설치하자.


$ yarn add redux-devtools-extension


이 라이브러리의 composeWithDevTools 함수를 리덕스 미들웨어와 함께 사용할 때는 그냥 applyMiddleware 부분을 감싸 주면 된다.


import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { applyMiddleware, createStore } from "redux";
import { Provider } from "react-redux";
import rootReducer, { rootSaga } from './modules';
// import loggerMiddleware from './lib/loggerMiddleware';
import { createLogger } from "redux-logger";
import ReduxThunk from 'redux-thunk';
import createSagaMiddleware from 'redux-saga';
import { composeWithDevTools } from "redux-devtools-extension";

const logger = createLogger();
const sagaMiddleware = createSagaMiddleware();
const store = createStore(
  rootReducer, 
  composeWithDevTools(applyMiddleware(logger, ReduxThunk, sagaMiddleware))
);
sagaMiddleware.run(rootSaga);

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


리덕스 개발자 도구를 사용했다. 이제 리덕스 개발자 도구를 열고 +1 버튼을 빠르게 두 번 눌러보자.

+1 버튼을 두 번 누르면 INCREASE_ASYNC 액션이 두 번 디스패치되고, 이에 따라 INCREASE 액션도 두 번 디스패치 된다.
takeEvery를 사용하여 increaseSaga 를 등록했으므로 디스패치되는 모든 INCREASE_ASYNC 액션에 대해
1초 후 INCREASE 액션을 발생시켜 준다.

이번에는 페이지를 새로고침하고 -1 버튼을 두 번 눌러서 어떤 액션이 디스패치되는지 확인해보자.

조금 전과는 다르게 DECREASE_ASYNC 액션이 두 번 디스패치되었음에도 불구하고 DECREASE 액션은 
단 한 번 디스패치되었다. 조금 전에 decreaseSaga를 등록할 때 takeLatest를 사용했기 때문이다.
여러 액션이 중첩되어 디스패치되었을 때는 기존의 것들은 무시하고 가장 마지막 액션만 제대로 처리한다.


    18.3.2.3 API 요청 상태 관리하기

이번에는 redux-saga 를 사용하여 API 요청을 해 보겠다. 기존에 thunk로 관리하던 액션 생성 함수를 없애고,
사가를 사용하여 처리한다.
sample 리덕스 모듈을 다음과 같이 수정해보자.


import { createAction, handleActions } from "redux-actions";
import * as api from '../lib/api';
import { call, put, takeLatest } from "redux-saga/effects";
import { startLoading, finishLoading } from "./loading";

// 액션 타입을 선언
const GET_POST = 'sample/GET_POST';
const GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS';
const GET_POST_FAILURE = 'sample/GET_POST_FAILURE';

const GET_USERS = 'sample/GET_USERS';
const GET_UESRS_SUCCESS = 'sample/GET_USERS_SUCCESS';
const GET_USERS_FAILURE = 'sample/GET_USERS_FAILURE';

export const getPost = createAction(GET_POST, id => id);
export const getUsers = createAction(GET_USERS);

function* getPostSaga(action) {
    yield put(startLoading(GET_POST));  // 로딩 시작
    // 파라미터로 action을 받아 오면 액션의 정보를 조회할 수 있다.
    try {
        // call을 사용하면 Promise를 반환하는 함수를 호출하고, 기다릴 수 있다.
        // 첫 번째 파라미터는 함수, 나머지 파라미터는 해당 함수에 넣을 인수이다.
        const post = yield call(api.getPost, action.payload);   // api.getPost(action.payload)를 의미
        yield put({
            type: GET_POST_SUCCESS,
            payload: post.data
        });
    } catch (e) {
        // try/catch 문을 사용하여 에러도 잡을 수 있다.
        yield put({
            type: GET_POST_FAILURE,
            payload: e,
            error: true
        });
    }
    yield put(finishLoading(GET_POST)); // 로딩 완료
}

function* getUsersSaga() {
    yield put(startLoading(GET_USERS));
    try {
        const users = yield call(api.getUsers);
        yield put({
            type: GET_UESRS_SUCCESS,
            payload: users.data
        });
    } catch (e) {
        yield put({
            type: GET_USERS_FAILURE,
            payload: e,
            error: true
        });
    }
    yield put(finishLoading(GET_USERS));
}

export function* sampleSaga() {
    yield takeLatest(GET_POST, getPostSaga);
    yield takeLatest(GET_USERS, getUsersSaga);
}

// 초기 상태를 선언
// 요청의 로딩 중 상태는 loading이라는 객체에서 관리

const initialState = {
    post: null,
    users: null
};

const sample = handleActions(
    {
        [GET_POST_SUCCESS]: (state, action) => ({
            ...state,
            post: action.payload
        }),
        [GET_UESRS_SUCCESS]: (state, action) => ({
            ...state,
            users: action.payload
        })
    },
    initialState
);

export default sample;


여기서 GET_POST 액션의 경우에는 API 요청을 할 때 어떤 id로 조회할지 정해 주어야 한다.
redux-saga를 사용할 때는 id처럼 요청에 필요한 값을 액션의 payload로 넣어 주어야 한다.
예를 들어 지금 상황이라면 다음과 같은 액션이 디스패치된다.


{
    type: 'sample/GET_POST',
    payload: 1
}


그러면 이 액션을 처리하기 위한 사가를 작성할 때 payload 값을 API 호출하는 함수의 인수로 넣어 주어야 한다.
API를 호출해야 하는 상황에는 사가 내부에서 직접 호출하지 않고 call 함수를 사용한다.
call 함수의 경우, 첫 번째 인수는 호출하고 싶은 함수이고, 그 뒤에 오는 인수들은 해당 함수에 넣어 주고 싶은 인수이다.
지금 getPostSaga의 경우에는 id를 의미하는 action.payload가 인수가 될 것이다.

사가를 작성하여 구현하는 과정에서 처음 redux-thunk 를 사용했을 때처럼 반복되는 코드가 나왔다.
충분히 간소화할 수 있는 코드들이다. 지금은 일단 기능을 구현하고, 나중에 리팩토링하겠다.

코드를 다 수정했으면 sampleSaga를 루트 사가에 등록하자.


import { combineReducers } from "redux";
import counter, { counterSaga } from './counter';
import sample, { sampleSaga } from './sample';
import loading from './loading';
import { all } from "redux-saga/effects";

const rootReducer = combineReducers({
    counter,
    sample,
    loading
});

export function* rootSaga() {
    // all 함수는 여러 사가를 합쳐 주는 역할
    yield all([counterSaga(), sampleSaga()]);
}

export default rootReducer;


사가를 등록한 후, App 컴포넌트에서 SampleContainer를 렌더링하자.


import React from 'react';
import SampleContainer from './containers/SampleContainer';

const App = () => {
  return (
    <div>
      <SampleContainer />
    </div>
  );
};

export default App;


기능이 잘 작동되는지 확인해보자.


    18.3.2.4 리팩토링

이제는 반복되는 코드를 따로 함수화하여 리팩토링해 보자.
이전에 thunk 함수를 위해 createRequestThunk 라는 함수를 만들었던 것처럼 createRequestSaga라는 함수를 만들자.


import { call, put } from "redux-saga/effects";
import { startLoading, finishLoading } from "../modules/loading";

export default function createRequestSaga(type, request) {
    const SUCCESS = `${type}_SUCCESS`;
    const FAULURE = `${type}_FAILURE`;

    return function*(action) {
        yield put(startLoading(type));  // 로딩 시작
        try {
            const response = yield call(request, action.payload);
            yield put({
                type: SUCCESS,
                payload: response.data
            });
        } catch (e) {
            yield put({
                type: FAULURE,
                payload: e,
                error: true
            });
        }
        yield put(finishLoading(type)); // 로딩 끝
    };
}


이제 기존에 구현했던 사가를 다음과 같이 짧은 코드로 구현할 수 있다.


import { createAction, handleActions } from "redux-actions";
import * as api from '../lib/api';
import { takeLatest } from "redux-saga/effects";
import createRequestSaga from '../lib/createRequestSaga';

// 액션 타입을 선언
const GET_POST = 'sample/GET_POST';
const GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS';

const GET_USERS = 'sample/GET_USERS';
const GET_UESRS_SUCCESS = 'sample/GET_USERS_SUCCESS';

export const getPost = createAction(GET_POST, id => id);
export const getUsers = createAction(GET_USERS);

const getPostSaga = createRequestSaga(GET_POST, api.getPost);
const getUsersSaga = createRequestSaga(GET_USERS, api.getUsers);

export function* sampleSaga() {
    yield takeLatest(GET_POST, getPostSaga);
    yield takeLatest(GET_USERS, getUsersSaga);
}

// 초기 상태를 선언
// 요청의 로딩 중 상태는 loading이라는 객체에서 관리

const initialState = {
    post: null,
    users: null
};

const sample = handleActions(
    {
        [GET_POST_SUCCESS]: (state, action) => ({
            ...state,
            post: action.payload
        }),
        [GET_UESRS_SUCCESS]: (state, action) => ({
            ...state,
            users: action.payload
        })
    },
    initialState
);

export default sample;


    18.3.2.5 알아 두면 유용한 기능들

이번에는 redux-saga가 제공하는 기능 중에서 알아 두면 유용한 몇 가지 기능을 배워보자.
먼저 사가 내부에서 현재 상태를 조회하는 방법이다.


import { createAction, handleActions } from "redux-actions";
import { delay, put, takeEvery, takeLatest, select } from "redux-saga/effects";

...

function* increaseSaga() {
    yield delay(1000);  // 1초를 기다림
    yield put(increase());  // 특정 액션을 디스패치
    const number = yield select(state => state.counter);    // state는 스토어 상태를 의미함
    console.log(`연재 값은 ${number}입니다.`);
}

...


이제 CounterContainer를 App 에서 렌더링하고 +1 버튼을 눌러보자.

만약 사가 내부에서 현재 상태를 참조해야 하는 상황이 생기면 이렇게 select 를 사용하면 된다.
다음으로 사가가 실행되는 주기를 제한하는 방법이다. takeEvery 대신 throttle이라는 함수를 사용하면
사가가 n초에 단 한 번만 호출되도록 설정할 수 있다.

예를 들어 counterSaga를 다음과 같이 수정하면 increaseSaga는 3초에 단 한번만 호출된다.


import { createAction, handleActions } from 'redux-actions';
import {
    delay,
    put,
    takeEvery,
    takeLatest,
    select,
    throttle
} from 'redux-saga/effects';

...

export function* counterSaga() {
    // 첫 번째 파라미터: n초 * 1000
    yield throttle(3000, INCREASE_ASYNC, increaseSaga);
    // takeLatest는 기존에 진행 중이던 작업이 있다면 취소 처리하고
    // 가장 마지막으로 실행된 작업만 수행한다.
    yield takeLatest(DECREASE_ASYNC, decreaseSaga);
}

...


redux-saga는 이 책에서 다룬 기능 외에도 여러 기능을 제공하기 때문에 비동기 작업을 처리하면서 겪을 수 있는 다양한 상황에 맟춰
개발할 수 있다. 조금 복잡한 상황을 접했다면 redux-saga의 메뉴얼(https://redux-saga.js.org/)을 참고하자.