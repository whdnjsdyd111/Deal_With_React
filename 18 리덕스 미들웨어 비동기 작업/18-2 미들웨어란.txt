            18.2 미들웨어란?

리덕스 미들웨어는 액션을 디스패치했을 때 리듀서에서 이를 처리하기에 앞서 사전에 지정된 작업들을 실행한다.
미들웨어는 액션과 리듀서 사이의 중간자라고 볼 수 있다.


    액션    →   미들웨어    →   리듀서  →   스토어


리듀서가 액션을 처리하기 전에 미들웨어가 할 수 있는 작업은 여러 가지가 있다.
전달받은 액션은 단순히 콘솔에 기록하거나, 전달받은 액션 정보를 기반으로 액션을 아예 취소하거나,
다른 종류의 액션을 추가로 디스패치할 수도 있다.


        18.2.1 미들위어 만들기

실제 프로젝트를 작업할 때 미들웨어를 직접 만들어서 사용할 일은 그리 많지 않다.
다른 개발자가 만들어 놓은 미들웨어를 사용하면 되기 때문이다. 하지만 미들웨어가 어떻게 작동하는지
이해하려면 직접 만들어 보는 것이 가장 효과적이다.
간단한 미들웨어를 직접 만들어 보면 미들웨어의 작동 방식을 제대로 이해할 수 있다.
원하는 미들웨어를 찾을 수 없을 때는 상황에 따라 직접 만들거나 기존 미들웨어들을 커스터마이징하여
사용할 수도 있다.

여기서는 액션이 디스패치될 때마다 액션의 정보와 액션이 디스패치되기 전후의 상태를 콘솔에 보여 주는 로깅 미들웨어를
작성해 보겠다.

src 디렉터리에 lib 디렉터리를 생성하고, 그 안에 loggerMiddleware.js 파일을 생성하자.


const loggerMiddleware = store => next => action => {
    // 미들웨어 기본 구조
};

export default loggerMiddleware;


위 코드에서 리덕스 미들웨어의 구조를 볼 수 있다. 화살표 함수를 연달아서 사용했는데,
일반 function 키워드로 풀어서 쓴다면 다음과 같은 구조이다.


const loggerMiddleware = function loggerMiddleware(store) {
    return function(next) {
        return function(action) {
            // 미들웨어 기본 구조
        };
    };
};


미들웨어는 결국 함수를 반환하는 함수를 반환하는 함수이다. 여기에 있는 함수에서 파라미터로 받아오는 
store는 리덕스 스토어 인스턴스를, action은 디스패치된 액션을 가리킨다. 이 두 가지 값은 이미 익숙하다.
반면에 next는 익숙하지 않다. next 파라미터는 함수 형태이며, store.dispatch와 비슷한 역할을 한다.
하지만 큰 차이점이 있는데, next(action)을 호출하면 그 다음 처리해야 할 미들웨어에게 액션을 넘겨주고,
만약 그 다음 미들웨어가 없다면 리듀서에게 액션을 넘겨주는 것이다.


            ┌── store.dispatch
            ↓        │
    액션    →   미들웨어1   →   next    →   미들웨어2
                                                │
                                              next
                                                │
                                              리듀서
                                                ↓
                                              스토어


미들웨어 내부에서 store.dispatch를 사용하면 첫 번째 미들웨어부터 다시 처리한다.
만약 미들웨어에서 next를 사용하지 않으면 액션이 리듀서에 전달되지 않는다.
즉, 액션이 무시되는 것이다.
이제 미들웨어를 마저 구현해 보자. 이번에 만들 미들웨어는 다음 정보를 순차적으로 콘솔에 보여준다.


    1. 이전상태
    2. 액션 정보
    3. 새로워진 상태


const loggerMiddleware = store => next => action => {
    console.group(action && action.type);   // 액션 타입으로 log를 그룹화
    console.log('이전 상태', store.getState());
    console.log('액션', action);
    next(action);   // 다음 미들웨어 혹은 리듀서에게 전달
    console.log('다음 상태', store.getState()); // 업데이트된 상태
    console.groupEnd(); // 그룹 끝
};

export default loggerMiddleware;


만든 리덕스 미들웨어를 스토어에 적용해보자.
미들웨어는 스토어를 생성하는 과정에서 적용한다.


import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { applyMiddleware, createStore } from "redux";
import { Provider } from "react-redux";
import rootReducer from './modules';
import loggerMiddleware from './lib/loggerMiddleware';

const store = createStore(rootReducer, applyMiddleware(loggerMiddleware));

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


액션 정보와 업데이트되기 전후의 상태가 잘 나타는지 확인하자. 미들웨어에서는 여러 종류의 작업을 처리할 수 있다.
특정 조건에 따라 액션을 무시하게 할 수도 있고, 특정 조건에 따라 액션 정보를 가로채서 변경한 후 리듀서에 전달해 줄 수도 있다.
아니면 특정 액션에 기반하여 새로운 액션을 여러 번 디스패치할 수도 있다.

이러한 미들웨어 속성을 사용하여 네트워크 요청과 같은 비동기 작업을 관리하면 매우 유용하다.


        18.2.2 redux-logger 사용하기

이번에는 오픈 소스 커뮤니티에 이미 올라와 있는 redux-logger 미들웨어를 설치하고 사용해보겠다.
방금 만든 loggerMiddleware 보다 훨씬 더 잘 만들어진 라이브러리이며, 브라우저 콘솔에 나타나는 형식도 훨씬 깔끔하다.

우선 명령어를 사용하여 redux-logger를 설치하자.


$ yarn add redux-logger


이어서 index.js를 다음과 같이 수정해보자.


import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { applyMiddleware, createStore } from "redux";
import { Provider } from "react-redux";
import rootReducer from './modules';
// import loggerMiddleware from './lib/loggerMiddleware';
import { createLogger } from "redux-logger";

const logger = createLogger();
const store = createStore(rootReducer, applyMiddleware(logger));

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


이제 브라우저를 열어 다시 확인해보자.