            7.2 라이프사이클 메소드 살펴보기

        7.2.1 render() 함수


render() {..}


익숙할 것인데, 이 메소드는 컴포넌트 모양새를 정의한다.
그렇기에 컴포넌트에서 가장 중요한 메소드라할 수 있다.
라이프사이클 메소드 중 유일한 필수 메소드이기도 하다.

이 메소드 안에서 this.props와 this.state에 접근할 수 있으며, 리액트 요소를 반환한다.
요소는 div 같은 태그가 될 수도 있고, 따로 선언한 컴포넌트가 될 수도 있다. 아무것도 보여 주고 싶지 않다면
null 값이나 false 값을 반환하도록 한다.

그리고 다음 사항에 주의하자.
이 메소드 안에서는 이벤트 설정이 아닌 곳에서 setState를 사용하면 안 되며, 브라우저의 DOM에 접근해서도 안된다.
DOM 정보를 가져오거나 state에 변화를 줄 때는 componentDidMount에서 처리해야 한다.


        7.2.2 constructor 메소드


constructor(props) {...}


이것은 컴포넌트의 생성자 메소드로 컴포넌트를 만들 때 처음으로 실행된다.
이 메소드에선 초기 state를 정할 수 있다.


        7.2.3 getDerivedStateFromProps 메소드
    
이것은 리액트 v16.3 이후에 새로 만든 라이프사이클 메소드다.
props로 받아온 값을 state에 동기화시키는 용도로 사용하며, 컴포넌트가 마운트될 때와 업데이트될 때 호출된다.


static getDerivedStateFromProps(nextProps, prevState) {
    if(nextProps.value !== prevState.value) {   // 조건에 따라 특정 값 동기화
        return { value: nextProps.value };
    }
    return null;    // state를 변경할 필요가 없다면 null 반환
}


        7.2.4 componentDidMount에서 메소드


componentDidMount() {...}


이것은 컴포넌트를 만들고, 첫 렌더링을 다 마친 후 실행합니다. 
이 안에서 다른 자바스크립트 라이브러리 또는 프레임워크의 함수를 호출하거나 이벤트 등록,
setTimeout, setInterval, 네트워크 요청 같은 비동기 작업을 처리하면된다.


        7.2.5 shouldComponentUpdate 메소드

shouldComponentUpdate(nextProps, nextState) {...}


이것은 props 또는 state를 변경했을 때, 리렌더링을 시작할 지 여부를 지정하는 메소드다.
이 메소드에선 반드시 true 값 또는 false 값을 반환해야 한다.
컴포넌트를 만들 때 이 메소드를 따로 생성하지 않으면 기본적으로 언제나 true 값을 반환한다.
이 메소드가 false 값을 반환하면 업데이트 과정은 여기서 중지된다.

이 메소드 안에서 현재 props와 state는 this.props와 this.state로 접근하고, 
새로 설정될 props 또는 state는 nextProps와 nextState로 접근할 수 있다.

프로젝트 성능을 최적화할 때, 상황에 맞는 알고리즘을 작성하여 리렌더링을 방지할 때는 false 값을 반환하게 한다.
컴포넌트를 최적화하는 부분은 앞으로 리액트를 공부하면서 더 자세히 알아보자.


        7.2.6 getSnapshotBeforeUpdate 메소드

이것은 리액트 v16.3 이후 만든 메소드다. 이 메소드는 render 에서 만들어진 결과물이 브라우저에 실제 반영되기 직언에 호출된다.
이 메소드에서 반환된 값은 componentDidUpdate에서 세 번째 파라미터인 snapshot 값으로 전달받을 수 있는데,
주로 업데이트하기 직전의 값을 참고할 일의 있을 때 활용된다.(예: 스크롤바 위치 유지)


getSnapshotBeforeUpdate(prevProps, prevState) {
    if(prevState.array !== this.state.array) {
        const { scrollTop, scrollHeight } = this.list
        return { scrollTop, scrollHeight };
    }
}


        7.2.7 componentDidUpdate 메소드


componentDidUpdate(prevProps, prevState, snapshot) {...}


이것은 리렌더링을 완료한 후 실행한다. 업데이트 끝난 직후이므로 DOM 관련 처리를 해도 무방하다.
여기서는 prevProps 또는 prevState를 사용하여 컴포넌트가 이전에 가졌던 데이터에 접근할 수 있다.
또 getSnapshotBeforeUpdate에서 반환한 값이 있다면 여기서 snapshot 값을 전달받을 수 있다.


        7.2.8 componentWillUnmount 메소드


componentWillUnmount() {...}


이것은 컴포넌트를 DOM에서 제거할 때 실행한다.
componentWillUnmount에서 등록한 이벤트, 타이머, 직접 생성한 DOM이 있다면 여기서 제거 작업을 해야한다.


        7.2.9 componentDidCatch 메소드

componentDidCatch 메소드는 리액트 v16 에서 새롭게 도입되어 컴포넌트 렌더링 도중에 에러가 발생했을 때
애플리케이션이 먹통이 되지 않고 오류 UI를 보여줄 수 있게 해준다.
사용 방법은 다음과 같다.


componentDidCatch(error, info) {
    this.setState({
        error: true
    });
    console.log({ error, info });
}


여기서 error는 파라미터에 어떤 에러가 발생했는지 알려주며, info 파라미터는 어디에 있는 코드에서 오류가 난건지 알려준다.
앞의 코드에선 그저 console.log 만 했는데, 나중에 실제 오류가 발생하면 서버 API를 호출해서 따로 수집할 수 있다.

그러나 이 메소드를 사용할 때는 컴포넌트 자신에게 발생하는 에러를 잡아낼 수 없고 자신의 this.props.children으로 전달되는
컴포넌트에서 발생하는 에러만 잡아낼 수 있다는 점을 알아두어야 한다.