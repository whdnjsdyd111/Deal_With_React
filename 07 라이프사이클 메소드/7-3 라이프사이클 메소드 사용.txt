            7.3 라이프사이클 메소드 사용하기

직접 사용해보자.
이번 실습 흐름은 다음과 같다.


    LifeCycleSample 컴포넌트 만들기
        ↓
    App에 렌더링
        ↓
    버튼 누르고 콘솔 창 관찰


        7.3.1 예제 컴포넌트 생성

src 디렉터리에 LifeCycleSample.js 컴포넌트를 만들자.


import React, { Component } from 'react';

class LifeCycleSample extends Component {
    state = {
        number: 0,
        color: null,
    }

    myRef = null;   // ref를 설정할 부분

    constructor(props) {
        super(props);
        console.log('constructor');
    }

    static getDerivedStateFromProps(nextProps, prevState) {
        console.log('getDerivedStateFromProps');
        if(nextProps.color !== prevState.color) {
            return { color: nextProps.color };
        }
        return null;
    }

    componentDidMount() {
        console.log('componentDidMount');
    }

    shouldComponentUpdate(nextProps, nextState) {
        console.log('shouldComponentUpdate', nextProps, nextState);
        // 숫자의 마지막 자리가 4면 리렌더링하지 않는다.
        return nextState.number % 10 !== 4;
    }

    componentWillUnmount() {
        console.log('componentWillUnmount');
    }

    handleClick = () => {
        this.setState({
            number: this.state.number + 1
        });
    }

    getSnapshotBeforeUpdate(prevProps, prevState) {
        console.log('getSnapshotBeforeUpdate');
        if(prevProps.color !== this.props.color) {
            return this.myRef.style.color;
        }
        return null;
    }

    componentDidUpdate(prevProps, prevState, snapshot) {
        console.log('componentDidUpdate', prevProps, prevState);
        if(snapshot) {
            console.log('업데이트되기 직전 색상: ', snapshot);
        }
    }

    render() {
        console.log('render');

        const style = {
            color: this.props.color
        };

        return (
            <div>
                <h1 style={style} ref={ref => this.myRef = ref}>
                    {this.state.number}
                </h1>
                <p>color: {this.state.color}</p>
                <button onClick={this.handleClick}>
                    더하기
                </button>
            </div>
        );
    }
}

export default LifeCycleSample;


이 컴포넌트는 각 라이프사이클 메소드를 실행할 때마다 콘솔 디버거에 기록하고, 부모 컴포넌트애서 props로 색상을 받아
버튼을 누르면 state.number 값을 1씩 더한다.

getDerivedStateFromProps는 부모에게서 받은 color 값을 state에 동기화하고 있다.
그리고 getSnapshotBeforeUpdate는 DOM에 받은 변화가 일어나기 직전의 색상 속성을 snapshot 값으로 반환하여
이것을 componentDidUpdate에서 조회할 수 있게 했다.

추가로 shouldComponentUpdate 메소드에서 state.number 값의 마지막 자리수가 4이면 리렌더링을 취소하도록 했다.


        7.3.2 App 컴포넌트에서 예제 컴포넌트 사용

App.js 파일의 기존 코드를 지우고 다음과 같이 작성해보자.


import React, { Component } from 'react';
import LifeCycleSample from './LifeCycleSample';

// 랜덤 색상을 생성
function getRandomColor() {
  return '#' + Math.floor(Math.random() * 16777215).toString(16);
}

class App extends Component {
  state = {
    color: '#000000'
  }

  handleClick = () => {
    this.setState({
      color: getRandomColor()
    });
  }

  render() {
    return (
      <div>
        <button onClick={this.handleClick}>랜덤 색상</button>
        <LifeCycleSample color={this.state.color}/>
      </div>
    );
  }
}

export default App;


getRandomColor 함수는 state의 color 값을 랜덤 색상으로 설정한다.
16777215를 hex로 표현하면 ffffff가 되므로 해당 코드는 000000부터 ffffff 값을 반환한다.

버튼을 렌더링하고 누를 때마다 handleClick 메소드가 호출되게 이벤트를 설정하며, 
불러온 LifeCycleSample 컴포넌트에 color 값을 props로 설정한다.

코드를 저장하고 결과물을 보자.


    노트 React.StricMode 적용

2.3.2 절에서 언급한 React.StricMode 가 적용되어 있으면 일부 라이프사이클이 두 번식 호출된다.
개발 환경에서만 두 번식 호출되며 프로덕션 환경에선 정상 호출되니 안심하자.


렌더링이 잘 되었는지 확인하자. 그럼 이번엔 위쪽 버튼과 아래쪽 버튼을 번갈아 눌러보자.
어떤 메소드가 실행되는지 체크하며 마지막 자리수가 4일 때는 업데이트를 취소하는 지도 확인하자.


        7.3.3 에러 잡아내기

방금 만든 LifeCycleSample 컴포넌트의 render 함수에서 의도적으로 에러를 발생시켜보자.
render 함수에서의 에러는 주로 존재하지 않는 함수를 사용하려고 하거나, 존재하지 않는 객체의 값을 조회하려 할 때 발생한다.


LifeCycleSample의 render 함수를 다음과 같이 수정하자.


return (
    <div>
        {this.props.mssing.value}
        <h1 style={style} ref={ref => this.myRef = ref}>
            {this.state.number}
        </h1>
        <p>color: {this.state.color}</p>
        <button onClick={this.handleClick}>
            더하기
        </button>
    </div>
);


존재하지 않는 props인 mssing 객체의 value를 조회해서 렌더링해주려고 한다.
이러면 에러가 발생할 것이다.

저장 후 확인하면 에러가 발생한다.
만약 사용자가 웹 서비스 이용 중 에러가 발생하면 어리둥절할 것이다.
이럴 때는 에러가 발생했다고 인지시켜 주어야 한다.

지금부터 에러를 잡아 주는 ErrorBoundary 라는 컴포넌트를 생성해보자.
src 디렉터리에 ErrorBoundary.js 파일을 생성하여 작성하자.


import React, { Component } from 'react';

class ErrorBoundary extends Component {
    state = {
        error: false
    };

    componentDidCatch(error, info) {
        this.setState({
            error: true
        });
        console.log({ error, info });
    }

    render() {
        if(this.state.error) return <div>에러가 발생했습니다!</div>;
        return this.props.children;
    }
}

export default ErrorBoundary;


에러가 발생하면 componentDidCatch 메소드가 호출되며, 이 메소드는 this.state.error 값을 true로 업데이트 해준다.
그리고 render 함수는 this.state.error 값이 true라면 에러가 발생했음을 알려 주는 문구를 보여 준다.

이제 이 컴포넌트를 사용해 App.js 에서 LifeCycleSample 컴포넌트에 감싸주자.


import React, { Component } from 'react';
import LifeCycleSample from './LifeCycleSample';
import ErrorBoundary from './ErrorBoundary';

// 랜덤 색상을 생성
function getRandomColor() {
  return '#' + Math.floor(Math.random() * 16777215).toString(16);
}

class App extends Component {
  state = {
    color: '#000000'
  }

  handleClick = () => {
    this.setState({
      color: getRandomColor()
    });
  }

  render() {
    return (
      <div>
        <button onClick={this.handleClick}>랜덤 색상</button>
        <ErrorBoundary>
          <LifeCycleSample color={this.state.color}/>
        </ErrorBoundary>
      </div>
    );
  }
}

export default App;


이렇게 코드를 작성하고 저장하자.
여전히 조금 전처럼 붉은 에러 박스는 존재하지만 에러가 발생했다는 문구가 있다.