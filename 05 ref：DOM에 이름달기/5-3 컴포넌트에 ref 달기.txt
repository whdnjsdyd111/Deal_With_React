            5.3 컴포넌트에 ref 달기

리액트에선 컴포넌트에도 ref를 달 수 있다. 이 방법은 주로 내부의 DOM을 컴포넌트 외부에서 사용할 때 쓴다.
컴포넌트에 ref을 다는 방법은 DOM에 ref를 다는 방법과 똑같다.


        5.3.1 사용법


<MyComponent
    ref={(ref) => {this.MyComponent=ref}}
    />


이렇게 하면 MyComponent 내부의 메소드 및 멤버 변수에도 접근할 수 있다.
즉, 내부의 ref에도 접근할 수 있다.(예: MyComponent.handleClick, MyComponent.input 등).

이번에는 스크롤 박스가 있는 컴포넌트를 하나 만들고, 스크롤바를 아래로 내리는 작업을 부모 컴포넌트에서 실행해보자.

이번 실습은 다음 흐름으로 진행한다.


    ScrollBox 컴포넌트 만들기
            ↓
    컴포넌트에 ref 달기
            ↓
    ref를 이용하여 컴포넌트 내부 메소드 호출


        5.3.2 컴포넌트 초기 설정

먼저 ScrollBox 라는 컴포넌트 파일을 만들자.
JSX의 인라인 스타일링 문법으로 스크롤 박스를 만들어 최상위 DOM에 ref를 달자.


        5.3.2.1 컴포넌트 파일 생성


import React, { Component } from 'react';

class ScrollBox extends Component {
    render() {
        const style = {
            border: '1px solid black',
            height: '300px',
            width: '300px',
            overflow: 'auto',
            position: 'relative'
        };

        const innerStyle = {
            width: '100%',
            height: '650px',
            background: 'linear-gradient(white, black)'
        }

        return (
            <div
                style={style}
                ref={(ref) => this.box=ref}
                >
                <div style={innerStyle}/>
            </div>
        );
    }
}

export default ScrollBox;


        5.3.2.2 App 컴포넌트에서 스크롤 박스 컴포넌트 렌더링

기존 ValidationSample을 지우고, 방금 만든 ScrollBox 컴포넌트를 렌더링 해주자.


import React, { Component } from 'react';
import ScrollBox from './ScrollBox';

class App extends Component {
  render() {
    return (
      <ScrollBox />
    );
  }
}

export default App;


코드를 저장하고, 스크롤 박스가 잘 렌더링 됐는지 확인하자.


        5.3.3 컴포넌트에 메소드 생성

컴포넌트에 스크롤바를 맨 아래쪽으로 내리는 메소드를  만들어보자.
자바스크립트로 스크롤바를 내릴 때는 DOM 노드가 가진 다음 값들을 사용한다.


    - scrollTop : 세로 스크롤바 위치(0 ~ 350)
    - scrollHeight: 스크롤이 있는 박스 안의 div 높이(650)
    - clientHeight: 스크롤이 있는 박스 안의 높이(300)


스크롤바를 맨 아래쪽으로 내리려면 scrollHeight에서 clientHeight 높이를 빼면 된다.


import React, { Component } from 'react';

class ScrollBox extends Component {

    scrollToBottom = () => {
        const { scrollHeight, clientHeight } = this.box;
        /*
            앞 코드에는 비구조화 할당 문법을 사용했다.
            다음 코드와 같은 의미이다.
            const scrollHeight = this.box.scrollHeight;
            const clientHeight = this.box.clientHeight;
        */
        this.box.scrollTop = scrollHeight - clientHeight;
    }

    render() {...}
}

export default ScrollBox;


scrollToBottom 메소드의 첫 번째 줄에선 ES6의 비구조화 할당 문법을 사용했다.
이렇게 만든 메소드는 부모 컴포넌트인 App 컴포넌트에서 ScrollBox에 ref를 달면 사용할 수 있다.


        5.3.4 컴포넌트에 ref 달고 내부 메소드 사용

그럼 App 컴포넌트에서 ScrollBox에 ref를 달고 버튼을 만들어 누르면, 
ScrollBox 컴포넌트의 scrollToBottom 메소드를 실행하도록 코드를 작성하자.


import React, { Component } from 'react';
import ScrollBox from './ScrollBox';

class App extends Component {
  render() {
    return (
      <div>
        <ScrollBox ref={(ref) => this.ScrollBox = ref} />
        <button onClick={() => this.ScrollBox.scrollToBottom()}>맨 밑으로</button>
      </div>
    );
  }
}

export default App;


여기서 주의할 점은 문법상으론 onClick = {this.ScrollBox.scrollToBottom} 같은 형식으로 작성해도 틀린 것은 아니다.
하지만 컴포넌트가 처음 렌더링 시 this.scrollBox 값이 undefined 이므로 this.scrollBox.scrollToBottom 값을 읽어오는 과정에서
오류가 발새한다. 화살표 함수 문법을 사용해서 아예 새로운 함수를 만들고 그 내부에 this.scrollBox.scrollToBottom 메소드를 실행하면,
버튼을 누를 때(이미 한 번 렌더링해서 this.scrollBox를 설정한 시점) this.scrollBox.scrollToBottom 값을 읽어와서 실행하므로
오류가 발생하지 않는다.

이제 코드를 저장하고 브라우저에서 확인해보자.