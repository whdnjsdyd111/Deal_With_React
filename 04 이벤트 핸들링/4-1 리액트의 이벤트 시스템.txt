            4.1 리액트의 이벤트 시스템

리액트의 이벤트 시스템은 웹 브라우저의 HTML 이벤트와 인터페이스가 동일하기 때문에 사용법이 비슷하다.
3장의 작성한 버튼 코드를 다시 한 번 살펴보자.


import React, { useState } from 'react';

const Say = () => {
    const [message, setMessage] = useState('');
    const onClickEnter = () => setMessage('안녕하세요!');
    const onClickLeave = () => setMessage('안녕히 가세요!');

    const [color, setColor] = useState('black');

    return (
        <div>
            <button onClick={onClickEnter}>입장</button>
            <button onClick={onClickLeave}>퇴장</button>
            <h1 style={{ color }}>{message}</h1>
            ...


사용법은 일반 HTML에서 이벤트를 작성하는 것과 비슷한데, 주의해야 할 몇 가지 사항이 있다.


        4.1.1 이벤트를 사용할 때 주의사항


    1 이벤트 이름은 카멜표기법

    예를 들어 HTML의 onclick은 리액트에서 onClick으로 작성해야 한다.

    2 이벤트에 실행할 자바스크립트 코드를 전달하는 것이 아니라, 함수 형태의 값을 전달

    HTML에선 큰따옴표 안에 코드를 넣었지만, 리액트에선 함수 형태의 객체를 전달한다.

    3 DOM 요소에만 이벤트를 설정할 수 있다.

    즉 div, button, input 등의 DOM 요소에는 이벤트를 설정할 수 있지만, 직접 만든 컴포넌트에는 이벤트를 자체적으로
    설정할 수 없다. 예로 MyComponent에 onClick 값을 설정한다면 이를 클릭할 시
    어떤 함수를 실행하는 것이 아니라 그냥 이름이 onClick인 props를 전달할 뿐이다.

    <MyComponent onClick={doSomething}/>

    따라서 자체적으로 이벤트를 설정할 수는 없다. 하지만 전달받은 props를 컴포넌트 내부의 DOM 이벤트로 설정할 수는 있다.

    <div onClick={this.props.onClick}>
        { /* () */ }
    </div>


        4.1.2 이벤트 종류

리액트에서 지원하는 종류는 다음과 같다.

    - Clipboard     - Touch
    - Composition   - UI
    - Keyboard      - Wheel
    - Focus         - Media
    - Form          - Image
    - Mouse         - Animation
    - Selection     - Transition