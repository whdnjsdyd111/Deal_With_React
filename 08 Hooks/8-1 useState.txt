            8.1 useState

useState는 가장 기본적인 Hook이며, 함수형 컴포넌트에서도 가변적인 상태를 지닐 수 있게 해준다.
만약 함수형 컴포넌트에서 상태를 관리해야 한다면 이 Hook을 사용하면 된다.

useState 기능을 사용해서 숫자 카운터를 구현해보자.
Counter.js 를 생성하여 코드를 작성하자.


import React, { useState } from 'react';

const Counter = () => {
    const [value, setValue] = useState(0);

    return (
        <div>
            <p>
                현재 카운터 값은 <b>{value}</b>입니다.
            </p>
            <button onClick={() => setValue(value + 1)}>+1</button>
            <button onClick={() => setValue(value - 1)}>-1</button>
        </div>
    )
};

export default Counter;


useState는 코드 상단에서 import 구문을 통해 불러오고, 다음과 같이 사용한다.


const [value, setValue] = useState(0);


useState 함수의 파라미터에는 상태의 기본값을 넣어 준다.
현재 0을 넣어 주었는데, 결국 카운터의 기본값을 0으로 설정하겠다는 의미다. 이 함수가 호출되면 배열을 반환한다.
그 배열의 첫 번째 원소는 상태값, 두 번째 원소는 상태를 설정하는 함수다.
이 함수에 파라미터를 넣어서 호출하면 전달받은 파라미터로 값이 바뀌고 컴포넌트가 정상적으로 리렌더링된다.

코드를 이해하고 작성했다면, App 컴포넌트를 열어서 기존에 보여준 내용을 지우고 Counter 컴포넌트를 렌더링하자.


import React from 'react';
import Counter from './Counter';

const App = () => {
  return <Counter />;
}

export default App;


그리고 서버를 구동하여 확인해보자.

각각의 버튼 -1, +1 버튼을 눌러보자. 잘 작동될 것이다.
함수형 컴포넌트에서 상태 관리를 위해 컴포넌트 코드를 굳이 클래스 형태로 변환할 필요가 없어서 편할 것이다.


        8.1.1 useState를 여러 번 사용하기

하나의 useState 함수는 하나의 상태 값만 관리할 수 있다.
컴포넌트에서 관리해야 할 상태가 여러 개라면 useState를 여러 번 사용하면 된다.

이번엔 src 디렉터리에 Info.js 파일을 생성하여 코드를 작성하자.


import React, { useState } from 'react';

const Info = () => {
    const [name, setName] = useState('');
    const [nickname, setNickname] = useState('');

    const onChangeName = e => {
        setName(e.target.value);
    };

    const onChangeNickname = e => {
        setNickname(e.target.value);
    };

    return (
        <div>
            <div>
                <input value={name} onChange={onChangeName} />
                <input value={nickname} onChange={onChangeNickname} />
            </div>
            <div>
                <div>
                    <b>이름:</b> {name}
                </div>
                <div>
                    <b>닉네임:</b> {nickname}
                </div>
            </div>
        </div>
    );
};

export default Info;


다음으로 App 컴포넌트에서 이 컴포넌트를 렌더링하자.


import React from 'react';
import Info from './Info';

const App = () => {
  return <Info />;
}

export default App;


이제 확인해보자.

관리할 상태가 여러 개인 경우에도 useState로 편하게 관리할 수 있다.