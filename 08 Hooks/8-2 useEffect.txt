            8.2 useEffect

useEffect는 리액트 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정할 수 있는 Hook이다.
클래스형 컴포넌트의 componentDidMount와 componentDidUpdate와 합친 형태로 봐도 무방하다.

기존에 만든 Info 컴포넌트에 useEffect를 한번 적용해보자.


import React, { useState, useEffect } from 'react';

const Info = () => {
    const [name, setName] = useState('');
    const [nickname, setNickname] = useState('');
    useEffect(() => {
        console.log('렌더링이 완료되었습니다');
        console.log({
            name,
            nickname
        })
    });

    const onChangeName = e => {
        setName(e.target.value);
    };

    const onChangeNickname = e => {
        setNickname(e.target.value);
    };

    return (...);
};

export default Info;


이제 브라우저에서 개발자 도구로 내용 변경 후 콘솔창을 확인해보자.


        8.2.1 마운트될 때만 실행하고 싶을 때

useEffect에서 설정한 함수를 컴포넌트가 화면에 맨 처음 렌더링될 때만 실행하고, 업데이트될 때는 실행하지 않으려면
함수의 두 번째 파라미터로 비어 있는 배열을 넣어 주면 된다.

기존 useEffect 코드를 다음과 같이 변경해보자.


useEffect(() => {
    console.log('마운트될 때만 실행된다.')
}, []);


코드를 작성한 뒤 다시 브라우저를 열어 인풋을 수정해보자.
컴포넌트가 처음 나타날 때만 콘솔에 문구가 나오고 후에는 나오지 않는다.


        8.2.2 특정 값이 업데이트될 때만 실행하고 싶을 때

useEffect를 사용할 때, 특정 값이 변경될 때만 호출하고 싶을 경우도 있다.
클래스형 컴포넌트라면 다음과 같이 작성할 것이다.


componentDidUpdate(prevProps, prevState) {
    if(prevProps.value !== this.props.value) {
        doSomething();
    }
}


이 코드는 props 안에 들어 있는 value 값이 바뀔 때만 특정 작업을 수행한다.
이러한 작업을 useEffect에서 해야 한다면, 어떻게 할까?

바로 useEffect의 두 번째 파라미터로 전달되는 배열 안에 검사하고 싶은 값을 넣어 주면 된다.
Info 컴포넌트의 useEffect 부분을 다음과 같이 한번 수정해보자.


useEffect(() => {
    console.log(name)
}, [name]);


배열 안에는 useState를 통해 관리하고 있는 상태를 넣어 줘야 되고, props 로 전달받은 값을 넣어 줘도 된다.


        8.2.3 뒷정리 하기

useEffect는 기본적으로 렌더링되고 난 직후마다 실행되며, 두 번째 파라미터 배열에 무엇을 넣는지에 따라 실행되는 조건이 달라진다.
컴포넌트 언마운트되기 전이나 업데이트되기 직전에 어떤 작업을 수행하고 싶다면 useEffect에서 뒷정리 함수를 반환해줘야 한다.

Info 컴포넌트의 useEffect 부분을 다음과 같이 수정해보자.


useEffect(() => {
    console.log('effect');
    console.log(name);
    return () => {
        console.log('cleanup');
        console.log(name);
    }
});


이제 App 컴포넌트에서 Info 컴포넌트의 가시성을 바꿀 수 있게 해준다.
이번에도 useState를 사용하여 상태를 관리해보자.


import React, { useState } from 'react';
import Info from './Info';

const App = () => {
  const [visible, setVisible] = useState(false);
  return (
    <div>
      <button
        onClick={() => {
          setVisible(!visible);
        }}
        >
          {visible ? '숨기기' : '보이기'}
        </button>
        <hr />
        ${visible && <Info />}
    </div>
  )
}

export default App;


다 작성하였다면 보이기/숨기기 버튼을 눌러보자.
컴포넌트가 나타날 때 콘솔에 effect가 나타나고, 사라질 때 cleanup이 나타난다.
그 다음에 인풋에 이름을 적고 콘솔에 어떤 결과가 나오는지 보자.

렌더링될 때마다 뒷정리 함수가 계속 나타나는 것을 확인할 수 있다. 그리고 뒷정리 함수가 호출될 때는 업데이트되기 전에 값을 보여준다.
오직 언마운트될 때만 뒷정리 함수를 호출하고 싶다면 useEffect 함수의 두 번째 파라미터에 비어있는 배열을 넣으면 된다.


useEffect(() => {
    console.log('effect');
    console.log(name);
    return () => {
        console.log('cleanup');
        console.log(name);
    }
}, [name]);


