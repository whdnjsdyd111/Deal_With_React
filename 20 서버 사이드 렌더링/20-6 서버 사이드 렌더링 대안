            20.6 서버 사이드 렌더링의 환경 구축을 위한 대란

서버 사이드 렌더링 자체만 놓고 보면 꽤나 간단한 작업이지만 데이터 로딩, 코드 스플리팅까지 하면 번거롭다.
만약 이러한 설정을 하나하나 직접하는 것이 귀찮다고 느껴지면 다른 대안이 있다.


        20.6.1 Next.js

Next.js(https://nextjs.org)라는 리액트 프레임워크를 사용하면 이 작업을 최소한의 설정으로 간단하게 처리할 수 있다.
그 대신 몇 가지 제한이 있다. 가장 대표적인 것으로는 리액트 라우터와 호환되지 않는 점을 꼽을 수 있다.
리액트 관련 라우터 라이브러리 중에서는 리액트 라우터가 점유율이 가장 높은데 호환되지 않는 것은 꽤나 치명적인 단점이다.
호환되지 않기 때문에 이미 작성된 프로젝트에 적용하는 것은 매우 까다롭다. 그리고 리액트 라우터는 컴포넌트 기반으로 
라우트를 설정하는 반면에 Next.js 는 파일 시스템에 기반하여 라우트를 설정한다.
컴포넌트 파일의 경로와 파일 이름을 사용하여 라우트를 설정하는 것이다. 그 외에도 복잡한 작업들을 모두
Next.js가 대신해 주기 때문에 실제 작동 원리를 파악하기 힘들어질 수도 있다.
흔히 이런건 '마법'이다.

코드 스플리팅, 데이터 로딩, 서버 사이드 렌더링을 쉽게 적용하고 싶다면 Next.js를 사용하는 것을 추천한다.
하지만 Next.js의 라우팅 방식보다 리액트 라우터의 라우팅 방식을 더 좋아하거나, 기존 프로젝트에 적용해야 하거나,
혹은 작동 원리를 제대로 파악하면서 구현하고 싶다면 직접 구현해보는 것이 좋다.


        20.6.2 Razzle

Razzle(https://github.com/jaredpalmer/razzle) 또한 Next.js 처럼 서버 사이드 렌더링을 쉽게 할 수 있도록 해주는 도구이며,
프로젝트 구성이 CRA와 매우 유사하다는 장점이 있다. 그렇기 때문에 프로젝트의 구조를 우리 맘대로 설정할 수 있으며, 리액트 라우터와
호환도 잘 된다.

(2019년 4월) 현 시점에서는 코드 스플리팅 시 깜박임 현상을 해결하기 어렵다는 단점이 있다.
또한, 이 프로젝트에서 Loadable Components 를 적용하는 것이 불가능하지는 않지만,
최신 버전의 Loadable Components가 기본 설정으로는 작동하지 않아서 적용하기가 까다롭다.