            20.5 서버 사이드 렌더링과 코드 스플리팅

이제 서버 사이드 렌더링을 구현한 프로젝트에 코드 스플리팅을 도입해 볼 차례이다.
일단 리액트에서 공식적으로 제공하는 코드 스플리팅 기능인 React.lazy와 Suspanse는 서버 사이드 렌더링을 아직
지원하지 않는다. (2019년 4월 때) 서버 사이드 렌더링과 코드 스플리팅을 함께 사용할 때는 Loadable Components를
사용할 것을 권장하고 있다.

Loadable Components에서는 서버 사이드 렌더링을 할 때 필요한 서버 유틸 함수와 웹팩 플러그인, babel 플러그인을 제공해 준다.
일단 yarn 을 사용하여 Loadable Components를 설치해 본다.


$ yarn add @loadable/component @loadable/server @loadable/webpack-plugin @loadable/babel-plugin


19장에서는 @loadable/components 만 설치했는데, 이번에는 설치하는 패키지가 꽤 많다.
각각 서버 사이드 렌더링 시 중요한 역할을 하는 라이브러리이다.


        20.5.1 라우트 컴포넌트 스플리팅하기

현재 프로젝트에서 라우트를 위해 사용하고 있는 BluePage, RedPage, UserPage를 스플리팅해 주겠다.


import React from 'react';
import { Route } from "react-router-dom";
import Menu from './components/Menu';
import loadable from '@loadable/component';
const RedPage = loadable(() => import('./pages/RedPage'));
const BluePage = loadable(() => import('./pages/BluePage'));
const UsersPage = loadable(() => import('./pages/UsersPage'));

const App = () => {
  return (
    <div>
      <Menu />
      <hr />
      <Route path="/red" component={RedPage} />
      <Route path="/blue" component={BluePage} />
      <Route path="/users" component={UsersPage} />
    </div>
  );
};

export default App;


여기까지 작성한 뒤 프로젝트를 빌드하고 서버 사이드 렌더링 서버도 재시작한다.
그리고 크롬 개발자 도구에서 Network 탭에서 인터넷 속도를 Slow 3G로 선택한 후 현상을 확인해본다.

페이지가 처음에 나타났다가, 사라졌다가, 다시 나타날 것이다. 바로 깜박임 현상이다.
빠른 인터넷 환경을 이용하는 사용자는 느끼지 못하지만, 느린 인터넷 환경의 사용자에게는 불쾌한 경험일 수 있다.


        20.5.2 웹팩과 babel 플러그인 적용

Loadable Components 에서 제공하는 웹팩과 babel 플러그인을 적용하면 깜박임 현상을 해결할 수 있다.
먼저 babel 플러그인을 적용해 보겠다. package.json 을 열어서 babel을 찾은 뒤, 그 안에 다음과 같이 plugins를 설정한다.


"babel": {
  "presets": [
    "react-app"
  ],
  "plugins": [
    "@loadable/babel-plugin"
  ]
}


webpack.config.js를 열어서 상단에 LoadablePlugin을 불러오고, 하단에는 plugins를 찾아서 해당 플러그인을 적용한다.


const LoadablePlugin = require("@loadable/webpack-plugin");
...

    plugins: [
        new LoadablePlugin(),
        // Generates an `index.html` file with the <script> injected.
        new HtmlWebpackPlugin(
        ...


수정 사항을 저장한 후에 yarn build 명령어를 한 번 더 실행해 본다.
그리고 build 디렉터리에 loadable-stats.json이라는 파일이 만들어졌는지 확인한다.


{
  "errors": [],
  "version": "4.44.2",
  "hash": "8793f4fab24c78cf3a71",
  "publicPath": "/",
  "outputPath": "C:\\Users\\PC\\Documents\\Visual Studio Code\\Deal_With_React\\ssr-recipe\\build",
  "assetsByChunkName": {
    "main": [
      "static/css/main.6dea0f05.chunk.css",
      "static/js/main.20f2d1a8.chunk.js",
      "static/js/main.20f2d1a8.chunk.js.map"
    ],
    ...


이 파일은 각 컴포넌트의 코드가 어떤 청크 파일에 들어가 있는지에 대한 정보를 가지고 있다.
서버 사이드 렌더링을 할 때 이 파일을 참고하여 어떤 컴포넌트가 렌더링됐는지에 따라 어떤 파일들을 사전에 불러와야 할지
설정할 수 있다.


        20.5.3 필요한 청크 파일 경로 추출하기

서버 사이드 렌더링 후 브라우저에서 어떤 파일을 사전에 불러와야 할지 알아내고 해당 파일들의 경로를 추출하기 위해
Loadable Components에서 제공하는 ChunkExtractor와 ChunkExtractorManager를 사용한다.

서버 사이드 코드는 다음과 같이 수정해 본다.

이제 Loadable Components를 통해 파일 경로를 조회하므로 기존에 asset-manifest.json을 확인하던 코드는 지워 준다.


...
import { ChunkExtractor, ChunkExtractorManager } from "@loadable/server";

const statsFile = path.resolve('./build/loadable-stats.json');

function createPage(root, tags) {
  return `<!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="utf-8" />
            <link rel="shortcut icon" href="/favicon.ico" />
            <meta
                name="viewport"
                content="width=device-width, initial-scale=1, shrink-to-fit=no"/>
            <meta name="theme-color" content="#000000" />
            <title>React App</title>
            ${tags.styles}
            ${tags.links}
        </head>
        <body>
            <noscript>You need to enable JavaScript to run this app.</noscript>
            <div id="root">
                ${root}
            </div>
            ${tags.scripts}
        </body>
        </html>
    `;
}

const app = express();

// 서버 사이드 렌더링을 처리할 랜들러 함수이다.
const serverRender = async (req, res, next) => {
  // 이 함수는 404가 떠야 하는 상황에 404를 띄우지 않고 서버 사이드 렌더링을 해 준다.

  const context = {};
  const sagaMiddleware = createSagaMiddleware();

  const store = createStore(
    rootReducer,
    applyMiddleware(thunk, sagaMiddleware)
  );

  sagaMiddleware.run(rootSaga);

  const sagaPromise = sagaMiddleware.run(rootSaga).toPromise();

  const preloadContext = {
    done: false,
    promises: [],
  };

  const extractor = new ChunkExtractor({ statsFile });

  const jsx = (
    <ChunkExtractorManager extractor={extractor}>
      <PreloadContext.Provider value={preloadContext}>
        <Provider store={store}>
          <StaticRouter location={req.url} context={context}>
            <App />
          </StaticRouter>
        </Provider>
      </PreloadContext.Provider>
    </ChunkExtractorManager>
  );

  ReactDOMServer.renderToStaticMarkup(jsx); // renderToStaticMarkup으로 한번 렌더링한다.
  store.dispatch(END); // redux-saga의 END 액션을 발생시키면서 액션을 모니터링하는 사가들이 모두 종료
  try {
    await sagaPromise; // 기존에 진행 중이던 사가들이 모두 끝날 때까지 기다린다.
    await Promise.all(preloadContext.promises); // 모든 프로미스들을 기다린다.
  } catch (e) {
    return res.status(500);
  }
  preloadContext.done = true;
  const root = ReactDOMServer.renderToString(jsx); // 렌더링을 한 후
  // JSON을 문자열로 변환하고 악성 스크립트가 실행되는 것을 방지하기 위해 < 를 치환 처리
  // https://redux.js.org/recipes/server-rendering#security-considerations
  const stateString = JSON.stringify(store.getState()).replace(/</g, "\\u003c");
  const stateScript = `<script>__PRELOADED_STATE__ = ${stateString}</script>`; // 리덕스 초기 상태를 스크립트로 주입

  // 미리 불러와야 하는 스타일/스크립트를 추출하고
  const tags = {
    scripts: stateScript + extractor.getScriptTags(), // 스크립트 앞부분에 리덕스 상태 넣기
    links: extractor.getLinkTags(),
    styles: extractor.getStyleTags()
  };

  res.send(createPage(root, tags)); // 클라이언트에게 결과물을 응답
};

...


        20.5.4 loadableReady 와 hydrate

Loadable Components를 사용하면 성능을 최적화하기 위해 모든 자바스크립트 파일을 동시에 받아온다.
모든 스르립트가 로딩되고 나서 렌더링하도록 처리하기 위해서는 loadableReady라는 함수를 사용해 주어야 한다.
추가로 리액트에는 render 함수 대신에 사용할 수 있는 hydrate라는 함수가 있다.
이 함수는 기존에 서버 사이드 렌더링된 결과물이 이미 있을 경우 새로 렌더링하지 않고 기존에 존재하는 UI에 이벤트만 연동하여
애플리케이션을 초기 구동할 때 필요한 리소스를 최소화함으로써 성능을 최적화해 준다.
이를 적용하려면 index.js 를 다음과 같이 수정한다.


...
import { loadableReady } from "@loadable/component";

const sagaMiddleware = createSagaMiddleware();

const store = createStore(
  rootReducer,
  window.__PRELOADED_STATE__, // 이 값을 초기 상태로 사용함
  applyMiddleware(thunk, sagaMiddleware)
);

sagaMiddleware.run(rootSaga);

// 같은 내용을 쉽게 재사용할 수 있도록 렌더링할 내용을 하나의 컴포넌트로 묶음
const Root = () => {
  return (
    <Provider store={store}>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </Provider>
  )
};

const root = document.getElementById('root');

// 프로덕션 환경에서는 loadableReady와 hydrate를 사용하고
// 개발 환경에서는 기존 방식으로 처리
if(process.env.NODE_ENV === 'production') {
  loadableReady(() => {
    ReactDOM.hydrate(<Root />, root);
  });
} else {
  ReactDOM.render(<Root />, root);
}

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();