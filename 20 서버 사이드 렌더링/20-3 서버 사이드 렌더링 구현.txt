            20.3 서버 사이드 렌더링 구현하기

서버 사이드 렌더링을 구현하려면 웹팩 설정을 커스터마이징해 주어야 한다.
CRA로 만든 프로젝트에서는 웹팩 관련 설정이 기본적으로 모두 숨겨져 있으니 yarn eject 명령어를 실행하여 밖으로 꺼내주자.


$ git add .
$ git commit -m'Commit before eject'
$ yarn eject


        20.3.1 서버 사이드 렌더링용 엔트리 만들기

엔트리는 웹팩에서 프로젝트를 불러올 때 가장 먼저 불러오는 파일이다. 예를 들어 현재 작성 중인 리액트 프로젝트에서는
index.js를 엔트리 파일로 사용한다. 이 파일부터 시작하여 내부에 필요한 다른 컴포넌트와 모듈을 불러오고 있다.

서버 사이드 렌더링을 할 때는 서버를 위한 엔트리 파일을 따로 생성해야 한다.
src 디렉터리에 index.server.js 라는 파일을 생성한다.


import React from 'react';
import ReactDOMServer from 'react-dom/server';

const html = ReactDOMServer.renderToString(
    <div>Hello Server Side Rendering!</div>
);

console.log(html);


지금은 일단 가장 기본적인 코드만 작성했다. 서버에서 리액트 컴포넌트를 렌더링할 때는
ReactDOMServer의 renderToString 이라는 함수를 사용한다. 이 함수에 JSX를 넣어서 호출하면 렌더링 결과를 문자열로 반환한다.


        20.3.2 서버 사이드 렌더링용 웹팩 환경 설정 작성하기

작성한 엔트리 파일을 웹팩으로 불러와서 빌드하려면 서버 전용 환경 설정을 만들어 주어야 한다.
먼저 config 경로의 paths.js 파일을 열어서 스크롤을 맨 아래로 내린 후 module.exports 부분에 다음과 같이 두 줄을 추가해 주자.


// config after eject: we're in ./config/
module.exports = {
  ...
  ssrIndexJs: resolveApp('src/index.server.js'),  // 서버 사이드 렌더링 엔트리
  ssrBuild: resolveApp('dist'),  // 웹팩 처리 후 저장 경로
  publicUrlOrPath,
};


이 파일에 ssrIndexJs와 ssrBuild 정보를 추가했다. ssrIndexJs는 불러올 파일의 경로이고,
ssrBuild는 웹팩으로 처리한 뒤 결과물을 저장할 경로이다.
다음으로 웹팩 환경 설정 파일을 작성한다. config 디렉터리에 webpack.config.server.js 파일을 생성하자.


const paths = require('./paths');

module.exports = {
    mode: 'production', // 프로덕션 모드로 설정하여 최적화 옵션들을 활성화
    entry: paths.ssrIndexJs,    // 엔트리 경로
    target: 'node', // node 환경에서 실행될 것이라는 점을 명시
    output: {
        path: paths.ssrBuild,   // 빌드 경로
        filename: 'server.js',  // 파일 이름
        chunkFilename: 'js/[name].chunk.js',    // 청크 파일 이름
        publicPath: paths.publicUrlOrPath,      // 정적 파일이 제공될 경로
    }
};


웹팩 기본 설정을 작성했다. 빌드할 때 어떤 파일에서 시작해 파일들을 불러오는지, 또 어디에 결과물을 저장할지를 정해 줬다.

다음으로 로더를 설정한다. 웹팩의 로더는 파일을 불러올 때 확장자에 맞게 필요한 처리를 해준다.
예를 들어 자바스크립트는 babel 을 사용하여 트랜스파일링을 해주고, CSS는 모든 CSS 코드를 결합해 주고,
이미지 파일은 파일을 다른 경로에 따로 저장하고 그 파일에 대한 경로를 자바스크립트에서 참조할 수 있게 해 준다.

서버 사이드 렌더링을 할 때 CSS 혹은 이미지 파일은 그다지 중요하지 않다. 그렇다고 완전히 무시할 수는 없다.
가끔 자바스크립트 내부에서 파일에 대한 경로가 필요하거나 CSS Module 처럼 로컬 className을 참조해야 할 수도 있기 때문이다.
그래서 해당 파일을 로더에서 별도로 설정하여 처리하지만 따로 결과물에 포함되지 않도록 구현할 수도 있다.


const paths = require('./paths');
const getCSSModuleLocalIdent = require('react-dev-utils/getCSSModuleLocalIdent');   // CSS
// Module의 고유 className을 만들 때 필요한 옵션

const cssRegex = /\.css$/;
const cssModuleRegex = /\.module\.css$/;
const sassRegex = /\.(scss|sass)$/;
const sassModuleRegex = /\.module\.(scss|sass)$/;

module.exports = {
    mode: 'production', // 프로덕션 모드로 설정하여 최적화 옵션들을 활성화
    entry: paths.ssrIndexJs,    // 엔트리 경로
    target: 'node', // node 환경에서 실행될 것이라는 점을 명시
    output: {
        path: paths.ssrBuild,   // 빌드 경로
        filename: 'server.js',  // 파일 이름
        chunkFilename: 'js/[name].chunk.js',    // 청크 파일 이름
        publicPath: paths.publicUrlOrPath,      // 정적 파일이 제공될 경로
    },
    module: {
        rules: [
            {
                oneOf: [
                    // 자바스크립트를 위한 처리
                    // 기존 webpack.config.js를 참고하여 작성
                    {
                        test: /\.(js|mjs|jsx|ts|tsx)$/,
                        include: paths.appSrc,
                        loader: require.resolve('babel-loader'),
                        options: {
                            customize: require.resolve(
                                'babel-preset-react-app/webpack-overrides'
                            ),
                            plugins: [
                                [
                                    require.resolve('babel-plugin-named-asset-import'),
                                    {
                                        loaderMap: {
                                            svg: {
                                                ReactComponent: '@svgr/webpack?-svgo![path]'
                                            }
                                        }
                                    }
                                ]
                            ],
                            cacheDirectory: true,
                            cacheCompression: false,
                            compact: false
                        }
                    },
                    // CSS를 위한 처리
                    {
                        test: cssRegex,
                        exclude: cssModuleRegex,
                        // exportOnlyLocals: true 옵션을 설정해야 실제 CSS 파일을 생성하지 않음
                        loader: require.resolve('css-loader'),
                        options: {
                            onlyLocals: true
                        }
                    },
                    // CSS Module을 위한 처리
                    {
                        test: cssModuleRegex,
                        loader: require.resolve('css-loader'),
                        options: {
                            modules: true,
                            onlyLocals: true,
                            getLocalIdent: getCSSModuleLocalIdent
                        }
                    },
                    // Sass를 위한 처리
                    {
                        test: sassRegex,
                        exclude: sassModuleRegex,
                        use: [
                            {
                                loader: require.resolve('css-loader'),
                                options: {
                                    onlyLocals: true
                                }
                            },
                            require.resolve('sass-loader')
                        ]
                    },
                    // Sass + CSS Module을 위한 처리
                    {
                        test: sassRegex,
                        exclude: sassModuleRegex,
                        use: [
                            {
                                loader: require.resolve('css-loader'),
                                options: {
                                    modules: true,
                                    onlyLocals: true,
                                    getLocalIdent: getCSSModuleLocalIdent
                                }
                            },
                            require.resolve('sass-loader')
                        ]
                    },
                    // url-loader를 위한 설정
                    {
                        test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
                        loader: require.resolve('url-loader'),
                        options: {
                            emitFile: false,    // 파일을 따로 저장하지 않는 옵션
                            limit: 10000,       // 원래 9.76kb가 넘어가면 파일로 저장하는데
                            // emitFile 값이 false일 때는 경로만 준비하고 파일은 저장하지 않는다.
                            name: 'static/media/[name].[hash:8].[ext]'
                        }
                    },
                    // 위에서 설정된 확장자를 제외한 파일들은
                    // file-loader를 사용
                    {
                        loader: require.resolve('file-loader'),
                        exclude: [/\.(js|mjs|jsx|ts|tsx)$/, /\.html$/, /\.json$/],
                        options: {
                            emitFile: false,    // 파일을 따로 저장하지 않는 옵션
                            name: 'static/media/[name].[hash:8].[ext]'
                        }
                    }
                ]
            }
        ]
    }
};


이제 코드에서 node_modules 내부의 라이브러리를 불러올 수 있게 설정한다.


const paths = require('./paths');
const getCSSModuleLocalIdent = require('react-dev-utils/getCSSModuleLocalIdent');   // CSS
// Module의 고유 className을 만들 때 필요한 옵션

const cssRegex = /\.css$/;
const cssModuleRegex = /\.module\.css$/;
const sassRegex = /\.(scss|sass)$/;
const sassModuleRegex = /\.module\.(scss|sass)$/;

module.exports = {
    mode: 'production', // 프로덕션 모드로 설정하여 최적화 옵션들을 활성화
    entry: paths.ssrIndexJs,    // 엔트리 경로
    target: 'node', // node 환경에서 실행될 것이라는 점을 명시
    output: {
        path: paths.ssrBuild,   // 빌드 경로
        filename: 'server.js',  // 파일 이름
        chunkFilename: 'js/[name].chunk.js',    // 청크 파일 이름
        publicPath: paths.publicUrlOrPath,      // 정적 파일이 제공될 경로
    },
    module: {
        ...
    },
    resolve: {
        modules: ['node_modules']
    }
};


이렇게 했을 때 react, react-dom/server 같은 라이브러리를 import 구문으로 불러오면 node_modules 에서 찾아 사용한다.
라이브러리를 불러오면 빌드할 때 결과물 파일 안에 해당 라이브러리 관련 코드가 함께 번들링된다.

브라우저에서 사용할 때는 결과물 파일에 리액트 라이브러리와 우리의 애플리케이션에 관한 코드가 공존해야 하는데,
서버에서는 굳이 결과물 파일 안에 리액트 라이브러리가 들어 있지 않아도 된다.
node_modules를 통해 바로 불러와서 사용할 수 있기 때문이다.
따라서 서버를 위해 번들링할 때는 node_modules에서 불러오는 것을 제외하고 번들링하는 것이 좋다.
이를 위해 webpack-node-externals 라는 라이브러리를 사용해야 한다.
이 라이브러리를 yarn 명령어를 사용하여 설치해 준다.


$ yarn add webpack-node-externals


다음으로 이 라이브러리를 webpack.config.server.js 의 상단에 불러와서 설정에 적용한다.


const nodeExternals = require('webpack-node-externals');

...

module.exports = {
    ...
    resolve: {
        modules: ['node_modules']
    },
    externals: [nodeExternals()]
};


이제 환경 설정 파일은 거의 작성했다. 마지막으로 환경변수를 주입하겠다.


const nodeExternals = require('webpack-node-externals');
const paths = require('./paths');
const getCSSModuleLocalIdent = require('react-dev-utils/getCSSModuleLocalIdent');   // CSS
const webpack = require('webpack');
const getClientEnviroment = require('./env');
// Module의 고유 className을 만들 때 필요한 옵션


const cssRegex = /\.css$/;
const cssModuleRegex = /\.module\.css$/;
const sassRegex = /\.(scss|sass)$/;
const sassModuleRegex = /\.module\.(scss|sass)$/;

const env = getClientEnviroment(paths.publicUrlOrPath.slice(0, -1));

module.exports = {
    ...
    externals: [nodeExternals()],
    plugins: [
        new webpack.DefinePlugin(env.stringified)   // 환경변수를 주입
    ]
};


환경변수를 주입하면, 프로젝트 내에서 process.env.NODE_ENV 값을 참조하여 현재 개발 환경인지 아닌지를 알 수 있다.


        20.3.3 빌드 스크립트 작성하기

이번에는 방금 만든 환경 설정을 사용하여 웹팩으로 프로젝트를 빌드하는 스크립트를 작성해 보겠다.
scripts 경로를 열어 보면 build.js 라는 파일이 있다. 이 스크립트는 클라이언트에서 사용할 빌드 파일을 만드는 작업을 한다.
이 스크립트와 비슷한 형식으로 서버에서 사용할 빌드 파일을 만드는 build.server.js 스크립트를 작성해 보겠다.


process.env.BABEL_ENV = 'production';
process.env.NODE_ENV = 'production';

process.on('unhandledRejection', err => {
    throw err;
});

require('../config/env');
const fs = require('fs-extra');
const webpack = require('webpack');
const config = require('../config/webpack.config.server');
const paths = require('../config/paths');

function build() {
    console.log('Creating server build');
    fs.emptyDirSync(paths.ssrBuild);
    let compiler = webpack(config);
    return new Promise((resolve, reject) => {
        compiler.run((err, stats) => {
            if(err) {
                console.log(err);
                return;
            }
            console.log(stats.toString());
        });
    });
}

build();


코드를 다 작성한 뒤에는 다음 명령어를 실행하여 빌드가 잘되는지 확인해보자.


$ node scripts/build.server.js


Creating server build
Hash: be48d606761ee4f33e7d
Version: webpack 4.44.2
Time: 11178ms
Built at: 2020-12-25 2:28:58 ├F10: AM┤
    Asset      Size  Chunks             Chunk Names
server.js  1.15 KiB       0  [emitted]  main
Entrypoint main = server.js
[0] external "react" 42 bytes {0} [built]
[1] external "react-dom/server" 42 bytes {0} [built]
[2] ./src/index.server.js 214 bytes {0} [built]


성공적으로 잘 실행되었다면 이어서 다음 명령어를 실행하여 작성한 결과물이 잘 작동하는지 확인해보자.


$ node dist/server.js


<div data-reactroot="">Hello Server Side Rendering!</div>


테스트 삼아 만든 JSX가 잘 렌더링되는지 확인하자.

매번 빌드하고 실행할 때마다 파일 경로를 입력하는 것이 번거로울 수 있으니,
package.json에서 스크립트를 생성하여 더 편하게 명령어를 입력할 수 있도록 한다.


"scripts": {
    "start": "node scripts/start.js",
    "build": "node scripts/build.js",
    "test": "node scripts/test.js",
    "start:server": "node dist/server.js",
    "build:server": "node scripts/build.server.js"
},


이렇게 스크립트를 만들면 다음 명령어로 서버를 빌드하고 시작할 수 있다.


$ yarn build:server
$ yarn start:server


스크립트를 다 만들고 나서 짧아진 명령어로 다시 한 번 실행해보자.
잘 작동한다면 본격적으로 서버 사이드 렌더링을 구현할 준비가 되었다.


        20.3.4 서버 코드 작성하기

서버 사이드 렌더링을 처리할 서버를 작성해 본다. Express 라는 Node.js 웹 프레임워크를 사용하여 웹 서버를 만든다.
이 과정은 꼭 Express가 아니어도 상관없으며 Koa, Hapi 또는 connect 라이브러리를 사용하면 구현할 수 있다.
이 책에서 서버 사이드 렌더링을 할 때 Express를 사용한 이유는 해당 프레임워크가 사용률이 가장 높고,
추후 정적 파일들을 호스팅할 때도 쉽게 구현할 수 있기 때문이다.

먼저 yarn을 사용하여 Express를 설치한다.


$ yarn add express


다음으로 index.server.js 코드를 다음과 같이 작성한다.


import React from 'react';
import ReactDOMServer from 'react-dom/server';
import express from 'express';
import { StaticRouter } from "react-router-dom";
import App from './App';

const app = express();

// 서버 사이드 렌더링을 처리할 랜들러 함수이다.
const serverRender = (req, res, next) => {
    // 이 함수는 404가 떠야 하는 상황에 404를 띄우지 않고 서버 사이드 렌더링을 해 준다.

    const context = {};
    const jsx = (
        <StaticRouter location={req.url} context={context}>
            <App />
        </StaticRouter>
    );

    const root = ReactDOMServer.renderToString(jsx);    // 렌더링을 하고
    res.send(root); // 클라이언트에게 결과물을 응답
};

app.use(serverRender);

// 5000 포트로 서버를 가동
app.listen(5000, () => {
    console.log('Running on http://local:5000');
});


이 과정에서 리액트 라우터 안에 들어 있는 StaticRouter라는 컴포넌트가 사용되었다.
이 라우터 컴포넌트는 주로 서버 사이드 렌더링 용도로 사용되는 라우터이다.
props로 넣어주는 location 값에 따라 라우팅해 준다. 지금은 req.url 이라는 값을 넣어 주었는데,
여기서 req 객체는 요청에 대한 정보를 지니고 있다.

StaticRouter에 context라는 props도 넣어 주었다. 이 값을 사용하여 나중에 렌더링한 컴포넌트에 따라 HTTP 상태 코드를
설정해 줄 수 있다.
지금 당장 JS 파일과 CSS 파일을 웹 페이지에 불러오는 것은 생략하고, 리액트 서버 사이드 렌더링을 통해
만들어진 결과만 보여 주도록 처리했다. 서버를 다시 빌드라고 실행해 보자.


$ yarn build:server
$ yarn start:server

// 2020.12.25 현재 css-lodaer의 옵션에서 onlyLocals 옵션이 삭제된 것으로 보여, 해당 코드를 지우고 실행함


이제 브라우저로 http://localhost:5000/ 경로에 들어가서 화면이 보이는지 확인하자.
/red 페이지와 /blue 페이지에 들어갔을 때도 컴포넌트가 알맞게 뜨는지 확인한다.

지금은 CSS를 불러오지 않기 때문에 스타일이 적용되어 있지 않아도 괜찮다.
브라우저에서 자바스크립트도 실행되지 않기 때문에, 현재 브라우저에 나타난 정보는 모두 서버 사이드에서 렌더링된 것으로
간주할 수 있다.

만약 자바스크립트를 로딩하면 현재 브라우저에 보이는 데이터가 서버에서 렌더링된 것인지, 
클라이언트에서 렌더링된 것인지 분간하기 어려울 것이다. 서버 사이드 렌더링이 정말 제대로 이루어졌는지
확인하기 위해 개발자 도구의 Network 탭을 열고 새로고침하자.

새로고침 후 blue 항목을 누른 후 우측의 Response를 눌러보자.
컴포넌트 렌더링 결과가 문자열로 잘 전달된다.
하단의 {} 버튼도 눌러보자. 코드가 자동으로 들여쓰기되어 더욱 읽기 쉬워진다.


        20.3.5 정적 파일 제공하기

이번에는 Express에 내장되어 있는 static 미들웨어를 사용하여 서버를 통해 build 에 있는 JS, CSS 정적 파일들에
접근할 수 있도록 해 주겠다.


import React from 'react';
import ReactDOMServer from 'react-dom/server';
import express from 'express';
import { StaticRouter } from "react-router-dom";
import App from './App';
import path from 'path';

const app = express();

// 서버 사이드 렌더링을 처리할 랜들러 함수이다.
const serverRender = (req, res, next) => {
    // 이 함수는 404가 떠야 하는 상황에 404를 띄우지 않고 서버 사이드 렌더링을 해 준다.

    const context = {};
    const jsx = (
        <StaticRouter location={req.url} context={context}>
            <App />
        </StaticRouter>
    );

    const root = ReactDOMServer.renderToString(jsx);    // 렌더링을 하고
    res.send(root); // 클라이언트에게 결과물을 응답
};

const serve = express.static(path.resolve('./build'), {
    index: false    // "/" 경로에서 index.html을 보여 주지 않도록 설정
});

app.use(serve); // 순서가 중요. serverRender 전에 위치
app.use(serverRender);

// 5000 포트로 서버를 가동
app.listen(5000, () => {
    console.log('Running on http://local:5000');
});


그다음에는 JS와 CSS 파일을 불러오도록 html에 코드를 삽입해 주어야 한다.
불러와야 하는 파일 이름은 매번 빌드할 때마다 바뀌기 때문에 빌드하고 나서 만들어지는 asset-manifest.json 파일을
참고하여 불러오도록 작성한다.

한번 yarn build 명령어를 실행한 다음, build 디렉터리의 asset-manifest.json 을 열어보자.


{
  "files": {
    "main.css": "/static/css/main.dc9f71ec.chunk.css",
    "main.js": "/static/js/main.474c2d30.chunk.js",
    "main.js.map": "/static/js/main.474c2d30.chunk.js.map",
    "runtime-main.js": "/static/js/runtime-main.f7822b4c.js",
    "runtime-main.js.map": "/static/js/runtime-main.f7822b4c.js.map",
    "static/js/2.aefa7025.chunk.js": "/static/js/2.aefa7025.chunk.js",
    "static/js/2.aefa7025.chunk.js.map": "/static/js/2.aefa7025.chunk.js.map",
    "static/js/3.c1eed228.chunk.js": "/static/js/3.c1eed228.chunk.js",
    "static/js/3.c1eed228.chunk.js.map": "/static/js/3.c1eed228.chunk.js.map",
    "index.html": "/index.html",
    "static/css/main.dc9f71ec.chunk.css.map": "/static/css/main.dc9f71ec.chunk.css.map",
    "static/js/2.aefa7025.chunk.js.LICENSE.txt": "/static/js/2.aefa7025.chunk.js.LICENSE.txt"
  },
  "entrypoints": [
    "static/js/runtime-main.f7822b4c.js",
    "static/js/2.aefa7025.chunk.js",
    "static/css/main.dc9f71ec.chunk.css",
    "static/js/main.474c2d30.chunk.js"
  ]
}


main.css, main.js, runtime-main.js, static/js/2.aefa7025.chunk.js
위 파일들을 html 내부에 삽입해 주어야 한다.
서버 코드를 다음과 같이 수정한다.


import React from 'react';
import ReactDOMServer from 'react-dom/server';
import express from 'express';
import { StaticRouter } from "react-router-dom";
import App from './App';
import path from 'path';
import fs from 'fs';

// asset-mainfest.json 에서 파일 경로들을 조회한다.
const manifest = JSON.parse(
    fs.readFileSync(path.resolve('./build/asset-manifest.json'), 'utf-8')
);

const chunks = Object.keys(manifest.files)
    .filter(key => /chunk\.js$/.exec(key))  // chunk.js로 끝나는 키를 찾아서
    .map(key => `<script src="${manifest.files[key]}"></script>`)   // 스크립트 태그로 변환하고
    .join('');  // 합침

function createPage(root) {
    return `<!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="utf-8" />
            <link rel="shortcut icon" href="/favicon.ico" />
            <meta
                name="viewport"
                content="width=device-width, initial-scale=1, shrink-to-fit=no"/>
            <meta name="theme-color" content="#000000" />
            <title>React App</title>
            <link href="${manifest.files['main.css']}" rel="stylesheet" />
        </head>
        <body>
            <noscript>You need to enable JavaScript to run this app.</noscript>
            <div id="root">
                ${root}
            </div>
            <script src="${manifest.files['runtime-main.js']}"></script>
            ${chunks}
            <script src="${manifest.files['main.js']}></script>
        </body>
        </html>
    `;
}

const app = express();

// 서버 사이드 렌더링을 처리할 랜들러 함수이다.
const serverRender = (req, res, next) => {
    // 이 함수는 404가 떠야 하는 상황에 404를 띄우지 않고 서버 사이드 렌더링을 해 준다.

    const context = {};
    const jsx = (
        <StaticRouter location={req.url} context={context}>
            <App />
        </StaticRouter>
    );

    const root = ReactDOMServer.renderToString(jsx);    // 렌더링을 하고
    res.send(createPage(root)); // 클라이언트에게 결과물을 응답
};

const serve = express.static(path.resolve('./build'), {
    index: false    // "/" 경로에서 index.html을 보여 주지 않도록 설정
});

app.use(serve); // 순서가 중요. serverRender 전에 위치
app.use(serverRender);

// 5000 포트로 서버를 가동
app.listen(5000, () => {
    console.log('Running on http://local:5000');
});


이제 서버를 빌드하고 다시 시작하자.


$ yarn build:server
$ yarn start:server


http://localhost:5000/red 페이지에 들어가 CSS도 함께 적용되는지 확인하고, 개발자 도구의 Network 탭에서 서버 사이드
렌더링이 잘되었는지 검증해 보자. 여기서 링크를 눌러 이동할 때는 클라이언트 렌더링이 되어야 한다.
즉, 다른 링크를 클릭하여 다른 페이지로 이동할 때 네트워크 요청이 추가로 발생하지 않아야 한다.

서버 사이드 렌더링을 구현하면 이렇게 첫 번째 렌더링은 서버를 통해 하지만, 그 이후에는 브라우저에서 처리한다.