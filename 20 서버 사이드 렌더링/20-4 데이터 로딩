            20.4 데이터 로딩

데이터 로딩은 서버 사이드 렌더링을 구현할 때 해결하기가 매우 까다로운 문제 중 하나이다.
데이터 로딩을 한다는 것은 API 요청을 의미한다. 예를 들어 페이지에서 필요로 하는 데이터가 있다면
API를 요청해서 응답을 받아와야 한다.
일반적인 브라우저 환경에서는 API를 요청하고 응답을 받아 와서 리액트 state 혹은 리덕스 스토어에 넣으면
자동으로 리렌더링하니까 큰 걱정은 없다. 하지만 서버의 경우 문자열 형태로 렌더링하는 것이므로 state나
리덕스 스토어의 상태가 바뀐다고 해서 자동으로 리렌더링되지 않는다. 그 대신 우리가 renderToString 함수를
한 번 더 호출해 주어야 한다. 게다가 서버에서는 componentDidMount 같은 라이프사이클 API도 사용할 수 없다.

서버 사이드 렌더링 시 데이터 로딩을 해결하는 방법 또한 다양하다. 다양한 방법 중에 정말 깔끔하고 편한 방법을 소개한다.
서버 사이드 렌더링을 할 때 데이터 로딩의 원리를 공부하고, 이 책에서 사용된 코드를 원하는 대로 변형하여 사용해도 된다.

이 책에선 redux-thunk 혹은 redux-saga 미들웨어를 사용하여 API를 활용하는 환경에서 서버 사이드 렌더링을 하는 방법을 알아보겠다.


        20.4.1 redux-thunk 코드 준비하기

우선 redux-thunk 를 사용하여 API 호출 후 데이터를 가져오는 코드를 작성하겠다.
다음 명령어를 입력하여 필요한 라이브러리를 설치해 주겠다.


$ yarn add redux react-redux redux-thunk axios


액션 타입, 액션 생성 함수, 리듀서 코드를 한 파일에 넣어서 관리하는 Ducks 패턴을 사용하여 리덕스 모듈을 작성하겠다.
src 디렉터리에 modules 디렉터리를 만들고, 다음 파일을 작성해 보자.


import axios from 'axios';

const GET_USERS_PENDING = 'users/GET_USERS_PENDING';
const GET_USERS_SUCCESS = 'users/GET_USERS_SUCCESS';
const GET_USERS_FAILURE = 'users/GET_USERS_FAILURE';

const getUsersPending = () => ({ type: GET_USERS_PENDING });
const getUsersSuccess = payload => ({ type: GET_USERS_SUCCESS, payload });
const getUsersFailure = payload => ({
    type: GET_USERS_FAILURE,
    error: true,
    payload
});

export const getUsers = () => async dispatch => {
    try {
        dispatch(getUsersPending());
        const response = await axios.get(
            'https://jsonplaceholder.typicode.com/users'
        );
        dispatch(getUsersSuccess(response));
    } catch(e) {
        dispatch(getUsersFailure(e));
        throw e;
    }
};

const initialState = {
    users: null,
    user: null,
    loadig: {
        users: false,
        user: false
    },
    error: {
        users: null,
        user: null
    }
};

function users(state = initialState, action) {
    switch(action.type) {
        case GET_USERS_PENDING:
            return { ...state, loading: { ...state.loading, users: true } };
        case GET_USERS_SUCCESS:
            return {
                ...state,
                loading: { ...state.loading, users: false },
                users: action.payload.data
            };
        case GET_USERS_FAILURE:
            return {
                ...state,
                loading: { ...state.loading, users: false },
                error: { ...state.error, users: action.payload }
            };
        default:
            return state;
    }
}

export default users;


이 모듈에서는 JSONPlaceholder 에서 제공하는 다음 API를 호출하여 테스트용 데이터를 조회한다.


https://jsonplaceholder.typicode.com/users


이 API는 사용자들에 대한 정보를 응답한다.


{
    id: 1, 
    name: "Leanne Graham", 
    username: "Bret", 
    email: "Sincere@april.biz", 
    address: {
        city: "Gwenborough"
        geo: {lat: "-37.3159", lng: "81.1496"}
        street: "Kulas Light"
        suite: "Apt. 556"
        zipcode: "92998-3874"
    },
    company: {name: "Romaguera-Crona", catchPhrase: "Multi-layered client-server neural-net", bs: "harness real-time e-markets"},
    phone: "1-770-736-8031 x56442"
    username: "Bret"
    website: "hildegard.org
}


현재 작성한 모듈은 getUsers 라는 thunk 함수를 만들고, 이와 관련된 액션 GET_USERS_PENDING, GET_USERS_SUCCESS, GET_USERS_FAILURE
를 사용하여 상태 관리를 해 주고 있다.
모듈의 상태에는 loading과 error라는 객체가 들어 있다. 로딩 상태와 에러 상태를 이렇게 객체로 만든 이유는 추후
redux-saga를 사용한 서버 사이드 렌더링 방법을 연습할 때 단 하나의 사용자 정보를 가져오는 다른 API를 호출할 것이기 때문이다.
즉, 이 모듈에서 관리하는 API는 한 개 이상이므로 loadingUsers, loadingUser와 같이 각 값에 하나하나 이름을 지어 주는 대신에
loading 이라는 객체에 넣어 준 것이다.
모듈을 다 작성한 뒤에는 루트 리듀서를 만들고, Provider 컴포넌트를 사용하여 프로젝트에 리덕스를 적용하자.


import { combineReducers } from "redux";
import users from './users';

const rootReducer = combineReducers({ users });
export default rootReducer;


import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { BrowserRouter } from "react-router-dom";
import { createStore, applyMiddleware } from "redux";
import { Provider } from "react-redux";
import thunk from 'redux-thunk';
import rootReducer from './modules';

const store = createStore(rootReducer, applyMiddleware(thunk));

ReactDOM.render(
  <Provider store={store}>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </Provider>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


        20.4.2 Users, UsersContainer 컴포넌트 준비하기

이제 사용자에 대한 정보를 보여 줄 컴포넌트를 준비한다.
components 디렉터리에 Users 컴포넌트를 다음과 같이 만들어보자.


import React from 'react';
import { Link } from "react-router-dom";

const Users = ({ users }) => {
    if(!users) return null; // users가 유효하지 않다면 아무것도 보여 주지 않음
    return (
        <div>
            <ul>
                {users.map(user => (
                    <li key={user.id}>
                        <Link to={`/users/${user.id}`}>{user.username}</Link>
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default Users;


다음으로 src 디렉터리에 container 디렉터리를 만들고, 그 안에 UsersContainer 컴포넌트를 작성한다.


import React, { useEffect } from "react";
import Users from '../components/Users';
import { connect } from "react-redux";
import { getUsers } from "../modules/users";

const UsersContainer = ({ users, getUsers }) => {
    // 컴포넌트가 마운트되고 나서 호출
    useEffect(() => {
        if(users) return;   // users가 이미 유효하다면 요청하지 않음
        getUsers();
    }, [getUsers, users]);
    return <Users users={users} />;
};

export default connect(
    state => ({
        users: state.users.users
    }),
    {
        getUsers
    }
)(UsersContainer);


서버 사이드 렌더링을 할때는 이미 있는 정보를 재요청하지 않게 처리하는 작업이 중요하다.
이 작업을 하지 않으면 서버 사이드 렌더링 후 브라우저에서 페이지를 확인할 때 이미 데이터를 가지고 있음에도 불구하고 불필요한 API를 호출하게 된다.
그러면 트래픽도 낭비되고 사용자 경험도 저하된다.
컨테이너 컴포넌트를 모두 작성했으면 이 컴포넌트를 보여 줄 페이지 컴포넌트를 만들고, 라우트 설정을 해 주자.


import React from 'react';
import UsersContainer from '../containers/UsersContainer';

const UsersPage = () => {
    return <UsersContainer />;
};

export default UsersPage;


import React from 'react';
import { Route } from "react-router-dom";
import Menu from './components/Menu';
import RedPage from './pages/RedPage';
import BluePage from './pages/BluePage';
import UsersPage from './pages/UsersPage';

const App = () => {
  return (
    <div>
      <Menu />
      <hr />
      <Route path="/red" component={RedPage} />
      <Route path="/blue" component={BluePage} />
      <Route path="/users" component={UsersPage} />
    </div>
  );
};

export default App;


브라우저에서 더욱 쉽게 /users 경로로 이동할 수 있도록 Menu 컴포넌트도 수정한다.


import React from 'react';
import { Link } from "react-router-dom";

const Menu = () => {
    return (
        <ul>
            <li>
                <Link to="/red">Red</Link>
            </li>
            <li>
                <Link to="/blue">Blue</Link>
            </li>
            <li>
                <Link to="/users">Users</Link>
            </li>
        </ul>
    );
};

export default Menu;


아직 데이터 로딩에 대한 서버 사이드 렌더링 구현이 끝나지 않았지만, 리액트 개발 서버에서 방금 구현한
데이터 로딩이 잘 작동하는지 확인해 본다.

yarn start 명령어를 사용하여 개발 서버를 구동하고, 브라우저에서 5000 포트가 아닌 3000 포트로 접속한다.
그리고 Users 링크를 눌러 /users 경로로 들어가 본다.


        20.4.3 PreloadContext 만들기

현재 getUsers 함수는 UsersContainer 의 useEffect 부분에서 호출된다.
이를 클래스형으로 작성했더라면 componentDidMount에서 호출했을 것이다. 서버 사이드 렌더링을 할 때는
useEffect나 componentDidMount에서 설정한 작업이 호출되지 않는다. 렌더링하기 전에 API를 요청한 뒤
스토어에 데이터를 담아야 하는데, 서버 환경에서 이러한 작업을 하려면 클래스형 컴포넌트가 지니고 있는
constructor 메소드를 사용하거나 render 함수 자체에서 처리해야 한다. 그리고 요청이 끝날 때까지 대기했다가
다시 렌더링해 주어야 한다.

우리는 이 작업을 PreloadContext를 만들고, 이를 사용하는 Preload 컴포넌트를 만들어 처리해 보겠다.

src 디렉터리에 lib 디렉터리를 생성하고, 그 안에 PreloadContext.js 파일을 다음과 같이 생성한다.


import { createContext, useContext } from "react";

// 클라이언트 환경: null

// 서버 환경: { done: false, promise: [] }
const PreloadContext = createContext(null);
export default PreloadContext;

// resolve는 함수 타입이다.
export const Preloader = ({ resolve }) => {
    const preloadContext = useContext(PreloadContext);
    if(!preloadContext) return null;    // context 값이 유효하지 않다면 아무것도 하지 않음
    if(preloadContext.done) return null;    // 이미 작업이 끝났다면 아무것도 하지 않음

    // promises 배열에 프로미스 등록
    // 설령 resolve 함수가 프로미스를 반환하지 않더라도, 프로미스 취급을 위해
    // Promise.resolve 함수 사용
    preloadContext.promises.push(Promise.resolve(resolve()));
    return null;
};


PreloadContext는 서버 사이드 렌더링을 하는 과정에서 처리해야 할 작업들을 실행하고, 만약 기다려야 하는
프로미스가 있다면 프로미스를 수집한다. 모든 프로미스를 수집한 뒤, 수집된 프로미스들이 끝날 때까지 기다렸다가
그다음에 다시 렌더링하면 데이터가 채워진 상태로 컴포넌트들이 나타나게 된다.

Preloader 컴포넌트는 resolve 라는 함수를 props로 받아 오며, 컴포넌트가 렌더링될 때 서버 환경에서만
resolve 함수를 호출해 준다.

UsersContainer 에서 한번 사용해 보자.


import React from "react";
import Users from '../components/Users';
import { connect } from "react-redux";
import { getUsers } from "../modules/users";
import { Preloader } from "../lib/PreloadContext";

const { useEffect } = React;

const UsersContainer = ({ users, getUsers }) => {
    // 컴포넌트가 마운트되고 나서 호출
    useEffect(() => {
        if(users) return;   // users가 이미 유효하다면 요청하지 않음
        getUsers();
    }, [getUsers, users]);
    return (
        <>
            <Users users={users} />
            <Preloader resolve={getUsers} />
        </>
    );
};

export default connect(
    state => ({
        users: state.users.users
    }),
    {
        getUsers
    }
)(UsersContainer);


이렇게 코드 두 줄만 넣어 주면 된다.


        20.4.4 서버에서 리덕스 설정 및 PreloadContext 사용하기

이제 서버에서 리덕스를 설정해 주자. 서버에서 리덕스를 설정하는 것은 브라우저에서 할 때와 비교하여 큰 차이가 없다.


import React from 'react';
import ReactDOMServer from 'react-dom/server';
import express from 'express';
import { StaticRouter } from "react-router-dom";
import App from './App';
import path from 'path';
import fs from 'fs';
import { createStore, applyMiddleware } from "redux";
import { Provider } from "react-redux";
import thunk from 'redux-thunk';
import rootReducer from './modules';

...

// 서버 사이드 렌더링을 처리할 랜들러 함수이다.
const serverRender = (req, res, next) => {
    // 이 함수는 404가 떠야 하는 상황에 404를 띄우지 않고 서버 사이드 렌더링을 해 준다.

    const context = {};
    const store = createStore(rootReducer, applyMiddleware(thunk));
    const jsx = (
        <Provider store={store}>
            <StaticRouter location={req.url} context={context}>
                <App />
            </StaticRouter>
        </Provider>
    );

    const root = ReactDOMServer.renderToString(jsx);    // 렌더링을 하고
    res.send(createPage(root)); // 클라이언트에게 결과물을 응답
};

...


브라우저에서 할 때와 거의 같다. 여기서 주의할 점은 서버가 실행될 때 스토어를 한 번만 만드는 것이 아니라,
요청이 들어올 때마다 새로운 스토어를 만든다는 것이다.
이제 PreloadContext를 사용하여 프로미스들을 수집하고 기다렸다가 다시 렌더링하는 작업을 수행해 보겠다.


...
import PreloadContext from './lib/PreloadContext';

...

// 서버 사이드 렌더링을 처리할 랜들러 함수이다.
const serverRender = (req, res, next) => {
    // 이 함수는 404가 떠야 하는 상황에 404를 띄우지 않고 서버 사이드 렌더링을 해 준다.

    const context = {};
    const store = createStore(rootReducer, applyMiddleware(thunk));

    const preloadContext = {
        done: false,
        promises: []
    };

    const jsx = (
        <PreloadContext.Provider value={preloadContext}>
            <Provider store={store}>
                <StaticRouter location={req.url} context={context}>
                    <App />
                </StaticRouter>
            </Provider>
        </PreloadContext.Provider>
    );

    ReactDOMServer.renderToStaticMarkup(jsx); // renderToStaticMarkup으로 한번 렌더링한다.
    try {
        await Promise.all(preloadContext.promises); // 모든 프로미스들을 기다린다.
    } catch (e) {
        return res.status(500);
    }
    preloadContext.done = true;
    const root = ReactDOMServer.renderToString(jsx);    // 렌더링을 하고
    res.send(createPage(root)); // 클라이언트에게 결과물을 응답
};

...


첫 번째 렌더링을 할 때는 renderToString 대신 renderToStaticMarkup이라는 함수를 사용했다.
renderToStaticMarkup은 리액트를 사용하여 정적인 페이지를 만들 때 사용한다.
이 함수로 만든 리액트 렌더링 결과물은 클라이언트 쪽에서 HTML DOM 인터랙션을 지원하기 힘들다.
지금 단계에서 renderToString 대신 renderToStaticMarkup 함수를 사용한 이유는 그저 Preloader로
넣어 주었던 함수를 호출하기 위해서이다. 또 이 함수의 처리 속도가 renderToString 보다 좀 더 빠르기 때문이다.


        20.4.5 스크립트로 스토어 초기 상태 주입하기

지금까지 작성한 코드는 API를 통해 받아 온 데이터를 렌더링하지만, 렌더링하는 과정에서 만들어진 스토어의 상태를 브라우저에서
재사용하지 못하는 상황이다. 서버에서 만들어 준 상태를 브라우저에서 재사용하려면, 현재 스토어 상태를 문자열로 변환한 뒤
스크립트로 주입해 주어야 한다.


...

function createPage(root, stateScript) {
    return `<!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="utf-8" />
            <link rel="shortcut icon" href="/favicon.ico" />
            <meta
                name="viewport"
                content="width=device-width, initial-scale=1, shrink-to-fit=no"/>
            <meta name="theme-color" content="#000000" />
            <title>React App</title>
            <link href="${manifest.files['main.css']}" rel="stylesheet" />
        </head>
        <body>
            <noscript>You need to enable JavaScript to run this app.</noscript>
            <div id="root">

                ${root}
            </div>
            ${stateScript}
            <script src="${manifest.files['runtime-main.js']}"></script>
            ${chunks}
            <script src="${manifest.files['main.js']}></script>
        </body>
        </html>
    `;
}

const app = express();

// 서버 사이드 렌더링을 처리할 랜들러 함수이다.
const serverRender = async (req, res, next) => {
    // 이 함수는 404가 떠야 하는 상황에 404를 띄우지 않고 서버 사이드 렌더링을 해 준다.

    const context = {};
    const store = createStore(rootReducer, applyMiddleware(thunk));

    const preloadContext = {
        done: false,
        promises: []
    };

    const jsx = (
        <PreloadContext.Provider value={preloadContext}>
            <Provider store={store}>
                <StaticRouter location={req.url} context={context}>
                    <App />
                </StaticRouter>
            </Provider>
        </PreloadContext.Provider>
    );

    ReactDOMServer.renderToStaticMarkup(jsx); // renderToStaticMarkup으로 한번 렌더링한다.
    try {
        await Promise.all(preloadContext.promises); // 모든 프로미스들을 기다린다.
    } catch (e) {
        return res.status(500);
    }
    preloadContext.done = true;
    const root = ReactDOMServer.renderToString(jsx);    // 렌더링을 한 후
    // JSON을 문자열로 변환하고 악성 스크립트가 실행되는 것을 방지하기 위해 < 를 치환 처리
    // https://redux.js.org/recipes/server-rendering#security-considerations
    const stateString = JSON.stringify(store.getState()).replace(/</g, '\\u003c');
    const stateScript = `<script>__PRELOADED_STATE__ = ${stateString}</script>`;    // 리덕스 초기 상태를 스크립트로 주입
    res.send(createPage(root, stateScript)); // 클라이언트에게 결과물을 응답
};

...


브라우저에서 상태를 재사용할 때는 다음과 같이 스토어 생성 과정에서 window.__PRELOADED_STATE__
를 초깃값으로 사용하면 된다.


import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { BrowserRouter } from "react-router-dom";
import { createStore, applyMiddleware } from "redux";
import { Provider } from "react-redux";
import thunk from 'redux-thunk';
import rootReducer from './modules';

const store = createStore(
  rootReducer, 
  window.__PRELOADED_STATE__, // 이 값을 초기 상태로 사용함
  applyMiddleware(thunk)
);

ReactDOM.render(
  <Provider store={store}>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </Provider>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


여기까지 코드를 작성했다면 서버를 실행하여 5000 포트로 들어가보자.


$ yarn build
$ yarn build:server
$ yarn start:server

// 빌드된 자바스크립트 파일에서 require를 import로 바꿈


        20.4.6 redux-saga 코드 준비하기

이번에는 redux-saga 를 사용하는 경우 서버 사이드 렌더링을 어떻게 해야 하는지 알아본다.

yarn 으로 redux-saga를 설치한다.


$ yarn add redux-saga


users 리덕스 모듈에서 redux-saga를 사용하여 특정 사용자의 정보를 가져오는 작업을 관리해 보겠다.


import axios from "axios";
import { call, put, takeEvery } from "redux-saga/effects";

const GET_USERS_PENDING = "users/GET_USERS_PENDING";
const GET_USERS_SUCCESS = "users/GET_USERS_SUCCESS";
const GET_USERS_FAILURE = "users/GET_USERS_FAILURE";

const GET_USER = "users/GET_USER";
const GET_USER_SUCCESS = "users/GET_USER_SUCCESS";
const GET_USER_FAILURE = "users/GET_USER_FAILURE";

const getUsersPending = () => ({ type: GET_USERS_PENDING });
const getUsersSuccess = (payload) => ({ type: GET_USERS_SUCCESS, payload });
const getUsersFailure = (payload) => ({
  type: GET_USERS_FAILURE,
  error: true,
  payload,
});

export const getUser = (id) => ({ type: GET_USER, payload: id });
const getUserSuccess = (data) => ({ type: GET_USER_SUCCESS, payload: data });
const getUserFailure = (error) => ({
  type: GET_USER_FAILURE,
  payload: error,
  error: true,
});

export const getUsers = () => async (dispatch) => {
  try {
    dispatch(getUsersPending());
    const response = await axios.get(
      "https://jsonplaceholder.typicode.com/users"
    );
    dispatch(getUsersSuccess(response));
  } catch (e) {
    dispatch(getUsersFailure(e));
    throw e;
  }
};

const getUserById = (id) =>
  axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);

function* getUserSaga(action) {
  try {
    const response = yield call(getUserById, action.payload);
    yield put(getUserSuccess(response.data));
  } catch (e) {
    yield put(getUserFailure(e));
  }
}

export function* usersSaga() {
  yield takeEvery(GET_USER, getUserSaga);
}

const initialState = {
  users: null,
  user: null,
  loadig: {
    users: false,
    user: false,
  },
  error: {
    users: null,
    user: null,
  },
};

function users(state = initialState, action) {
  switch (action.type) {
    case GET_USERS_PENDING:
      return { ...state, loading: { ...state.loading, users: true } };
    case GET_USERS_SUCCESS:
      return {
        ...state,
        loading: { ...state.loading, users: false },
        users: action.payload.data,
      };
    case GET_USERS_FAILURE:
      return {
        ...state,
        loading: { ...state.loading, users: false },
        error: { ...state.error, users: action.payload },
      };
    case GET_USER:
      return {
        ...state,
        loading: { ...state.loading, user: true },
        error: { ...state.error, user: null },
      };
    case GET_USER_SUCCESS:
      return {
        ...state,
        loading: { ...state.loading, user: false },
        user: action.payload,
      };
    case GET_USER_FAILURE:
      return {
        ...state,
        loading: { ...state.loading, user: false },
        error: { ...state.error, user: action.payload },
      };
    default:
      return state;
  }
}

export default users;


모듈을 다 수정했다면 리덕스 스토어에 redux-saga 를 적용하겠다.
먼저 루트 사가를 만든다.


import { combineReducers } from "redux";
import users, { usersSaga } from './users';
import { all } from "redux-saga/effects";

export function* rootSaga() {
    yield all([usersSaga()]);
}

const rootReducer = combineReducers({ users });
export default rootReducer;


다음으로 스토어를 생성할 때 미들웨어를 적용한다.


import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { BrowserRouter } from "react-router-dom";
import { createStore, applyMiddleware } from "redux";
import { Provider } from "react-redux";
import thunk from 'redux-thunk';
import rootReducer, { rootSaga } from './modules';
import createSagaMiddleware from 'redux-saga';

const sagaMiddleware = createSagaMiddleware();

const store = createStore(
  rootReducer, 
  window.__PRELOADED_STATE__, // 이 값을 초기 상태로 사용함
  applyMiddleware(thunk, sagaMiddleware)
);

sagaMiddleware.run(rootSaga);

ReactDOM.render(
  <Provider store={store}>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </Provider>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


        20.4.7 User, UserContainer 컴포넌트 준비하기

이제 특정 사용자의 정보를 보여 줄 User 컴포넌트를 만들어 보겠다.


import React from 'react';

const User = ({ user }) => {
    const { email, name, username } = user;
    return (
        <div>
            <h1>
                {username} ({name})
            </h1>
            <p>
                <b>e-mail:</b> {email}
            </p>
        </div>
    );
};

export default User;


이전에 만들었던 Users 컴포넌트에서는 users 값이 null 인지 배열인지 확인하는 유효성 검사를 해 줬던 반면,
위 User 컴포넌트에서는 user 값이 null인지 객체인지 확인하는 유효성 검사를 해 주지 않았다.
컨테이너 컴포넌트에서 유효성 검사를 할 때는 어떻게 해야 하는지 알아보겠다.

컨테이너 컴포넌트를 다음과 같이 만들어 본다. API를 요청할 때 사용할 id 값은 props를 통해 받아 온다.
이번에는 connect 함수를 사용하지 말고, useSelector 와 useDispatch Hooks를 사용해 본다.


import React, { useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import User from "../components/User";
import { Preloader } from "../lib/PreloadContext";
import { getUser } from "../modules/users";

const UserContainer = ({ id }) => {
  const user = useSelector((state) => state.users.user);
  const dispatch = useDispatch();

  useEffect(() => {
    if (user && user.id === parseInt(id, 10)) return; // 사용자가 존재하고, id가 일치한다면 요청 안함
    dispatch(getUser(id));
  }, [dispatch, id, user]); // id가 바뀔 때 새로 요청해야 함

  // 컨테이너 유효성 검사 후 return null을 해야 하는 경우에
  // null 대신 Preloader 반환
  if (!user) {
    return <Preloader resolve={() => dispatch(getUser(id))} />;
  }
  return <User user={user} />;
};

export default UserContainer;


컨테이너에서 유효성 검사를 할 때 아직 정보가 없는 경우에는 user 값이 null을 가리키므로,
User 컴포넌트가 렌더링되지 않도록 컨테이너 컴포넌트에서 null을 반환해 주어야 한다.

하지만 이번에는 서버 사이드 렌더링을 해야 하기 때문에 null이 아닌 Preloader 컴포넌트를 렌더링하여 반환하겠다.
이렇게 해 주면 서버 사이드 렌더링을 하는 과정에서 데이터가 없을 경우 GET_USER 액션을 발생시킨다.

추가로 중복 요청을 방지하는 과정에서 user 값이 존재하는지 확인하고, id가 일치하는지도 확인했다.
id 값은 추후 URL 파라미터를 통해 받아 오기 때문에 문자열로 이루어져 있다.
반면 user 객체 안에 들어있는 id는 숫자 형태이다. 그러므로 이 두 값을 비교할 때는 props로 받아온 id 값을
parseInt를 사용하여 숫자로 변환해 준 다음에 비교해야 한다.

컨테이너 컴포넌트를 다 만들었다면 UsersPage 컴포넌트에서 렌더링해 보겠다.


import React from 'react';
import UsersContainer from '../containers/UsersContainer';
import UserContainer from '../containers/UserContainer';
import { Route } from "react-router-dom";

const UsersPage = () => {
    return (
        <>
            <UsersContainer />
            <Route
                path="/users/:id"
                render={({ match }) => <UserContainer id={match.params.id} />}
                />
        </>
    );
};

export default UsersPage;


여기서는 Route에 component 대신 render를 설정해 줌으로써 UserContainer를 렌더링할 때 URL 파라미터 id를 props로 바로 집어
넣을 수 있다. 이제 브라우저에서 /users 페이지에 있는 사용자 링크를 클릭하거나, /users/1 경로에 직접 들어가보자.


        20.4.8 redux-saga를 위한 서버 사이드 렌더링 작업

redux-thunk를 사요하면 Preloader를 통해 호출한 함수들이 Promise를 반환하지만, redux-saga를 사용하면
Promise를 반환하지 않기 때문에 추가 작업이 필요하다.
우선 서버 사이드 렌더링읋 위한 엔트리 작업 파일에 redux-saga 미들웨어를 적용한다.


...
import rootReducer, { rootSaga } from "./modules";
import createSagaMiddleware from 'redux-saga';
import PreloadContext from "./lib/PreloadContext";

...

// 서버 사이드 렌더링을 처리할 랜들러 함수이다.
const serverRender = async (req, res, next) => {
  // 이 함수는 404가 떠야 하는 상황에 404를 띄우지 않고 서버 사이드 렌더링을 해 준다.

  const context = {};
  const sagaMiddleware = createSagaMiddleware();

  const store = createStore(
    rootReducer, 
    applyMiddleware(thunk, sagaMiddleware)
  );

  sagaMiddleware.run(rootSaga);

  ...


여기까지는 스토어 생성 및 미들웨어 설정 부분이 브라우저용 엔트리 index.js에서 해 준 것과 똑같다.
여기서 코드를 몇 줄만 더 추가하면 redux-saga를 사용하는 환경에서도 서버 사이드 렌더링을 제대로 처리할 수 있다.


...
import { END } from "redux-saga";

...

// 서버 사이드 렌더링을 처리할 랜들러 함수이다.
const serverRender = async (req, res, next) => {
  // 이 함수는 404가 떠야 하는 상황에 404를 띄우지 않고 서버 사이드 렌더링을 해 준다.

  const context = {};
  const sagaMiddleware = createSagaMiddleware();

  const store = createStore(
    rootReducer,
    applyMiddleware(thunk, sagaMiddleware)
  );

  const sagaPromise = sagaMiddleware.run(rootSaga).toPromise();

  const preloadContext = {
    done: false,
    promises: [],
  };

  const jsx = (
    <PreloadContext.Provider value={preloadContext}>
      <Provider store={store}>
        <StaticRouter location={req.url} context={context}>
          <App />
        </StaticRouter>
      </Provider>
    </PreloadContext.Provider>
  );

  ReactDOMServer.renderToStaticMarkup(jsx); // renderToStaticMarkup으로 한번 렌더링한다.
  store.dispatch(END);  // redux-saga의 END 액션을 발생시키면서 액션을 모니터링하는 사가들이 모두 종료
  try {
    await sagaPromise;  // 기존에 진행 중이던 사가들이 모두 끝날 때까지 기다린다.
    await Promise.all(preloadContext.promises); // 모든 프로미스들을 기다린다.
  } catch (e) {
    return res.status(500);
  }
  ...


toPromise는 sagaMiddleware.run 을 통해 만든 Task를 Promise로 변환한다.
별도의 작업을 하지 않으면 이 Promise는 끝나지 않는다. 왜냐하면, 우리가 만든 루트 사가에서 액션을 끝없이
모니터링하기 때문이다.

그런데 redux-saga의 END라는 액션을 발생시키면 이 Promise를 끝낼 수 있다. END 액션이 발생되면 액션 모니터링 작업이
모두 종료되고, 모니터링되기 전에 시작된 getUserSaga와 같은 사가 함수들이 있다면 해당 함수들이 완료되고 나서
Promise가 끝나게 된다. 이 Promise가 끝나는 시점에 리덕스 스토어에는 우리가 원하는 데이터가 채워진다.
그 이후에 다시 렌더링하면 우리가 원하는 결과물이 나타난다.

코드를 다 작성했다면 프로젝트를 빌드하고, 서버 사이드 렌더링 서버를 다시 실행한 다음에 
http://localhost:5000/users/1 페이지에 들어가서 새로고침해 보자.


$ yarn build
$ yarn build:server
$ yarn start:server


        20.4.9 usePreload Hook 만들어서 사용하기

지금까지 만든 컨테이너 컴포넌트에서는 Preloader 컴포넌트를 사용하여 서버 사이드 렌더링을 하기 전
데이터가 필요한 상황에 API를 요청했다.
이번에는 usePreloader 라는 커스텀 Hook 함수를 만들어서 이 작업을 더욱 편하게 처리해 보겠다.


...

// Hook 형태로 사용할 수 있는 함수
export const usePreloader = resolve => {
    const preloadContext = useContext(PreloadContext);
    if(!preloadContext) return null;
    if(preloadContext.done) return null;
    preloadContext.promises.push(Promise.resolve(resolve()));
}


usePreloader 함수는 Preloader 컴포넌트와 코드가 매우 유사하다.
컴포넌트가 아닌 그냥 함수일 뿐이다. 이 Hook을 UserContainer 쪽에서 사용해 본다.


import React, { useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import User from "../components/User";
import { Preloader, usePreloader } from "../lib/PreloadContext";
import { getUser } from "../modules/users";

const UserContainer = ({ id }) => {
  const user = useSelector((state) => state.users.user);
  const dispatch = useDispatch();

  usePreloader(() => dispatch(getUser(id)));  // 서버 사이드 렌더링을 할 때 API 호출하기
  useEffect(() => {
    if (user && user.id === parseInt(id, 10)) return; // 사용자가 존재하고, id가 일치한다면 요청 안함
    dispatch(getUser(id));
  }, [dispatch, id, user]); // id가 바뀔 때 새로 요청해야 함

  if (!user) return null;
  return <User user={user} />;
};

export default UserContainer;


코드가 훨씬 간결해 졌다. 함수형 컴포넌트에서는 이렇게 usePreloader Hook을 사용하고,
클래스형 컴포넌트를 사용하는 일이 있을 때는 Preloader 컴포넌트를 사용하면 된다.
코드를 다 작성했으면 서버 사이드 렌더링 서버를 종료하고 다시 빌드하여 확인해보자.