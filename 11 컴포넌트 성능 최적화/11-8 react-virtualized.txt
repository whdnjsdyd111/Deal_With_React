            11.8 react-virtualized를 사용한 렌더링 최적화

지금까지 리액트 컴포넌트 리렌더링 성능을 최적화하는 방법을 알아보았다.
리렌더링 성능을 최적화할 때는 필요할 때만 리렌더링하도록 설정해 주었다. 
이번에는 또 다른 렌더링 성능 최적화 방법을 알아보자.
일정 관리 애플리케이션에 초기 데이터가 2500개 등록되면, 실제 화면에 나오는 항목은 9개 뿐이다.
나머지는 스크롤을 해야 볼 수 있다.

현재 컴포넌트가 맨 처음 렌더링될 때 2500개 컴포넌트 중 2419개 컴포넌트는 스크롤하기 전에는 보이지 않음에도
불구하고 렌더링이 이루어진다. 꽤 비효율적이다. 그리고 나중에 todos 배열에 변동이 생길 때도 TodoList 컴포넌트 내부의
map 함수에서 배열의 처음부터 끝까지 컴포넌트로 변환해 주는데, 이 중에서 2419개는 보이지 않으니 자원 낭비이다.

이번 절에서 배울 react-virtualized를 사용하면 리스트 컴포넌트에서 스크롤되기 전에 보이지 않는 컴포넌트는 렌더링하지 않고
크기만 차지하게끔 할 수 있다. 그리고 만약 스크롤되면 해당 스크롤 위치에서 보여 주어야 할 컴포넌트를 자연스럽게 렌더링시킨다.
이 라이브러리를 사용하면 낭비되는 자원을 아주 쉽게 아낄 수 있다.


        11.8.1 최적화 준비

우선 yarn 을 사용하여 설치해주자.


$ yarn add react-virtualized


이제 본격적으로 react-virtualized를 사용하여 최적화해 보자.
react-virtualized에서 제공하는 List 컴포넌트를 사용하여 TodoList 컴포넌트의 성능을 최적화할 것이다.

최적화 수행하려면 사전에 먼저 해야하는 작업이 있는데, 바로 각 항목의 실제 크기를 px 단위로 알아내는 것이다.
이 값은 우리가 작성한 CSS를 확인해서 직접 계산해도 되지만, 이보다 훨씬 더 편리하게 알아낼 수 있다.
크롬 개발자 도구의 좌측 상단에 있는 아이콘을 눌러서 크기를 알고 싶은 항목에 커서를 대 보자.

각 항목의 크기는 가로 512px, 세로 57px이다. 크기를 알아낼 때 두 번째 항목을 확인해야 하는데,
두 번째 항목부터 테두리가 포함되어 있기 때문이다.(첫 번째 항목은 테두리가 없어서 56px)


        11.8.2 TodoList 수정

크기를 알아냈다면 이제 TodoList 컴포넌트를 다음과 같이 수정해보자.


import React, { useCallback } from 'react';
import { List } from 'react-virtualized';
import TodoListItem from './TodoListItem';
import './TodoList.scss';

const TodoList = ({ todos, onRemove, onToggle }) => {
    const rowRenderer = useCallback(
        ({ index, key, style }) => {
            const todo = todos[index];
            return (
                <TodoListItem
                    todo={todo}
                    key={key}
                    onRemove={onRemove}
                    onToggle={onToggle}
                    style={style}
                    />
            );
        },
        [onRemove, onToggle, todos],
    );

    return (
        <List
            className="TodoList"
            width={512} // 전체 크기
            height={513}    // 전체 높이
            rowCount={todos.length} // 항목 개수
            rowRenderer={rowRenderer}   // 항목을 렌더링할 때 쓰는 함수
            list={todos}    // 배열
            style={{ outline: 'none' }} // List에 기본 적용되는 outLine 스타일 제거
            />
    );
};

export default React.memo(TodoList);


List 컴포넌트르 사용하기 위해 rowRenderer 라는 함수를 새로 작성해 주었다.
이 함수는 react-virtualized의 List 컴포넌트에서 각 TodoItem을 렌더링할 때 사용하며, 이 함수를 List 컴포넌트의
props 로 설정해 주어야 한다. 이 함수는 파라미터에 index, key, style 값을 객체 타입으로 받아 와서 사용한다.

List 컴포넌트를 사용할 때는 해당 리스트의 전체 크기와 각 항목의 높이, 각 항목을 렌더링할 때 사용해야 하는 함수,
그리고 배열을 props로 넣어 주어야 한다. 그러면 이 컴포넌트가 전달받은 props를 사용하여 자동으로 최적화해 준다.


        11.8.3 TodoListItem 수정

TodoList를 저장하고 나면 스타일이 깨져서 나타날 텐데 TodoListItem 컴포넌트를 다음과 같이 수정하면 해결된다.


import React from 'react';
import {
    MdCheckBoxOutlineBlank,
    MdCheckBox,
    MdRemoveCircleOutline,
} from 'react-icons/md';
import './TodoListItem.scss';
import cn from 'classnames';

const TodoListItem = ({ todo, onRemove, onToggle, style }) => {
    const { id, text, checked } = todo;
    
    return (
        <div className="TodoListItem-virtualized" style={style}>
            <div className="TodoListItem">
                <div className={cn('checkbox', {checked})} onClick={() => onToggle(id)}>
                    {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}
                    <div className="text">{text}</div>
                </div>
                <div className="remove" onClick={() => onRemove(id)}>
                    <MdRemoveCircleOutline />
                </div>
            </div>
        </div>
    );
};

export default React.memo(
    TodoListItem,
    (prevProps, nextProps) => prevProps.todo === nextProps.todo,
);


render 함수에서 기존에 보여 주던 내용을 div로 한 번 감싸고, 해당 div 에는 TodoListItem-virtualized라는 className을
설정하고, props로 받아온 style을 적용시켜 주었다.
여기서 TodoListItem-virtualized 라는 클래스를 만든 것은 컴포넌트 사이사이에 테두리를 제대로 쳐 주고,
홀수 번째/짝수 번째 항목에 다른 배경 색상을 설정하기 위해서이다.
그 다음에는 TodoListItem의 스타일 파일에서 최하단에 있던 & + & 를 사용하여 .TodoListItem 사이사이에 테두리를 설정했던
코드와 &:nth-child(even)을 사용하여 다른 배경 색상을 주는 코드를 지우고, 코드 최상단에 다음 코드를 삽입한다.


.TodoListItem-virtualized {
  & + & {
    border-top: 1px solid #dee2e6;
  }
  &:nth-child(even) {
    background: #f8f9fa;
  }
}


작업이 모두 끝났으니 성능을 측정해보자. 이전에는 0.059초까지 줄였는데 이번엔 0.005초까지 줄었을 것이다.