            11.5 onToggle, onRemove 함수가 바뀌지 않게 하기

React.memo를 사용하는 것만으로 컴포넌트 최적화가 끝나진 않았다. 현재 프로젝트에서는 todos 배열이 업데이트되면
onRemove와 onToggle 함수도 새롭게 바뀌기 때문이다. onRemove와 onToggle 함수는 배열 상태를 업데이트하는 과정에서
최신 상태의 todos를 참조하기 때문에 toods 배열이 바뀔 때마다 함수가 새로 만들어진다.
이렇게 함수가 계속 만들어지는 상황을 방지하는 방법은 두 가지이다. 첫 번째 방법은 useState의 함수형 업데이트 기능을 사용하는 것이고,
두 번째 방법은 useReducer를 사용하는 것이다.


        11.5.1 useState의 함수형 업데이트

기존에 setTodos 함수를 사용할 때는 새로운 상태를 파라미터로 넣어 주었다.
setTodos를 사용할 때 새로운 상태를 파라미터로 넣는 대신, 상태 업데이트를 어떻게 할지 정의해 주는 업데이트 함수를
넣을 수도 있다. 이를 함수형 업데이트라고 부른다.

예시를 한번 보자.


const [number, setNumber] = useStateI(0);
// prevNumbers는 현재 number 값을 가리킨다.
const onIncrese = useCallback(
    () => setNumber(prevNumber => prevNumber + 1),
    [],
);


setNumber(number + 1)을 하는 것이 아니라, 위 코드처럼 어떻게 업데이트할지 정의해 주는 업데이트 함수를 넣어준다.
그러면 useCallback 을 사용할 때 두 번째 파라미터로 넣는 배열에 number를 넣지 않아도 된다.
그럼 이제 onToggle, onRemove 함수에서 useState의 함수형 업데이트를 사용해보자.
이 과정에서 onInsert 함수도 함께 수정한다.


import React, { useState, useRef, useCallback } from 'react';
import TodoTemplate from './components/TodoTemplate';
import TodoInsert from './components/TodoInsert';
import TodoList from './components/TodoList';

function createBulkTodos() {
  const array = [];
  for(let i = 1; i <= 2500; i++) {
    array.push({
      id: i,
      text: `할 일 ${i}`,
      checked: false,
    })
  }
  return array;
}

const App = () => {
  const [todos, setTodos] = useState(createBulkTodos);

  // 고유값으로 사용될 id
  // ref를 사용하여 변수 담기
  const nextId = useRef(2501);

  const onInsert = useCallback(
    text => {
      const todo = {
        id: nextId.current,
        text,
        checked: false,
      };
      setTodos(todos => todos.concat(todo));
      nextId.current += 1;  // nextId 1씩 더하기
    },
    [],
  );

  const onRemove = useCallback(
    id => {
      setTodos(todos => todos.filter(todo => todo.id !== id));
    },
    [],
  );

  const onToggle = useCallback(
    id => {
      setTodos(todos =>
        todos.map(todo =>
          todo.id === id ? { ...todo, checked: !todo.checked } : todo,
        ),
      );
    },
    [],
  );

  return (
    <TodoTemplate>
      <TodoInsert onInsert={onInsert} />
      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle}/>
    </TodoTemplate>
  );
};

export default App;



setTodos를 사용할 때 그 안에 todos => 만 넣어 주면 된다. 정말 간단하다.
이제 코드를 저장하고, 조금 전 했던 것과 똑같이 크롬 개발자 도구의 Performance 탭에서 성능을 확인하자.


    노트 개발 환경에서의 성능

현재 yarn start 를 통해 개발 서버를 구동하고 있는데, 개발 서버를 통해 보이는 리액트 애플리케이션은
실제 프로덕션에서 구동될 때보다 처리 속도가 느리다. 실제 프로덕션 모드에서는 에러 시스템 및 Timings이 
비활성화되어 처리 속도가 훨씬 더 빠르다. 지금은 소규모 프로젝트이기 때문에 프로덕션 모드일 때와
개발 모드일 때의 차이가 그렇게 크지 않지만, 프로젝트의 규모가 커질수록 차이가 커진다.

프로덕션 모드로 구동해보고 싶다면 프로젝트 디렉터리에서 다음 명령을 입력한다.


$ yarn build
$ yarn global add serve
$ serve -s build


        11.5.2 useReducer 사용하기

useState의 함수형 업데이트를 사용하는 대신, useReducer를 사용해도 onToggle과 onRemove가 계속
새로워지는 문제를 해결할 수 있다.
코드를 다음과 같이 고쳐보자.


import React, { useReducer, useRef, useCallback } from 'react';
import TodoTemplate from './components/TodoTemplate';
import TodoInsert from './components/TodoInsert';
import TodoList from './components/TodoList';

function createBulkTodos() {
  const array = [];
  for(let i = 1; i <= 2500; i++) {
    array.push({
      id: i,
      text: `할 일 ${i}`,
      checked: false,
    })
  }
  return array;
}

function todoReducer(todos, action) {
  switch(action.type) {
    case 'INSERT':  // 새로 추가
      // { type: 'INSERT', todo: { id: 1, text: 'todo', checked: false } }
      return todos.concat(action.todo);
      case 'REMOVE':  // 제거
      // { type: 'REMOVE , id: 1 }
      return todos.filter(todo => todo.id !== action.id);
      case 'TOGGLE': // 토글
      // { type: 'REMOVE', id: 1 }
      return todos.map(todo =>
        todo.id === action.id ? { ...todo, checked: !todo.checked } : todo,
        );
      defualt:
        return todos;
  }
}

const App = () => {
  const [todos, dispatch] = useReducer(todoReducer, undefined, createBulkTodos);

  // 고유값으로 사용될 id
  // ref를 사용하여 변수 담기
  const nextId = useRef(2501);

  const onInsert = useCallback(
    text => {
      const todo = {
        id: nextId.current,
        text,
        checked: false,
      };
      dispatch({ type: 'INSERT', todo });
      nextId.current += 1;  // nextId 1씩 더하기
    },
    [],
  );

  const onRemove = useCallback(
    id => {
      dispatch({ type: 'REMOVE', id });
    },
    [],
  );

  const onToggle = useCallback(
    id => {
      dispatch({ type: 'TOGGLE', id });
    },
    [],
  );

  return (
    <TodoTemplate>
      <TodoInsert onInsert={onInsert} />
      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle}/>
    </TodoTemplate>
  );
};

export default App;


useReducer를 사용할 때는 원래 두 번째 파라미터에 초기 상태를 넣어 줘야 한다.
지금은 그 대신 두 번째 파라미터에 undefined를 넣고, 세 번째 파라미터에 초기 상태를 만들어 주는 함수인
createBulkTodos를 넣었는데, 이렇게 하면 컴포넌트가 맨 처음 렌더링될 때만 createBulkTodos 함수가 호출된다.

useReducer를 사용하는 방법은 기존 코드를 많이 고쳐야 한다는 단점이 있지만, 상태를 업데이트하는 로직을 모아서
컴포넌트 바깥에 둘 수 있다는 장점이 있다. 성능상으로는 두 방법이 비슷하기 때문에 어떤 선택을 할지는 취향이다.