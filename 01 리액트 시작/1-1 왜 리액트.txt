            1.1 왜 리액트인가?

자바스크립트가 세계적으로 열광받고 있다. 브라우저에 간단한 연산 및 시각 효과를 주며 나아가 서버, 모바일 등에도 활약한다.
자바스크립트로 여러 프레임워크들이 등장하며 큰 규모의 프로젝트를 만들 수 있게 된다.
이 프레임워크들은 주로 MVC 아키텍처, MVVM(Model View - View Model) 아키텍처로 애플리케이션을 구조화한다.

MVC, MVVM 등 여러 구조가 공통적으로 모델과 뷰가 있고, 모델은 데이터를 관리. 뷰는 사용자에게 보여는 부분이다.
프로그램이 사용자에게서 어떤 작업을 받아 컨트롤러는 모델 데이터를 조회하거나 수정하고, 변경된 사항을 뷰에 반영한다.

반영된 과정을 보통 뷰를 변형한다. JSON 객체 값을 사용하는 뷰가 있다고 치자.


{
    "title" : "Hello"
    "likes" : 1
}

<div>
    <div class="title">Hello</div>
    <div class="likes">1</div>
</div>


likes를 2로 바꾸면 애플리케이션에 likes 요소를 찾아 내부 수정을 해야 한다.
지금은 간단하지만 애플리케이션 규모가 크고 복잡하며 관리하지 않으면 성능도 떨어진다.

페이스북 개발 팀은 이를 해결하기 위해 어떤 데이터가 변할 때마다 변화에 대한 고민을 안하고 기존 뷰를 날리고 처음부터
새로 렌더링하는 방식이다. 이러면 애플리케이션 구조가 매우 간단하고, 코드양도 준다.
어떤 변화를 줄지 신경 안쓰고, 뷰를 선언만 하며, 데이터 변화에 대한 기존의 것은 버리고 정해진 규칙에 따라 새로 렌더링만 하면 된다.

하지만 이 방식은 CPU 점유율도 크게 증가할 것이다. DOM은 대체로 느리고 메모리도 많이 사용할 것이니까.
그리고 사용자가 인풋 박스에 텍스트를 입력할 때 기존 렌더링이 사라지고 새로 렌더링하면 끊김 현상이 발생할 것이다.

페이스북 개발팀이 이런 방식을 최대한 성능을 아끼고 편안한 사용자 경험을 제공하며 구현하고자 개발한것이
리액트이다.


        1.1.1 리액트 이해

리액트는 자바스크립트 라이브러리며 사용자 인터페이스를 만드는데 사용한다.
구조가 MVC, MVW 등 프레임워크와 달리 오직 V(View) 에만 신경 쓰는 라이브러리다.

리액트 프로젝트에서 특정 부분이 어떻게 생길지 정하는 선언체가 있는데, 이를 컴포넌트라고 한다.
일반적인 템플릿은 데이터셋이 주어지면 HTML 태그 형식을 문자열로 반환하는데, 이와 달리 더 복잡한 개념이다.
컴포넌트는 재사용이 가능한 API로 수많은 기능들을 내장하고 있고, 컴포넌트 하나에서 생김새와 작동 방식을 정의한다.

사용자 화면에 뷰를 보여주는 것을 렌더링이라고 하는데, 리액트에서는 데이터가 변할 때마다 새로운 렌더링을 하면서
성능을 아끼며 최적의 사용자 경험을 제공하는데 이 방법을 알려면 컴포넌트가 최초로 실행한 '초기 렌더링' 과
데이터 변경으로 다시 실행되는 '리렌더링' 개념을 이해해야 한다.


        1.1.1.1 초기 렌더링

어떤 UI 관련 프레임워크, 라이브러리 간에 처음 어떻게 보일지를 정하는 초기 렌더링이 필요하다.
리액트에선 이를 다루는 render 함수가 있다.


render() {...}

이 함수는 컴포넌트가 어떻게 생겼는지 정의하는 역할을 한다.
이 함수는 html 형식 문자열을 반환하지 않고, 뷰가 어떻게 생겼는지와 동작 방법에 대한 정보를 지닌 객체를 반환한다.
컴포넌트 내부에 다른 컴포넌트 들이 들어갈 수 있고 이때 render 함수를 실행하면 그 내부 컴포넌트들도 재귀적으로 렌더링한다.
최상위 컴포넌트의 렌더링 작업이 끝나면 지니고 있는 정보들을 사용하여 HTML 마크업을 만들고, 이를 실제 페이지의 DOM 요소 안에 주입한다.

컴포넌트를 렌더링할 때는 분리된 두 가지 절차가 있다.
먼저 문자열 형태의 HTML 코드를 생성한 후 특정 DOM에 해당 내용을 주입하면 이벤트가 적용된다.


        1.1.1.2 조화 과정

리액트 라이브러리에서 중요한 부분인 업데이트를 알아보자.
사실 업데이트라기 보단 "조화 과정을 거친다" 라는 것이 더 정확하다.
데이터 변화가 일어나면 변화에 따라 뷰가 변형되는 것처럼 보이지만, 사실 새로운 요소로 갈아끼우기 때문이다.
이 작업 또한 render 함수가 맡으며 업데이터하면 새 데이터를 가지고 render 함수를 호출하여 새 데이터를 지닌 뷰를 생성하는 식이다.

하지만 이때 render 함수가 반환하는 결과를 바로 DOM에 반영하지 않고, 
이전 render 함수가 만든 컴포넌트 정보와 현재 render 함수가 만든 컴포넌트 정보를 비교한다.
자바스크립트로 두 가지 뷰를 최소한 연산으로 비교 후, 차이를 알아내 최소한의 연산으로 DOM 트리를 업데이트하는 것이다.

결국 방식 자체는 루트 노드부터 시작하여 전체 컴포넌트를 처음부터 다시 렌더링하는 것처럼 보이지만,
사실 최적의 자원을 사용하여 수행한다.