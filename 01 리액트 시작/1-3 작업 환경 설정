            1.3 작업 환경 설정

이제 리액트를 본격적으로 공부하자.
사전 준비 작업을 하고 프로젝트를 만들어보자.


        1.3.1 Node.js 와 npm

리액트 프로젝트를 만들 때는 Node.js 를 반드시 먼저 설치해야 한다.
Node.js 는 크롬 V8 자바 스크립트 엔진으로 빌드한 자바스크립트 런타임이다.
이것으로 웹 브라우저 환경이 아닌 곳에서도 자바스크립트를 사용하여 연산할 수 있다.

리액트 애플리케이션은 웹 브라우저에서 실행되는 코드이므로 Node.js 와 직접적인 연관은 없지만,
프로젝트를 개발하는 데 필요한 주요 도구들이 Node.js를 사용하기 때문에 설치한다.
이때 사용하는 개발도구에는 ECMAScript 를 호환시켜주는 바벨, 모듈화된 코드를 한 파일로 합치코(번들링)
코드를 수정할 때마다 웹 브라우저를 리로딩하는 등의 여러 기능을 지닌 웹팩 등이 있다.
책 후반부에선 Node.js 를 사용하여 백엔드 서버를 구현한다.

Node.js 를 설치하면 Node.js 패키지 매니저 도구인 npm이 설치된다.
npm으로 수많은 개발자가 만든 패키지를 설치하고 설치한 패키지의 버전을 관리할 수 있다.


        1.3.1.1 설치

노드 설치 후 터미널(또는 명령 프롬프트) 창을 열고, 다음 명령어로 제대로 설치됐는지 확인하자.


$ node -v
v 버전...


        1.3.2 yarn

Node.js 를 설치할 때, 패키지를 관리해 주는 npm 대신 yarn 이라는 패키지 관리자 도구를 사용해보자.
yarn은 npm을 대체할 수 있는 도구로 npm 보다 빠르며 효율적인 캐시 시스템과 기타 부가 기능을 제공합니다.
npm에 익숙하고 변화가 싫다면 npm을 사용해도 무방하다.


        1.3.2.1 설치

yarn 내려받기 페이지에서 다운로드를 하자.


        1.3.2.2 설치 확인

터미널을 열고 다음 명령어를 입력하여 yarn을 제대로 설치했는지 확인하자.


$ yarn --version
버전


        1.3.3 에디터 설치

리액트 애플리케이션을 만들며 코드를 수정할 때 에디터를 사용하자.
모든 운영체제에서 지원하는 VS Code 를 사용하자.


        1.3.3.1 VC Code 확장 프로그램 설치

유용한 확장 프로그램을 소개한다.


    1   ESLint : 자바스크립트 문법 및 코드 스타일을 검사해주는 도구
    2   Readctjs Code Snippets : 리액트 컴포넌트 및 라이프사이클 함수를 작성할 때 단축 단어를 사용하여
            간편하게 코드를 자동으로 생성해 낼 수 있는 코드 스니펫 모음
    3   Prettier-Code formatter : 코드 스타일을 자동으로 정리해 주는 도구


        1.3.3.2 VS Code 언어 한국어로 설정

이 책은 편의상 VS Code 언어를 한국어로 사용한다.
먼저 VS Code 마켓플레이스에서 Korean Language Pack for Visual Code 를 설치한다.


        1.3.4 Git 설치

Git은 형상 관리 도구로 프로젝트 버전을 관리하고 협업을 할 때 매우 핵심적인 역할을 한다.
Git을 사용하여 앞으로 책에섣 다룰 예제 코드를 직접 clone 해서 참조한다.


        1.3.5 create-react-app 으로 프로젝트 생성하기

create-react-app 은 리액트 프로젝트를 생성할 때 필요한 웹팩, 바벨의 설치 및 설정 과정을 생략하고
바로 간편히 프로젝트 작업 환경을 구축해주는 도구이다. 나중에 설정을 커스터마이징해야 하면
자유롭게 설정을 변경할 수도 있다.

이 도구를 사용하는 방법은 매우 간단하다. 터미널을 열고, 프로젝트를 만들고 싶은 디렉터리에서 다음 명령을 실행한다.


$ yarn create react-app hello-react


리액트 프로젝트를 만들 때는 이렇게 yarn create react-app <프로젝트 이름> 명령어를 사용한다.
프로젝트 이름은 자유롭다.

프로젝트 생성이 완료되었다면 다음 명령어를 입력하여 프로젝트 디렉터리로 이동한 뒤 리액트 개발 전용 서버를 구동해보자.


$ cd hello-react
$ yarn start


이렇게 명령어를 입력하고 나면 터미널은 서버 포트 등에 대한 결과가 나온다.


ompiled successfully!

You can now view hello-react in the browser.

  Local:            http://localhost:3000
  On Your Network:  http://192.168.74.1:3000

Note that the development build is not optimized.
To create a production build, use yarn build.


그리고 브라우저에서 자동으로 리액트 페이지가 띄워질 것이다.
만약 페이지가 자동으로 열리지 않는다면 직접 열어보자.