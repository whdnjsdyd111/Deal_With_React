            1.2 리액트 특징

        1.2.1 Virtual DOM

리액트의 주요 특징 중 하나는 Virtual DOM을 사용하는 것이다.


        1.2.1.1 DOM 이란?

Virtual DOM을 알아보기 전, 먼저 DOM이 무엇인지 간단히 알아보자.
DOM은 Document Object Model 의 약어다. 즉, 객체로 문서 구조를 표현하는 방법으로 XML이나 HTML로 작성한다.

웹 브라우저는 DOM 으로 객체에 자바스크립트와 CSS를 적용한다.
DOM은 트리 형태라서 특정 노드를 찾거나 수정하거나 제거하거나 원하는 곳에 삽입할 수 있다.

    DOM 은 느릴까?

요즘 DOM API를 수많은 플랫폼과 웹 브라우저에 사용하는데, 이 DOM 에는 치명적인 한 가지 문제점이 있다.
바로 동적 UI에 최적화되어 있지 않다는 것이다. HTML은 자체적으로는 정적이다. 자바스크립트로 이를 동적으로 만들 수 있다.

하지만 요즘 큰 규모 프로젝트에선 스크롤바를 내릴수록 수많은 데이터가 로딩된다. 그리고 각 데이터를 표현하는 요소들이 들어있다.
(예: 페이스북) 이렇게 DOM에 직접 접근하여 변화를 주면 성능 이슈가 조금 발생하기 시작한다. 즉, 느려진다.
근데 정확하게는 틀렸으며, DOM 자체는 빠르다. 단, DOM에 변화가 일어나면 CSS를 다시 연산하고, 레이아웃을 구성하고,  페이지를 리페인트 한다.
이 과정에서 시간이 허비되는 것이다.

    해결법

HTML 마크업을 시각적 형태로 변환한 것은 웹 브라우저 주 역할이라 컴퓨터 자원을 사용하는 것은 어쩔 수 없다.
DOM 조작할 때마다 엔진이 페이지를 새로 그려서 업데이트가 잦으면 성능 저하가 된다.
이를 해결하기 위해 DOM을 최소한으로 조작하여 작업을 처리하는 방식으로 개선할 수 있다.
리액트는 Virtual DOM 방식으로 DOM 업데이트를 추상화하여 DOM 처리 횟수를 최소화하고 효율적으로 진행한다.


        1.2.1.2 Virtual DOM

Virtual DOM을 사용하면 실제 DOM에 접근하여 조작하는 대신, 이를 추상화한 자바스크립트 객체를 구성하여 사용한다.
마치 실제 DOM의 가벼운 사본과 비슷하다.

리액트에서 데이터가 변하여 웹에 실제 DOM을 업데이트할 때는 다음 절차를 밟는다.


    1   데이터를 업데이트하면 전체 UI를 Virtual DOM에 리렌더링한다.
    2   이전 Virtual DOM에 있던 내용과 현재 내용을 비교한다.
    3   바뀐 부분만 실제 DOM에 적용한다.


    오해

Virtual DOM을 사용한다고 해서 사용하지 않을 때와 비교해면 무조건 빠른 것은 아니다.
리액트 메뉴얼에는 다음과 같은 문장이 있다.

        지속적으로 데이터가 변화하는 대규모 애플리케이션 구축하기

결국에는 적절한 곳에 사용해야 리액트가 지닌 진가를 비로소 발휘할 수 있다.
리액트를 사용하지 않아도 코드 최적화를 열심히 하면 DOM 작업이 느려지는 문제를 개선할 수 있고, 또 작업이 매우 간단할 때는
오히려 리액트를 사용하지 않는 편이 더 나은 성능을 보이기도 한다.

리액트와 Virtual DOM이 언제나 제공할 수 있는 것은 업데이트 처리 간결성이다.
UI를 업데이트하는 과정에서 생기는 복잡함을 모두 해소하고, 더욱 쉽게 업데이트에 접근할 수 있다.


        1.2.2 기타 특징

일부 웹 프레임워크가 MVC 또는 MVW 등의 구조를 지향하는 것과 달리 리액트는 오직 뷰만 담당한다.
다시 강조하자면 리액트는 프레임워크가 아닌 라이브러리다.
다른 웹 프레임워크가 Ajax, 데이터 모델링, 라우팅 등과 같은 기능을 내장하고 있는 반면, 리액트는 정말 뷰만 신경쓰는
라이브러리이므로 기타 기능은 직접 구현하여 사용해야 한다.

또 리액트는 다른 웹 프레임워크나 라이브러리와 혼용할 수 있다. 예로 Backbone.js, AngularJS 등과 함께 할 수 있다.