            3.4 state

리액트에서 state 컴포넌트 내부에서 바뀔수 있는 값을 의미한다.
props는 컴포넌트가 사용되는 과정에서 부모 컴포넌트가 설정하는 겂이며,
컴포넌트 자신은 해당 props를 읽기 전용으로만 사용할 수 있다.
props를 바꾸려면 부모 컴포넌트에서 바꿔줘야 한다. 예로 현재 상황에서는 App 컴포넌트에서
MyComponent를 사용할 때 props를 바꿔줘야 값이 변경될 수 있는 것이다.

리액트에는 두 가지 종류의 state가 있다.
하나는 클래스 컴포넌트가 지니고 있는 state 이고, 
다른 하나는 함수형 컴포넌트에서 useState 라는 함수를 통해 사용하는 state이다.


        3.4.1 클래스형 컴포넌트의 state

새로운 컴포넌트를 만들자.
Counter.js 파일을 src 디렉터리에 생성하자.


import React, { Component } from 'react';

class Counter extends Component {
    constructor(props) {
        super(props);
        // state 초깃값 설정
        this.state = {
            number: 0
        };
    }

    render() {
        const { number } = this.state;  // state를 조회할 때는 this.state로 조회
        return (
            <div>
                <h1>{number}</h1>
                <button
                    // onClick을 통해 버튼이 클릭되었을 때 호출할 함수를 지정
                    onClick={() => {
                        // this.setState를 사용하여 state에 새로운 값을 넣을 수 있다.
                        this.setState({ number: number + 1 })
                    }}>
                        +1
                </button>
            </div>
        );
    }
}

export default Counter;


위 파일에서 각 코드가 어떤 역할을 하는지 보자.
컴포넌트에 state를 설정할 때는 다음처럼 constructor 메소드를 작성하여 설정한다.


constructor(props) {
    super(props);
        // state 초깃값 설정
        this.state = {
            number: 0
    };
}


이는 컴포넌트의 생성자 메소드다. 클래스형 컴포넌트에서 constructor를 작성할 때는 반드시
super(props)를 호출해 주어야 한다. 이 함수가 호출되면 현재 클래스형 컴포넌트가 상속받고 있는
리액트의 Component 클래스가 지닌 생성자 함수를 호출해준다.

그 다음에는 this.state 값에 초깃값을 설정해주었다. 컴포넌트의 state는 객체 형식이어야 한다.
이제 render 함수를 확인해보자.


render() {
    const { number } = this.state;  // state를 조회할 때는 this.state로 조회
    return (
        <div>
            <h1>{number}</h1>
            <button
                // onClick을 통해 버튼이 클릭되었을 때 호출할 함수를 지정
                onClick={() => {
                    // this.setState를 사용하여 state에 새로운 값을 넣을 수 있다.
                    this.setState({ number: number + 1 })
                }}>
                    +1
            </button>
        </div>
    );
}


render 함수에서 현재 state를 조회할 때 this.state를 조회하면 된다. 그리고 button 안에 onClick이라는 값을
props로 넣어 주었는데, 이는 버튼이 클릭될 때 호출시킬 함수를 설정할 수 있게 해준다.
이를 이벤트를 설정한다고 하는데, 리액트의 이벤트 시스템은 4장에서 더 자세히 볼 것이다.

이벤트로 설정할 함수를 넣어 줄 때는 화살표 함수 문법을 사용하여 넣어 주어야 한다.
함수 내부에서는 this.setState라는 함수를 하용했는데, 이 함수가 state 값을 바꿀 수 있게 해준다.

코드를 다 작성했다면 Counter 컴포넌트를 App 에서 불러와 렌더링 해보자.
기존 MyComponent는 이제 필요없으니 없애도 된다.


import React from 'react';
import Counter from './Counter';

const App = () => {
  return <Counter />;
};

export default App;


브라우저를 확인하여 버튼을 클릭하면 1씩 올라가는지 확인하자.


        3.4.1.1 state 객체 안에 여러 값이 있을 때

state 객체 안에는 여러 값이 있을 수 있다.
Counter 컴포넌트를 다음과 같이 수정해보자.


import React, { Component } from 'react';

class Counter extends Component {
    constructor(props) {
        super(props);
        // state 초깃값 설정
        this.state = {
            number: 0,
            fixedNumber: 0
        };
    }

    render() {
        const { number, fixedNumber } = this.state;  // state를 조회할 때는 this.state로 조회
        return (
            <div>
                <h1>{number}</h1>
                <h2>바뀌지 않는 값: {fixedNumber}</h2>
                <button
                    // onClick을 통해 버튼이 클릭되었을 때 호출할 함수를 지정
                    onClick={() => {
                        // this.setState를 사용하여 state에 새로운 값을 넣을 수 있다.
                        this.setState({ number: number + 1 })
                    }}>
                        +1
                </button>
            </div>
        );
    }
}

export default Counter;


현재 state 안에 fixedNumber 라는 또 다른 값을 추가해주었다. 버튼이 클릭될 때 fixedNumber 값은 그대로 두고
number 값만 바꿀건데, 그렇다고 this.state 함수를 사용해서 인자로 전달되는 객체 내부에 fixedNumber를 넣어 주진 않는다.
this.setState 함수는 인자로 전달된 객체 안에 들어 있는 값만 바꾼다.
코드를 저장하고 브라우저를 열면 위의 숫자만 바뀔 것이다.


        3.4.1.2 state를 constructor에서 꺼내기

앞에서 state의 초깃값을 지정하기 위해 constructor 메소드를 선언했는데, 또 다른 방식으로도 state 초깃값을 지정할 수 있다.
코드를 다음과 같이 수정해보자.


import React, { Component } from 'react';

class Counter extends Component {
    state = {
        number: 0,
        fixedNumber: 0
    };
    render() {
        const { number, fixedNumber } = this.state;  // state를 조회할 때는 this.state로 조회
        return (...);
    }
}

export default Counter;


이렇게 하면 constructor 메소드를 선언하지 않고도 state 초기값을 설정할 수 있다.
이 책에서는 앞으로 state를 사용할 때 이 방식으로 state 초깃값을 설정할 것이다.


        3.4.1.3 this.setState에 객체 대신 함수 인자 전달하기

this.setState를 사용하여 state 값을 업데이트할 때는 상태가 비동기적으로 업데이트된다.
만약 다음과 같이 onClick에 설정한 함수 내부에서 this.setState를 두 번 호출하면 어떻게 될까?


onClick={() => {
    // this.setState를 사용하여 state에 새로운 값을 넣을 수 있다.
    this.setState({ number: number + 1 });
    this.setState({ number: this.state.number + 1 })
}}


코드를 위와 같이 작성하면 this.setState를 두 번 사용하는 것임에도 불구하고 버튼을 클릭할 때 숫자가 1씩 더 해진다.
this.setState를 사용한다고 해서 state 값이 바로 바뀌지는 않기 때문이다.

이에 대한 해결책은 this.setState를 사용할 때 객체 대신에 함수를 인자로 넣어 주는 것이다.
this.setState의 인자로 함수를 넣어 줄 때는 코드를 다음과 같은 형식으로 작성한다.


this.setState((prevState, props) => {
    return {
        // 업데이트하고 싶은 내용
    }
})


여기서 prevState는 기존 상태이고, props는 현재 지니고 있는 props를 가리킨다.
만약 업데이트하는 과정에서 props가 필요하지 않다면 생략해도 됩니다.

기존 코드를 다음과 같이 작성해보자.


<button
    // onClick을 통해 버튼이 클릭되었을 때 호출할 함수를 지정
    onClick={() => {
        this.setState(prevState => {
            return {
                number: prevState.number + 1
            };
        });
        // 위 코드와 아래 코드는 완전히 똑같은 기능을 한다.
        // 아래 코드는 함수에서 바로 객체를 반환한다는 의미다.
        this.setState(prevState => ({
            number: prevState.number + 1
        }));
    }}>
        +1
</button>


화살표 함수에서 값을 바로 반환하고 싶다면 코드 블록  { }  를 생략하면 된다. 예를 들어, 파라미터 a 와 b를 받아 와서 
합을 구해주는 함수를 작성하고 싶다면 다음과 같이 작성할 수 있다.


const sum = (a, b) => a + b;


onClick 에서 두 번째 this.setState 함수를 사용할 때는 화살표 함수에서 바로 객체를 반환하도록 했기 때문에
prevState => ({ }) 와 같은 형태로 코드가 이루어진다.


        3.4.1.4 this.setState가 끝난 후 특정 작업 실행하기

setState를 사용하여 값을 업데이트하고 난 다음에 특정 작업을 하고 싶을 때는 setState의 두 번째 파라미터로 콜백 함수를 등록하여
작업을 처리할 수 있다.
onClick 함수를 다음과 같이 수정해보자.


<button
    // onClick을 통해 버튼이 클릭되었을 때 호출할 함수를 지정
    onClick={() => {
        this.setState({
            number: number + 1
        }, () => {
            console.log('방금 setState가 호출되었습니다.')
        });
    }}>
        +1
</button>


이렇게 콜백 함수를 등록한 뒤 브라우저를 열어서 버튼을 누르고 Console 탭을 확인해보자.


        3.4.2 함수형 컴포넌트에서 useState

리액트 16.8 이전 버전에서는 함수형 컴포넌트에서 state를 사용할 수 없었습니다. 하지만 16.8 이후부터는 useState라는 함수를
사용하여 함수형 컴포넌트에서도 state를 사용할 수 있게 되었다. 사용법은 조금 다르다.
이 과정에서 Hooks 라는 것을 사용하게 되는데, Hooks의 종류는 다양하지만, 이 장에서는 useState만 배워 보고 나머지는 8장에서 하자.

        3.4.2.1 배열 비구조화

Hooks를 사용하기 전에 배열 비구조화 할당이라는 것을 알아보자.
배열 비구조화 할당은 이전에 배운 객체 비구조화 할당과 비슷하다. 즉, 배열 안에 들어 있는 값을 쉽게 추출할 수 있도록 해주는 문법이다.
다음 코드를 확인해보자.


const array = [1, 2];
const one = array[0];
const two = array[1];


array 안에 있는 값을 one과 two에 담아 주는 코드인데, 위 코드는 배열 비구조화 할당을 사용하면 다음과 같이 표현할 수 있다.


const array = [1, 2];
const [one, two] = array;


        3.4.2.2 useState 사용하기

배열 비구조화 할당 문법을 알고 나면 useState 사용 방법을 쉽게 이해할 수 있다.
새 컴포넌트를 만들어서 useState를 사용해보자. src 디렉터리에 Say.js 라는 파일을 생성하고 다음 코드를 작성해보자.


import React, { useState } from 'react';

const Say = () => {
    const [message, setMessage] = useState('');
    const onClickEnter = () => setMessage('안녕하세요!');
    const onClickLeave = () => setMessage('안녕히 가세요!');

    return (
        <div>
            <button onClick={onClickEnter}>입장</button>
            <button onClick={onClickLeave}>퇴장</button>
            <h1>{message}</h1>
        </div>
    );
};

export default Say;


useState 함수의 인자에는 상태의 초깃값을 넣어 준다. 클래스형 컴포넌트에서의 state 초깃값은 객체 형태를 넣어줘야 하는데,
useState 에서는 반드시 객체가 아니어도 상관없다. 값의 형태는 자유이다.
숫자일 수도, 문자열일 수도, 객체일 수도, 배열일 수도있다. 함수를 호출하면 배열이 반환되는데,
배열의 첫 번째 원소는 현재 상태이고, 두 번째 원소는 상태를 바꿔 주는 함수다.
이 함수를 세터 함수라고 부른다. 그리고 배열 비구조화 할당을 통해 이름을 자유롭게 정해 줄 수 있다.
현재 message 와 setMessage 라고 이름을 설정했는데, text와 setText라고 이름을 바꿔도 상관없다.

한번 Say 컴포넌트를 App에서 렌더링해 보고 입장과 퇴장 버튼을 눌러 보자.


import React from 'react';
import Say from './Say';

const App = () => {
  return <Say />;
};

export default App;


        3.4.2.3 한 컴포넌트에서 useState 여러 번 사용하기

useState는 한 컴포넌트에서 여러 번 사용해도 상관없다. 또 다른 상태를 useState로 한번 관리해보자.


import React, { useState } from 'react';

const Say = () => {
    const [message, setMessage] = useState('');
    const onClickEnter = () => setMessage('안녕하세요!');
    const onClickLeave = () => setMessage('안녕히 가세요!');

    const [color, setColor] = useState('black');

    return (
        <div>
            <button onClick={onClickEnter}>입장</button>
            <button onClick={onClickLeave}>퇴장</button>
            <h1 style={{ color }}>{message}</h1>
            <button style={{ color: 'red' }} onClick={() => setColor('red')}>
                빨간색
            </button>
            <button style={{ color: 'green' }} onClick={() => setColor('green')}>
                초록색
            </button>
            <button style={{ color: 'blue' }} onClick={() => setColor('blue')}>
                파란색
            </button>
        </div>
    );
};

export default Say;


코드를 저장하고 입장 버튼을 눌러 텍스트를 확인해보자.
그리고 색상 버튼을 눌러 색상이 바뀌는 것을 확인하자.