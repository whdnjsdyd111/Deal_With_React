            3.6 정리

이 장에서는 컴포넌트를 만들어서 내보내고 불러오는 방법과 props 및 state를 사용하는 방법을 배웠다.
props와 state는 둘 다 컴포넌트에서 사용하거나 렌더링할 데이터를 담고 있으므로 비슷해 보일 수 있지만,
그 역할은 매우 다르다.
props는 부모 컴포넌트가 설정하고, state는 컴포넌트 자체적으로 지닌 값으로 컴포넌트 내부에서 값을 업데이트 한다.

props를 사용한다고 해서 값이 무조건 고정적이지는 않다. 부모 컴포넌트의 state를 자식 컴포넌트의 props로 전달하고,
자식 컴포넌트에서 특정 이벤트가 발생할 때는 부모 컴포넌트의 메소드를 호출하면 props도 유동적으로 사용할 수 있다.
이후 만들어볼 애플리케이션에서 이런 구조로 설계하면 된다.


    ┌──────────────────────────────┐
    │   부모 컴포넌트               │
    │           ┌─────────────────┐│
    │           │   컴포넌트       ││
    │   state ──────> props props ││
    │           │                 ││
    │           └─────────────────┘│
    └──────────────────────────────┘


이 장에서는 state를 다루기 위해 클래스형 컴포넌트의 state와 함수형 컴포넌트의 useState에 대해 배웠다.
앞으로 새로운 컴포넌트를 만들 때는 useState를 사용하는 것을 권장한다.
코드가 더 간결해지고 리액트 개발 팀이 함수형 컴포넌트와 Hooks를 사용하는 것이 
주 컴포넌트 개발 방식이 될 것이라 공지했기 때문이다.

단, 이 책의 초반부는 클래스 컴포넌트 사용법을 위해 state도 사용할 것이다.