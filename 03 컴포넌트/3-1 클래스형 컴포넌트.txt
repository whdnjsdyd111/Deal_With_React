            3.1 클래스형 컴포넌트

컴포넌트 선언에는 두 가지 방식이 있다.
하나는 함수형 컴포넌트, 다른 하나는 클래스형 컴포넌트다.
클래스형 컴포넌트로 App.js 코드를 수정해보자.


import React, { Component } from 'react';

class App extends Component {
  return () {
    const name = 'react';
    return <div className="react">{name}</div>
  }
}

export default App;


클래스형 컴포넌트로 바뀌었지만 역할은 이전의 함수형 컴포넌트와 똑같다.
차이점은 클래스형 컴포넌트의 경우 이후에 배울 state 기능 및 라이프사이클 기능을 사용할 수 있다는 것과
임의 메소드를 정의할 수 있다는 것이다.

클래스형 컴포넌트에서는 render 함수가 꼭 있어야 하고, 그 안에서 JSX를 반환해야 한다.

컴포넌트를 선언할 수 있는 두 가지 방법 중 어떤 것을 사용해야 할까?

함수형 컴포넌트의 장점을 나열해보자.
우선 클래스형 컴포넌트보다 선언하기 편하다.
메모리 자원도 클래스형 컴포넌트보다 덜 사용한다.
프로젝트를 완성하여 빌드한 후 배포할 때도 함수형 컴포넌트를 사용하는 것이 결과물의 파일의 크기가 더 적다.
(두 컴포넌트의 성능과 파일 크기면에선 사실상 별 차이가 없어 중요하게 여기지 않아도 된다)

함수형 컴포넌트의 단점은 state와 라이프사이클 API의 사용이 불가능하다는 점이다.
이 단점은 리액트 v16.8 업데이트 이후 Hooks 라는 기능이 도입되면서 해결되었다.
완전히 클래스형 컴포넌트와 똑같이 사용할 수 있는 것은 아니지만 조금 다른 방식으로 비슷한 작업을 할 수 있게 되었다.
이번 장에서 Hooks에 대한 내용은 맛보기로만 조금 배우고, 8장에서 자세히 다루자.

리액트 공식 매뉴얼에서는 컴포넌트를 새로 작성할 때 함수형 컴포넌트와 Hooks를 사용하도록 권장하고 있다.
하지만 그렇다고 클래스형 컴포넌트가 사라지는 것이 아니므로 알아 두어야 한다.

이 책의 경우 리액트 기본을 익히며, 함수형 컴포넌트와 Hooks 기반 컴포넌트를 작성한다.