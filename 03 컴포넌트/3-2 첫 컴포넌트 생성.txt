            3.2 첫 컴포넌트 생성

        3.2.1 src 디렉터리에 MyComponent.js 파일 생성

컴포넌트를 만들려면 컴포넌트 코드를 선언해야 한다. 컴포넌트 코드를 선언할 파일을 만들어보자.


        3.2.2 코드 작성하기

MyComponent.js 파일을 열고 새 컴포넌트의 코드를 작성해보자.
먼저 함수형 컴포넌트로 작성하고, 나중에 클래스형 컴포넌트로도 작성해보자.


import React from 'react';

const MyComponent = () => {
    return <div>나의 새롭고 멋진 컴포넌트</div>
};

export default MyComponent;


이번에 작성한 코드는 이전 App 컴포넌트와 조금 다르다.
함수를 작성할 때 function 키워드를 사용하는 대신에  () => {}  를 사용하여 함수를 만들어주었다.
이는 ES6 에 도입된 화살표 함수 문법이다.

    노트 ES6 화살표 함수

화살표 함수는 ES6 문법에서 함수를 표현하는 새로운 방식이다.
그렇다고 기존 function을 이용한 함수 선언 방식을 아예 대체하진 않는다.
사실 용도가 조금 다르다. 이 문법은 주로 함수 파라미터로 전달할 때 유용하다.


setTimeout(function() {
    console.log('hello world');
}, 1000);

setTimeout(() => {
    console.log('hello world');
}, 1000);


이 문법이 기존 function을 대체할 수 없는 것은 용도가 다르기 때문이다.
무엇보다 서로 가리키고 있는 this 값이 다르다.


function BlackDog() {
    this.name = '흰둥이';
    return {
        name: '검둥이',
        bark: function() {
            console.log(this.name + ': 멍멍!');
        }
    }
}

const blackDog = new BlackDog();
blackDog.bark();    // 검둥이: 멍멍!


function WhiteDog() {
    this.name = '흰둥이';
    return {
        name: '검둥이',
        bark: () => {
            console.log(this.name + ': 멍멍!');
        }
    }
}

const whiteDog = new WhiteDog();
whiteDog.bark();    // 흰둥이: 멍멍!


function()을 사용했을 때는 검둥이, () => 사용했을 때는 흰둥이가 뜬다.
일반 함수는 자신이 종속된 객체를 this로 가리키며, 화살표 함수는 자신이 종속된 인스턴스를 가리킨다.
화살표 함수는 값을 연산하여 바로 반환해야 할 때 사용하면 가독성을 높일 수 있다.


function twice(value) {
    return value * 2;
}

const triple = (value) => value * 3;


이렇게 따로  {}  를 열어주지 않으면 연산 값을 그대로 반환한다는 의미이다.


함수형 컴포넌트를 선언할 때 function 키워드를 사용하는 것과 화살표 함수 문법을 사용하는 것 간에는 큰 차이가 없다.
화살표 함수가 더 간결하기 때문에 이 책에선 화살표 함수 문법으로 방식을 사용한다.


    노트 Reactjs Code Snippet 을 사용하여 코드를 생성

VS Code 에서 Reactjs Code Snippet 를 설치했다면 컴포넌트 코드를 간편하고 빠르게 생성할 수 있다.
에디터에서 src를 입력하고 Enter 를 눌러보자.

코드를 생성하고 나면 컴포넌트 이름이 선택된 상태로 나타나는데, 여기서 수정하면 컴포넌트 이름을 변경할 수 있고
Tab 을 누르면 선택을 해제할 수 있다.


        3.2.3 모듈 내보내기 및 불러오기

        3.2.3.1 모듈 내보내기(export)

방금 작성한 컴포넌트에서 맨 아래 코드를 확인해보자.


export default MyComponent;


이 코드는 다른 파일에서 이 파일을 import할 때, 위에서 선언한 MyComponent 클래스를 불러오도록 설정한다.


        3.2.3.2 모듈 불러오기(import)

이번에는 App 컴포넌트에서 MyComponent 컴포넌트를 불러와서 사용해보자.
기존에 App 컴포넌트에 있던 코드를 모두 지우고 다음과 같이 작성해보자.


import React from 'react';
import MyComponent from './MyComponent';

const App = () => {
  return <MyComponent />;
};

export default App;


위 코드에서 import 구문을 사용하는 두 번째 줄은 우리가 만든 MyComponent 컴포넌트를 불러온다.
코드를 작성하고 브라우저에서 다음과 같이 렌더링되었는지 확인해보자.