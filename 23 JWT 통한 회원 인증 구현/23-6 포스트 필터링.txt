            23.6 username/tags 로 포스트 필터링하기

이번에는 특정 사용자가 작성한 포스트만 조회하거나 특정 태그가 있는 포스트만 조회하는 기능을 만들어 보겠다.
먼저 조금 전에 새로 만든 계정으로 포스트를 작성한다. GET /api/posts 에 요청을 해서 두 명의 사용자가 쓴 포스트가 있는지
확인한 다음, 포스트 목록 조회 API를 다음과 같이 수정한다.


export const list = async (ctx) => {
    // query는 문자열이기 때문에 숫자로 변환해 주어야 한다.
    // 값이 주어지지 않았다면 1을 기본으로 사용한다.
    const page = parseInt(ctx.query.page || '1', 10);

    if (page < 1) {
        ctx.status = 400;
        return;
    }

    const { tag, username } = ctx.query;
    // tag, username 값이 유효하면 객체 안에 넣고, 그렇지 않으면 넣지 않음
    const query = {
        ...(username ? { 'user.username': username } : {}),
        ...(tag ? { tags: tag }: {}),
    };

    try {
        const posts = await Post.find(query)
            .sort({ _id: -1 })
            .limit(10)
            .skip((page - 1) * 10)
            .lean()
            .exec();
        const postCount = await Post.countDocuments(query).exec();
        ctx.set('Last-Page', Math.ceil(postCount / 10));
        ctx.body = posts.map((post) => ({
            ...post,
            body:
                post.body.length < 200
                    ? post.body
                    : `${post.body.slice(0, 200)}...`,
        }));
    } catch (e) {
        ctx.throw(500, e);
    }
};


위 코드에서 query 를 선언하는 방법이 조금 생소하다.


const query = {
    ...(username ? { 'user.username': username } : {}),
    ...(tag ? { tags: tag }: {}),
};


이 코드는 username 혹은 tag 값이 유효할 때만 객체 안에 해당 값을 넣겠다는 것을 의미한다.
다음과 같은 형식으로 query 객체를 만들면 어떨까?


{
    username,
    tags: tag
}


이런 객체를 query로 사용한다면 요청을 받을 때 username 이나 tag 값이 주어지지 않는다.
이 경우에는 undefined 값이 들어가게 된다. mongoose는 특정 필드가 undefined인 데이터를 찾게되고,
결국 데이터를 조회할 수 없게 된다.

코드를 다 작성했다면 다음과 같이 username, tag 쿼리 파라미터를 URL에 포함시켜서 요청해보자.


GET http://localhost:4000/api/posts?username=velopert
GET http://localhost:4000/api/posts?tag=태그