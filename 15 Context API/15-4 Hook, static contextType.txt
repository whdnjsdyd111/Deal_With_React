            15.4 Consumer 대신 Hook 또는 static contextType 사용하기

이번에는 Context에 있는 값을 사용할 때 Consumer 대신 다른 방식을 사용하여 값을 받아 오는 방법을 알아보자.


        15.4.1 useContext Hook 사용하기

리액트에 내장되어 있는 Hooks 중에서 useContext라는 Hook을 사용하면, 함수형 컴포넌트에서 Context를 쉽게 사용할 수 있다.
ColorBox 컴포넌트의 코드를 다음과 같이 수정해보자.


import React, { useContext } from 'react';
import ColorContext from "../contexts/color";

const ColorBox = () => {
    const { state } = useContext(ColorContext);
    return (
        <>
            <div
                style={{
                    width: '64px',
                    height: '64px',
                    background: state.color
                }}
                />
            <div
                style={{
                    width: '32px',
                    height: '32px',
                    background: state.subcolor
                }}
                />
        </>
    );
};

export default ColorBox;


이전보다 훨씬 간결해졌다. 만약 children에 함수를 전달하는 Render Props 패턴이 불편하다면,
useContext Hook을 사용하여 훨씬 편하게 Context 값을 조회할 수 있다.
그러나 Hook 은 함수형 컴포넌트에서만 사용할 수 있다는 점에 주의하자.
클래스형 컴포넌트에서는 Hook을 사용할 수 없다.


        15.4.2 static contextType 사용하기

클래스형 컴포넌트에서 Context를 좀 더 쉽게 사용하고 싶다면 static contextType을 정의하는 방법이 있다.
SelectColors 컴포넌트를 다음과 같이 클래스형으로 변환해 보자. 그리고 Consumer 쪽 코드는 일단 제거한다.


import React, { Component } from 'react';

const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];

class SelectColors extends Component {
    render() {
        return (
            <div>
                <h2>색상을 선택하세요.</h2>
                <div style={{ display: 'flex' }}>
                    {colors.map(color => (
                        <div
                            key={color}
                            style={{ 
                                background: color, 
                                width: '24px', 
                                height: '24px', 
                                cursor: 'pointer' 
                            }}
                            />
                    ))}
                </div>
                <hr />
            </div>
        );
    }
}

export default SelectColors;


그리고 클래스 상단에 static contextType 값을 지정해 준다.


import React, { Component } from 'react';
import ColorContext from '../contexts/color';

const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];

class SelectColors extends Component {
    static contextType = ColorContext;
    render() {...}
}

export default SelectColors;


이렇게 해 주면 this.context를 조회했을 때 현재 Context의 value를 가리키게 된다.
만약 setColor를 호출하고 싶다면 this.context.actions.setColor 를 호출하면 된다.
컴포넌트를 다음과 같이 완성해보자.


import React, { Component } from 'react';
import ColorContext from '../contexts/color';

const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];

class SelectColors extends Component {
    static contextType = ColorContext;

    handleSetColor = color => {
        this.context.actions.setColor(color);
    };

    handleSetSubcolor = subcolor => {
        this.context.actions.setSubcolor(subcolor);
    };

    render() {
        return (
            <div>
                <h2>색상을 선택하세요.</h2>
                <div style={{ display: 'flex' }}>
                    {colors.map(color => (
                        <div
                            key={color}
                            style={{ 
                                background: color, 
                                width: '24px', 
                                height: '24px', 
                                cursor: 'pointer' 
                            }}
                            onClick={() => this.handleSetColor(color)}
                            onContextMenu={e => {
                                e.preventDefault();
                                this.handleSetSubcolor(color);
                            }}
                            />
                    ))}
                </div>
                <hr />
            </div>
        );
    }
}

export default SelectColors;


static contextType을 정의하면 클래스 메소드에서도 Context에 넣어 둔 함수를 호출할 수 있다는 장점이 있다.
단점이라면, 한 클래스에서 하나의 Context 밖에 사용하지 못한다는 것이다.
그리고 앞으로 새로운 컴포넌트를 작성할 때 클래스형으로 작성하는 일은 많지 않기 때문에 useContext를 사용하는 쪽을 권한다.
