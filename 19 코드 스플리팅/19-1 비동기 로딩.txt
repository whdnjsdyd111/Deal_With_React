            19.1 자바스크립트 함수 비동기 로딩

컴포넌트 코드를 스플리팅하기에 앞서 일반 자바스크립트 함수를 스플리팅해 보겠다.
src 디렉터리에 notify.js 파일을 생성하여 다음 함수를 작성해보자.


export default function notify() {
    alert('안녕하세요');
}


Hello React! 문구를 누르면 notify 함수가 실행되도록 App 컴포넌트를 수정한다.


import React from 'react';
import logo from './logo.svg';
import './App.css';
import notify from './notify';

function App() {
  const onClick = () => {
    notify();
  };
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p onClick={onClick}>Hello React!</p>
      </header>
    </div>
  );
}

export default App;


이렇게 코드를 작성하고 빌드하면 notify 코드가 main 파일 안에 들어가게 된다.
하지만 다음과 같이 import 를 상단에 하지 않고 import() 함수 형태로 메소드 안에서 사용하면,
파일을 따로 분리시켜서 저장한다. 그리고 실제 함수가 필요한 지점에 파일을 불러와서 함수를 사용할 수 잇따.

코드를 다음과 같이 작성해보자.


import React from 'react';
import logo from './logo.svg';
import './App.css';

function App() {
  const onClick = () => {
    import('./notify').then(result => result.default());
  };
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p onClick={onClick}>Hello React!</p>
      </header>
    </div>
  );
}

export default App;


import 함수를 사용하면 Promise를 반환한다. 이렇게 import를 함수로 사용하는 문법은 비록 아직 표준 자바스크립트가 아니지만,
stage-3 단계에 있는 dynamic import 라는 문법이다. 현재는 웹팩에서 지원하고 있으므로 별도의 설정 없이 프로젝트에 바로 사용할 수 있다.
이 함수를 통해 모듈을 불러올 때 모듈에서 default로 내보낸 것은 result.default 를 참조해야 사용할 수 있다.

브라우저를 열고 개발자 도구의 Network 탭을 연 다음, Hello React! 를 클릭해보자.

Hello React!를 클릭하는 시점에 새로운 자바스크립트 파일을 불러올 것이다.
불러온 파일의 내용을 확인해 보면 notify 에 관련된 코드만 들어있다.

이제 yarn build를 입력하여 빌드해보자.


yarn run v1.22.5
$ react-scripts build
Creating an optimized production build...
Compiled successfully.

File sizes after gzip:

  41.21 KB          build\static\js\2.edf4c4c8.chunk.js
  1.4 KB            build\static\js\4.f693a4d4.chunk.js
  1.19 KB (+15 B)   build\static\js\runtime-main.2c1829f4.js
  539 B (+31 B)     build\static\js\main.01a931b2.chunk.js
  531 B             build\static\css\main.8c8b27cf.chunk.css
  222 B (-1.18 KB)  build\static\js\3.536eb768.chunk.js


이제 3으로 시작하는 파일 안에 notify 관련 코드가 들어간다.
