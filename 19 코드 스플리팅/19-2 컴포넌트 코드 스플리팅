            19.2 React.lazy와 Suspense를 통한 컴포넌트 코드 스플리팅

코드 스플리팅을 위해 리액트에 내장된 기능으로 유틸 함수인 React.lazy와 컴포넌트인 Suspense가 있다.
이 기능은 리액트 16.6 버전부터 도입되었다. 이전 버전에서는 import 함수를 통해 불러온 다음,
컴포넌트 자체를 state에 넣는 방식으로 구현해야 한다.


        19.2.1 state를 사용한 코드 스플리팅

React.lazy 를 사용하기에 앞서, React.lazy 없이 컴포넌트의 코드를 스플리팅한다면 어떻게 하는지 알아보자.
먼저 코드 스플리팅을 할 간단한 컴포넌트를 만들자.


import React from 'react';

const SplitMe = () => {
    return <div>SplitMe</div>;
}

export default SplitMe;


App 컴포넌트를 클래스형 컴포넌트로 전환하자. 그리고 handleClick 메소드를 만들고, 그 내부에 SplitMe 컴포넌트를 불러와
state에 넣는다. 또한, render 함수에서는 state 안에 있는 SplitMe가 유효하다면 SplitMe 컴포넌트를 렌더링해 주어야 한다.


import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';

class App extends Component {
  state = {
    SplitMe: null
  }
  handleClick = async () => {
    const loadedModule = await import('./SplitMe');
    this.setState({
      SplitMe: loadedModule.default
    });
  };
  render() {
    const { SplitMe } = this.state;
    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <p onClick={this.handleClick}>Hello React!</p>
          {SplitMe && <SplitMe />}
        </header>
      </div>
    );
  }
}

export default App;


이제 브라우저의 개발자 도구에서 Network 탭을 열고 Hello React! 를 눌러 보자.
SplitMe 컴포넌트의 코드 스플리팅이 잘 이루어졌다.

state를 사용하여 컴포넌트 코드 스플리팅을 하는 것이 그렇게 어렵진 않지만, 매번 state를 선언해 주어야 한다는 점이
조금 불편하다.


        19.2.2 React.lazy와 Suspense 사용하기

React.lazy와 Suspense를 사용하면 코드 스플리팅을 하기 위해 state를 따로 선언하지 않고도
정말 간편하게 컴포넌트 코드 스플리팅을 할 수 있다. 먼저 사용 방법을 알아보고 우리가 만든 컴포넌트에 적용해보자.

React.lazy는 컴포넌트를 렌더링하는 시점에서 비동기적으로 로딩할 수 있게 해 주는 유틸 함수이다.
사용 방법은 다음과 같다.


예시 코드
const SplitMe = React.lazy(() => import('./SplitMe'));


Suspense는 리액트 내장 컴포넌트로서 코드 스플리팅된 컴포넌트를 로딩하도록 발동시킬 수 있고,
로딩이 끝나지 않았을 때 보여 줄 UI를 설정할 수 있다.
사용 방법은 다음과 같다.


예시 코드
import React, { Suspense } from 'react';

...
<Suspense fallback={<div>loading...</div>}
    <SplitMe />
</Suspense>


Suspense에서 fallback props 를 통해 로딩 중에 보여 줄 JSX를 지정할 수 있다.

사용 방법을 배웠으니 지금부터 프로젝트에 적용 해보자.
이제는 클래스형 컴포넌트를 사용할 필요가 없으니 다시 함수형 컴포넌트로 전환한다.


import React, { useState, Suspense } from 'react';
import logo from './logo.svg';
import './App.css';
const SplitMe = React.lazy(() => import('./SplitMe'));

function App() {
  const [visible, setVisible] = useState(false);
  const onClick = () => {
    setVisible(true);
  };
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p onClick={onClick}>Hello React!</p>
        <Suspense fallback={<div>loading...</div>}>
          {visible && <SplitMe />}
        </Suspense>
      </header>
    </div>
  );
}

export default App;


단순히 SplitMe 컴포넌트의 가시성을 의미하는 visible이라는 상태만 업데이트하여 코드 스플리팅된 컴포넌트를 보여 줬다.
개발자 도구의 Network 탭에서 Online을 클릭하여 네트워크 속도를 느리게 설정해 보자.

메뉴에서 Slow 3G를 선택하면 느린 네트워크 속도를 시뮬레이트할 수 있다.
설정 후 Hello React! 를 클릭해보자. 로딩 문구가 나타날 것이다.


        19.2.3 Loadable Components를 통한 코드 스플리팅

Loadable Components는 코드 스플리팅을 편하게 하도록 도와주는 서드파티 라이브러리이다.
이 라이브러리의 이점은 서버 사이드 렌더링을 지원한다는 것이다(React.lazy와 Suspense는 아직 서버 사이드 렌더링을 지원하지 않음).
또한, 렌더링하기 전에 필요할 때 스플리팅된 파일을 미리 불러올 수 있는 기능도 있다.

서버 사이드 렌더링이란 웹 서비스의 초기 로딩 속도 개선, 캐싱 및 검색 엔진 최적화를 가능하게 해 주는 기술이다.
서버 사이드 렌더링을 사용하면 웹 서비스의 초기 렌더링을 사용자의 브라우저가 아닌 서버 쪽에서 처리한다.
서용자는 서버에서 렌더링한 html 결과물을 받아 와서 그대로 사용하기 때문에 초기 로딩 속도도 개선되고,
검색 엔진에서 크롤링할 때도 문제없다. 이에 대한 내용은 다음 장에서 알아보고, 여기서는 서버 사이드 렌더링 없이
Loadable Components 의 기본적인 사용법만 알아본다.

먼저 이 라이브러리를 설치 하자.


$ yarn add @loadable/component


사용법은 React.lazy와 비슷하다. 단, Suspense를 사용할 필요는 없다.


import React, { useState } from 'react';
import logo from './logo.svg';
import './App.css';
import loadable from '@loadable/component';
const SplitMe = loadable(() => import('./SplitMe'));

function App() {
  const [visible, setVisible] = useState(false);
  const onClick = () => {
    setVisible(true);
  };
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p onClick={onClick}>Hello React!</p>
        {visible && <SplitMe />}
      </header>
    </div>
  );
}

export default App;


로딩 중에 다른 UI를 보여 주고 싶다면 loadable을 사용하는 부분을 다음과 같이 수정한다.


const SplitMe = loadable(() => import('./SplitMe'), {
    fallback: <div>loading...</div>
});


이번에는 컴포넌트를 미리 불러오는(preload) 방법을 알아본다.
코드를 다음과 같이 수정해보자.


import React, { useState } from 'react';
import logo from './logo.svg';
import './App.css';
import loadable from '@loadable/component';
const SplitMe = loadable(() => import('./SplitMe'), {
  fallback: <div>loading...</div>
});

function App() {
  const [visible, setVisible] = useState(false);
  const onClick = () => {
    setVisible(true);
  };
  const onMouseOver = () => {
    SplitMe.preload();
  }
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p onClick={onClick} onMouseOver={onMouseOver}>Hello React!</p>
        {visible && <SplitMe />}
      </header>
    </div>
  );
}

export default App;


이렇게 수정하면 마우스 커서를 Hello React! 에 올리기만 해도 로딩이 시작된다.
그리고 클릭했을 때 렌더링된다. 브라우저 개발자 도구를 열어서 커서를 올리는 시점에 파일이 불러와지는 지 확인하자.
이런 기능을 구현하면 나중에 사용자에게 더 좋은 경험을 제공할 수 있다.

Loadable Components 는 미리 불러오는 기능 외에도 타임아웃, 로딩 UI 딜레이, 서버 사이드 렌더링 호환 등 
다양한 기능을 제공한다. 자세한 내용은 아래에서 확인하자.
https://www.smooth-code.com/open-source/loadable-components/docs/delay/
