            24.3 헤더 컴포넌트 생성 및 로그인 유지된

헤더 컴포넌트를 구현하고, 로그인 후에 새로고침을 해도 로그인이 유지되는 기능을 만들어 보자.


        24.3.1 헤더 컴포넌트 만들기

헤더 컴포넌트를 만들기 전에 Responsive 라는 컴포넌트를 작성하겠다. 반응형 디자인을 할 때 더 편하게 작업하기 위해서다.
Responsive 컴포넌트는 추후 다양한 컴포넌트에서 사용할 수 있기 때문에 common 디렉터리로 분류한다.


import React from 'react';
import styled from 'styled-components';

const ResponsiveBlock = styled.div`
    padding-left: 1rem;
    padding-right: 1rem;
    width: 1024px;
    margin: 0 auto; /* 중앙 정렬 */
    
    /* 브라우저 크기에 따라 가로 크기 변경 */
    @media (max-width: 1024px) {
        width: 768px;
    }
    @media (max-width: 768px) {
        width: 100%;
    }
`;

const Responsive = ({ children, ...rest }) => {
    // style, className, onClick, onMouseMove 등의 props 를 사용할 수 있도록
    // ...rest를 사용하여 ResponsiveBlock에 전달
    return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;
};

export default Responsive;


이제 Header 컴포넌트를 만든다. 이 컴포넌트도 포스트 페이지, 포스트 목록 페이지에서 사용되기 때문에 common 디렉터리에 작성한다.


import React from 'react';
import styled from 'styled-components';
import Responsive from './Responsive';
import Button from './Button';

const HeaderBlock = styled.div`
    position: fixed;
    width: 100%;
    background: white;
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);
`;

/* Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성 */
const Wrapper = styled(Responsive)`
    height: 4rem;
    display: flex;
    align-items: center;
    justify-content: space-between; /* 자식 엘리먼트 사이의 여백을 최대로 설정 */
    .logo {
        font-size: 1.125rem;
        font-weight: 800;
        letter-spacing: 2px;
    }
    .right {
        display: flex;
        align-items: center;
    }
`;

/* 헤더가 fixed로 되어 있기 때문에 페이지의 콘텐츠가 4rem 아래에 나타나도록 해 주는 컴포넌트 */
const Spacer = styled.div`
    height: 4rem;
`;

const Header = () => {
    return (
        <>
            <HeaderBlock>
                <Wrapper>
                    <div className="logo">REACTERS</div>
                    <div className="right">
                        <Button>로그인</Button>
                    </div>
                </Wrapper>
            </HeaderBlock>
            <Spacer />
        </>
    );
};

export default Header;


헤더 컴포넌트가 언제나 페이지 상단에 떠 있도록 position 값을 fixed로 설정했다. 그런데 position을 fixed로 설정하면
헤더 컴포넌트 하단에 나오는 컨텐츠가 헤더의 위치와 겹치게 된다. 그러므로 Spacer라는 컴포넌트를 만들어서
헤더 크기만큼 공간을 차지하도록 했다.
이제 이 컴포넌트를 PostListPage에서 렌더링 해보자.


import React from 'react';
import Header from '../components/common/Header';

const PostListPage = () => {
    return (
        <>
            <Header />
            <div>안녕하세요.</div>
        </>
    );
};

export default PostListPage;


여기서 로그인 버튼을 누르면 /login 페이지로 이동해야 하는데, 버튼 컴포넌트를 Link 처럼 작동시키는 두 가지 방법이 있다.


import React from 'react';
import styled, { css } from 'styled-components';
import palette from '../../lib/styles/palette';
import { withRouter } from "react-router-dom";

const StyledButton = styled.button`
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    font-weight: bold;
    padding: 0.25rem 1rem;
    color: white;
    outline: none;
    cursor: pointer;

    background: ${palette.gray[8]};
    &.hover {
        background: ${palette.gray[6]};
    }

    ${props => 
        props.fullWidth &&
        css `
            padding-top: 0.75rem;
            padding-bottom: 0.75rem;
            width: 100%;
            font-size: 1.125rem;
        `}
    
    ${props =>
        props.cyan &&
        css`
            background: ${palette.cyan[5]};
            &:hover {
                background: ${palette.cyan[4]};
            }
        `}
`;

const Button = ({ to, history, ...rest }) => {
    const onClick = e => {
        // to 가 있다면 to로 페이지 이동
        if(to) {
            history.push(to);
        }
        if(rest.onClick) {
            rest.onClick(e);
        }
    };
    return <StyledButton {...rest} onClick={onClick} />;
}

export default withRouter(Button);


이렇게 history를 사용하여 to 값이 있을 경우 페이지를 이동하도록 구현한 뒤, 
Button 컴포넌트를 사용할 때 to 값을 props로 넣어 주면 마치 Link 컴포넌트처럼 작동한다.


import React from 'react';
import styled from 'styled-components';
import Responsive from './Responsive';
import Button from './Button';
import { Link } from "react-router-dom";

...

const Header = () => {
    return (
        <>
            <HeaderBlock>
                <Wrapper>
                    <Link to="/" className="logo">
                        REACTERS
                    </Link>
                    <div className="right">
                        <Button to="/login">로그인</Button>
                    </div>
                </Wrapper>
            </HeaderBlock>
            <Spacer />
        </>
    );
};

export default Header;


REACTERS 라고 나타나는 로고에도 링크를 달고, Button 컴포넌트에도 링크를 달았다.
이제 헤더 컴포넌트에서 로그인 버튼을 눌렀을 때 페이지가 잘 이동하는지 확인해 보자.
Button에서 페이지를 이동시키는 두 번째 방법은 withRouter 를 사용하는 대신 Link 컴포넌트를
직접 사용하는 것이다.


import React from 'react';
import styled, { css } from 'styled-components';
import palette from '../../lib/styles/palette';
import { Link } from "react-router-dom";

const buttonStyle = css`
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    font-weight: bold;
    padding: 0.25rem 1rem;
    color: white;
    outline: none;
    cursor: pointer;

    background: ${palette.gray[8]};
    &.hover {
        background: ${palette.gray[6]};
    }

    ${props => 
        props.fullWidth &&
        css `
            padding-top: 0.75rem;
            padding-bottom: 0.75rem;
            width: 100%;
            font-size: 1.125rem;
        `}
    
    ${props =>
        props.cyan &&
        css`
            background: ${palette.cyan[5]};
            &:hover {
                background: ${palette.cyan[4]};
            }
        `}
`;

const StyledButton = styled.button`
    ${buttonStyle}
`;

const StyledLink = styled(Link)`
    ${buttonStyle}
`;

const Button = props => {
    return props.to ? (
        <StyledLink {...props} cyan={props.cyan ? 1 : 0} />
    ) : (
        <StyledButton {...props} />
    )
};

export default Button;


위 코드에서는 StyledLink 라는 컴포넌트를 새로 만들었다. StyledButton 과 똑같은 스타일을 사용하므로,
기존에 사용하던 스타일을 buttonStyle 이라는 값에 담아서 재사용했다. 그리고 Button 컴포넌트 내부에서
props.to 값에 따라 StyledLink를 사용할지, StyledButton을 사용할지 정하도록 설정했다.

StyledLink를 사용하는 과정에서는 props.cyan 값을 숫자 1과 0으로 변환해 주었다. 이렇게 한 이유는 styled() 함수로
감싸서 컴포넌트의 경우에는 임의 props가 필터링되지 않기 때문이다(styled.button으로 만든 컴포넌트의 경우에는 임의 props가
자동 필터링되어 스타일을 만드는 용도로만 사용되고, 실제 button 엘리먼트에게 속성이 전달되지 않는다.)
필터링이 되지 않으면 cyan={true} 라는 값이 Link에서 사용하는 a 태그에 그대로 전달되는데, a 태그는 boolean 값이
임의 props로 설정되는 것을 허용하지 않는다. 숫자/문자열만 허용하기 때문에 삼항 연산자를 사용하여 boolean을 숫자로 변환해 준 것이다.

이렇게 withRouter를 사용하는 방법과 Link 컴포넌트를 사용하는 방법을 배웠는데, 두 가지 방법 중에서 Link 컴포넌트를 사용하는 것을
권장한다. 사용자가 느끼기에는 비슷하지만, 웹 접근성으로 따지면 Link 컴포넌트를 사용하는 것이 더 옳은 방식이다.
Link 컴포넌트는 a 태그를 사용하기 때문이다. HTML 태그는 용도대로 사용하는 것이 좋다. 또한, Link 컴포넌트를 기반으로
구현하면 버튼에 마우스를 올렸을 때 브라우저 하단에 이동할 주소가 나타나는 차이점도 있다.


        24.3.2 로그인 상태를 보여 주고 유지하기

로그인 페이지에서 로그인에 성공하면 헤더 컴포넌트에서 로그인 중인 상태를 보여주고, 새로고침을 해도
이 상태가 유지되도록 해 보겠다.


    24.3.2.1 로그인 상태 보여 주기

먼저 헤더 컴포넌트에 리덕스를 연결시켜 본다. containers 디렉터리에 common 디렉터리를 만들고,
그 안에 HeaderContainer 컴포넌트를 작성한다.


import React from 'react';
import { useSelector } from "react-redux";
import Header from '../../components/common/Header';

const HeaderContainer = () => {
    const { user } = useSelector(({ user }) => ({ user: user.user }));
    return <Header user={user} />;
};

export default HeaderContainer;


헤더 컴포넌트에서 user 값이 주어질 경우 계정명과 로그아웃 버튼을 보여 주도록 수정한다.


...

const UserInfo = styled.div`
    font-weight: 800;
    margin-right: 1rem;
`;

const Header = ({ user }) => {
    return (
        <>
            <HeaderBlock>
                <Wrapper>
                    <Link to="/" className="logo">
                        REACTERS
                    </Link>
                    {user ? (
                        <div className="right">
                            <UserInfo>{user.username}</UserInfo>
                            <Button>로그아웃</Button>
                        </div>
                    ) : (
                        <div className="right">
                            <Button to="/login">로그인</Button>
                        </div>
                    )}
                </Wrapper>
            </HeaderBlock>
            <Spacer />
        </>
    );
};

export default Header;


다음으로 PostListPage에서 Header 컴포넌트를 HeaderContainer로 대체한다.


import React from 'react';
import HeaderContainer from '../containers/common/HeaderContainer';

const PostListPage = () => {
    return (
        <>
            <HeaderContainer />
            <div>안녕하세요.</div>
        </>
    );
};

export default PostListPage;


여기까지 작업한 뒤 로그인 페이지에서 로그인해 보자. 헤더 컴포넌트가 잘 나타나는지 확인한다.

그런데 여기서 새로고침을 하면 상태가 초기화된다. 이를 유지시켜 보자.


    24.3.2.2 로그인 상태 유지하기

로그인 상태를 유지하기 위해 브라우저에 내장되어 있는 localStorage 를 사용하겠다.
loginForm 과 RegisterForm을 다음과 같이 수정해 준다.


import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { changeField, initializeForm, login } from "../../modules/auth";
import AuthForm from '../../components/auth/AuthForm';
import { withRouter } from "react-router-dom";
import { check } from "../../modules/user";

const LoginForm = ({ history }) => {
    ...

    useEffect(() => {
        if(user) {
            history.push('/');
            try {
                localStorage.setItem('user', JSON.stringify(user));
            } catch (e) {
                console.log('localStorage is not working');
            }
        }
    }, [history, user]);

    return (...);
};

export default withRouter(LoginForm);


RegisterForm 에서도 똑같은 코드를 붙여 넣는다.


import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { changeField, initializeForm, register } from "../../modules/auth";
import AuthForm from '../../components/auth/AuthForm';
import { check } from "../../modules/user";
import { withRouter } from "react-router-dom";

const RegisterForm = ({ history }) => {
    ...

    // user 값이 잘 설정되었는지 확인
    useEffect(() => {
        if(user) {
            history.push('/');  // 홈 화면으로 이동
            try {
                localStorage.setItem('user', JSON.stringify(user));
            } catch (e) {
                console.log('localStorage is not working');
            }
        }
    }, [history, user]);

    return (...);
};

export default withRouter(RegisterForm);


회원가입 및 로그인을 하면 사용자 정보를 localStorage에 저장하도록 작업해 주었다.
페이지를 새로고침했을 때도 로그인 상태를 유지하려면, 리액트 앱이 브라우저에서 맨 처음 렌더링될 때
localStorage에서 값을 불러와 리덕스 스토어 안에 넣도록 구현해 주어야 한다.

이 작업은 App 컴포넌트에서 useEffect 를 사용하여 처리하거나, App 컴포넌트를 클래스형 컴포넌트로 변환하여
componentDidMount 메소드를 만들고 그 안에서 처리해도 된다. 하지만 여기서는 프로젝트의 엔트리 파일인 index.js에서 처리해 준다.

왜냐하면, componentDidMount와 useEffect 는 컴포넌트가 한 번 렌더링된 이후에 실행되기 때문이다.
이 경우에는 사용자가 아주 짧은 깜박임 현상(로그인이 나타났다 로그아웃이 나타나는 현상)을 경험할 수 있다.
index.js 에서 사용자 정보를 불러오도록 처리하고 컴포넌트를 렌더링하면 이러한 깜박임 현상이 발생하지 않는다.

index.js 를 다음과 같이 수정해 보자.


import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { BrowserRouter } from 'react-router-dom';
import { Provider } from 'react-redux';
import { createStore, applyMiddleware } from 'redux';
import { composeWithDevTools } from 'redux-devtools-extension';
import rootReducer, { rootSaga } from './modules';
import createSagaMiddleware from 'redux-saga';
import { tempSetUser, check } from "./modules/user";

const sagaMiddleware = createSagaMiddleware();
const store = createStore(
    rootReducer, 
    composeWithDevTools(applyMiddleware(sagaMiddleware)),
);

function loadUser() {
    try {
        const user = localStorage.getItem('user');
        if(!user) return;   // 로그인 상태가 아니라면 아무것도 안 함

        store.dispatch(tempSetUser(user));
        store.dispatch(check());
    } catch (e) {
        console.log('localStorage is not working');
    }
}

sagaMiddleware.run(rootSaga);
loadUser();

ReactDOM.render(
    <Provider store={store}>
        <BrowserRouter>
            <App />
        </BrowserRouter>
    </Provider>,
    document.getElementById('root'),
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


위 코드를 작성할 때는 sagaMiddleware.run 이 호출ㄷ된 이후에 loadUser 함수를 호출하는 것이 중요하다.
loadUser 함수를 먼저 호출하면 CHECK 액션을 디스패치했을 때 사가에서 이를 제대로 처리하지 않는다.

이제 로그인을 하고 새로고침을 해보자. 로그인 상태가 잘 유지되는지 본다.
리덕스 개발자 도구를 통해 어떤 액션이 디스패치되었는지, 리덕스 스토어는 어떤 상태를 가지고 있는지 확인해 본다.

현재 페이지가 새로고침될 때 localStorage에 사용자 정보가 들어 있다면 그 사용자 값을 리덕스 스토어에 넣는다.
그러고 나서 정말 사용자가 로그인 상태인지 CHECK 액션을 디스패치하여 검증하도록 했다.

CHECK 액션이 디스패치되면 사가를 통해 /api/check API를 호출한다. 이 API는 성공할 수도 있고, 실패할 수도 있다.
만약 실패하면, 사용자 상태를 초기화해야 하고 localStorage에 들어 있는 값도 지워 줘야 한다.


    24.3.2.3 로그인 검증 실패 시 정보 초기화

로그인 정보가 만료되었을 때를 대비하여 사용자 정보를 초기화하는 작업을 해 보겠다.


...

const checkSaga = createRequestSaga(CHECK, authAPI.check);

function checkFailureSaga() {
    try {
        localStorage.removeItem('user');    // localStorage 에서 user를 제거
    } catch (e) {
        console.log('localStorage is not working');
    }
}

export function* userSaga() {
    yield takeLatest(CHECK, checkSaga);
    yield takeLatest(CHECK_FAILURE, checkFailureSaga);
}

...


checkFailureSaga라는 함수를 만들고, CHECK_FAILURE 액션이 발생할 때 해당 함수가 호출되도록 설정했다.
이 함수에서는 localStorage 안에 있는 user 값을 초기화해 준다. 스토어 안의 user 값은 리듀서에서 CHECK_FAILURE 액션이
발생했을 때 user 값을 null로 설정하도록 이미 처리 했으니 신경 쓰지 않아도 된다. 또한, checkFailureSaga 함수에서는
yield를 사용하지 않으므로 function* 를 사용하여 제너레이터 함수 형태로 만들어 주지 않아도 괜찮다.

이제 로그인 정보가 유효하지 않을 때 로그인 정보 초기화 후 새로고침이 되는지 확인해보자.
쿠키를 초기화하고 페이지를 새로고침한다.

쿠키를 초기화할 때는 개발자 도구에서 Application 탭을 열고, Cookies > http://localhost:3000/ Θ 아이콘을 누른다.
쿠키를 초기화했다면 페이지를 새로고쳐 본다. 로그인 정보가 잘 초기화 되었다면 개발자 도구 콘솔에서
console.log(localStorage.user) 를 입력해 본다. 초기화가 잘 되었다면 undefined 가 나타나야 한다.


        24.3.3 로그아웃 기능 구현

이번에는 로그아웃 기능을 구현해본다. 로그아웃 기능을 구현하는 것은 간단하다. 로그아웃 API를 호출하고,
localStorage 안의 값을 없애 주면 된다.
먼저 lib/api/auth.js 파일을 열어서 logout 함수를 만들어준다.


import client from './client';

// 로그인
export const login = ({ username, password }) => 
    client.post('/api/auth/login', { username, password });

// 회원가입
export const register = ({ username, password }) => 
    client.post('/api/auth/register', { username, password });

// 로그인 상태 확인
export const check = () => client.get('/api/auth/check');

// 로그아웃
export const logout = () => client.post('/api/auth/logout');


이어서 LOGOUT 이라는 액션을 만들고, 이 액션이 디스패치되었을 때 API 호출 후 localStorage의 user 값을 지워준다.
추가로 리듀서에서는 스토어의 user 값을 null로 설정하겠다. 로그아웃의 경우에는 성공/실패 여부가 중요하지 않으므로
LOGOUT_SUCCESS, LOGOUT_FAILURE와 같은 액션은 따로 만들지 않겠다.


import { createAction, handleActions } from "redux-actions";
import { takeLatest, call } from "redux-saga/effects";
import * as authAPI from '../lib/api/auth';
import createRequestSaga, { createRequestActionTypes, } from '../lib/createRequestSaga';

const TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리
// 회원 정보 확인
const [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(
    'user/CHECK',
);
const LOGOUT = 'user/LOGOUT';

export const tempSetUser = createAction(TEMP_SET_USER, user => user);
export const check = createAction(CHECK);
export const logout = createAction(LOGOUT);

const checkSaga = createRequestSaga(CHECK, authAPI.check);

function checkFailureSaga() {
    try {
        localStorage.removeItem('user');    // localStorage에서 user를 제거
    } catch (e) {
        console.log('localStorage is not working');
    }
}

function* logoutSaga() {
    try {
        yield call(authAPI.logout); // logout API 요청
        localStorage.removeItem('user');    // localStorage에서 user를 제거
    } catch (e) {
        console.log(e);
    }
}

export function* userSaga() {
    yield takeLatest(CHECK, checkSaga);
    yield takeLatest(CHECK_FAILURE, checkFailureSaga);
    yield takeLatest(LOGOUT, logoutSaga);
}

const initialState = {
    user: null,
    checkError: null,
};

export default handleActions(
    {
        [TEMP_SET_USER]: (state, { payload: user }) => ({
            ...state,
            user,
        }),
        [CHECK_SUCCESS]: (state, { payload: user }) => ({
            ...state,
            user,
            checkError: null,
        }),
        [CHECK_FAILURE]: (state, { payload: error }) => ({
            ...state,
            user: null,
            checkError: error,
        }),
        [LOGOUT]: state => ({
            ...state,
            user: null,
        }),
    },
    initialState,
);


다 작성한 뒤에는 logout 액션 생성 함수를 디스패치하는 onLogout 함수를 만들어서 Header 컴포넌트에 전달해 준다.


import React from 'react';
import { useSelector, useDispatch } from "react-redux";
import Header from '../../components/common/Header';
import { logout } from "../../modules/user";

const HeaderContainer = () => {
    const { user } = useSelector(({ user }) => ({ user: user.user }));
    const dispatch = useDispatch();
    const onLogout = () => {
        dispatch(logout());
    };
    return <Header user={user} onLogout={onLogout} />;
};

export default HeaderContainer;


그리고 Header 컴포넌트에서 로그아웃 버튼을 누르면 해당 함수가 호출되도록 구현해보자.


...

const Header = ({ user, onLogout }) => {
    return (
        <>
            <HeaderBlock>
                <Wrapper>
                    <Link to="/" className="logo">
                        REACTERS
                    </Link>
                    {user ? (
                        <div className="right">
                            <UserInfo>{user.username}</UserInfo>
                            <Button onClick={onLogout}>로그아웃</Button>
                        </div>
                    ) : (
                        <div className="right">
                            <Button to="/login">로그인</Button>
                        </div>
                    )}
                </Wrapper>
            </HeaderBlock>
            <Spacer />
        </>
    );
};

export default Header;


브라우저에서 다시 로그인한 다음, 로그아웃 버튼을 눌러 보자. 로그아웃이 잘 되었는지 확인해보자.