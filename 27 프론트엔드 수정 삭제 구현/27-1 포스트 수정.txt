            27.1 포스트 수정

먼저 포스트 수정 기능을 구현해 보자.


        27.1.1 PostActionButtons 컴포넌트 만들기

포스트를 읽는 화면에서 포스트 작성자에게만 포스트 상단에 수정 버튼과 삭제 버튼이 나타나도록 렌더링해 본다.
이번에 만들 버튼은 기존에 만들어서 사용하던 Button과 스타일이 다르므로, 기존의 Button 컴포넌트를 재사용하지는 않겠다.

components/post 디렉터리에 PostActionButtons 라는 컴포넌트를 생성하자.


import React from 'react';
import styled from 'styled-components';
import palette from '../../lib/styles/palette';

const PostActionButtonsBlock = styled.div`
    display: flex;
    justify-content: flex-end;
    margin-bottom: 2rem;
    margin-top: -1.5rem;
`;

const ActionButton = styled.button`
    padding: 0.25rem, 0.5rem;
    border-radius: 4px;
    color: ${palette.gray[6]};
    font-weight: bold;
    border: none;
    outline: none;
    font-size: 0.875rem;
    cursor: pointer;
    &:hover {
        background: ${palette.gray[1]};
        color: ${palette.cyan[7]};
    }
    & + & {
        margin-left: 0.25rem;
    }
`;

const PostActionButtons = () => {
    return (
        <PostActionButtonsBlock>
            <ActionButton>수정</ActionButton>
            <ActionButton>삭제</ActionButton>
        </PostActionButtonsBlock>
    );
};

export default PostActionButtons;


이제 PostActionButtons 컴포넌트를 PostViewer 의 PostHead 하단에 보여 주어야 한다.
그런데 이 컴포넌트를 PostViewer 에서 직접 렌더링하면, 나중에 PostActionButtons 에 onEdit, onRemove 등의 props를 
전달할 때 무조건 PostViewer 를 거쳐서 전달해야 한다. 정작 PostViewer 내부에서는 사용하지 않지만 내부의 컴포넌트에서 
필요하기 때문에 한 번 거쳐 전달하는 것은 조금 불편하다.


// PostViewerContainer 에서 렌더링할 때:
<PostViewer (...) onEdit={onEdit} onRemove={onRemove} />
// PostViewer 에서 렌더링할 때:
<PostActionButtons onEdit{onEdit} onRemove={onRemove} />


이 방법이 틀린 것은 아니지만, 자칫하면 컴포넌트가 받아 오는 props가 너무 많아져서 관리하기가 어려워질 수 있다.

이렇게 컴포넌트를 거쳐서 props를 전달하는 것이 싫다면, 그 대신 두 가지 방법을 고려할 수 있다.
첫 번째 방법은 PostActionButtons의 컨테이너 컴포넌트를 만들고 PostViewer 내부에서 바로 렌더링하는 것이다.
두 번째 방법은 props를 JSX 형태로 받아와서 렌더링하는 것이다. 다음과 같이 말이다.


<PostViewer
    post={post}
    loading={loading}
    error={error}
    actionButtons={<PostActionButtons onEdit={onEdit} onRemove={onRemove} />}
    />


우리는 두 번째 방법으로 구현하겠다. 두 번째 방법은 굳이 컨테이너 컴포넌트를 새로 만들 필요 없이 기존 PostViewerContainer에
필요한 로직을 작성하면 되기 때문이다.

PostViewer 컴포넌트를 다음과 같이 수정한다.


const PostViewer = ({ post, error, loading, actionButtons }) => {
    ...

    return (
        <PostViewerBlock>
            <PostHead>
                <h1>{title}</h1>
                <SubInfo
                    username={user.username}
                    publishedDate={publishedDate}
                    hasMarginTop
                    />
                <Tags tags={tags} />
            </PostHead>
            {actionButtons}
            <PostContent dangerouslySetInnerHTML={{ __html: body }} />
        </PostViewerBlock>
    );
};

export default PostViewer;


그리고 PostViewerContainer 에서 PostActionButtons 를 불러온 후 PostViewer 의 actionButtons props를 통해 렌더링해 보자.


import React, { useEffect } from 'react';
import { useDispatch, useSelector } from "react-redux";
import { withRouter } from "react-router-dom";
import { readPost, unloadPost } from "../../modules/post";
import PostViewer from '../../components/post/PostViewer';
import PostActionButtons from '../../components/post/PostActionButtons';

const PostViewerContainer = ({ match }) => {
    // 처음 마운트될 때 포스트 읽기 API 요청
    const { postId } = match.params;
    const dispatch = useDispatch();
    const { post, error, loading } = useSelector(({ post, loading }) => ({
        post: post.post,
        error: post.error,
        loading: loading['post/READ_POST'],
    }));

    useEffect(() => {
        dispatch(readPost(postId));
        // 언마운트될 때 리덕스에서 포스트 데이터 없애기
        return () => {
            dispatch(unloadPost());
        };
    }, [dispatch, postId]);

    return (
        <PostViewer 
            post={post} 
            loading={loading} 
            error={error} 
            actionButtons={<PostActionButtons />}
            />
    );
};

export default withRouter(PostViewerContainer);


이제 포스트 페이지에 수정, 삭제 버튼이 나타났는지 확인해보자.

현재는 로그인된 사용자가 아닌 다른 사용자의 포스트를 볼 때도 버튼이 나타나는데, 조건에 따라 버튼을 숨기는 작업을 구현해 보겠다.


        27.1.2 수정 버튼 클릭 시 글쓰기 페이지로 이동하기

이제 수정 버튼을 클릭하면 글쓰기 페이지로 이동하고, 현재 보고 있는 포스트가 나타나게 해 본다.
우선 write 리덕스 모듈에 SET_ORIGIN_POST 라는 액션을 만든다. 이 액션은 현재 보고있는 포스트 정보를 write 모듈에서
관리하는 상태에 넣는다.


...
const SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';

...
export const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);

// 사가 생성
...

const initialState = {
    title: '',
    body: '',
    tags: [],
    post: null,
    postError: null,
    originalPostId: null,
};

const write = handleActions(
    {
        ...
        [SET_ORIGINAL_POST]: (state, { payload: post }) => ({
            ...state,
            title: post.title,
            body: post.body,
            tags: post.tags,
            originalPostId: post._id,
        }),
    },
    initialState,
);

export default write;


액션을 추가한 뒤에는 PostViewerContainer를 다음과 같이 수정해 보자.


import React, { useEffect } from 'react';
import { useDispatch, useSelector } from "react-redux";
import { withRouter } from "react-router-dom";
import { readPost, unloadPost } from "../../modules/post";
import PostViewer from '../../components/post/PostViewer';
import PostActionButtons from '../../components/post/PostActionButtons';
import { setOriginalPost } from "../../modules/write";

const PostViewerContainer = ({ match, history }) => {
    // 처음 마운트될 때 포스트 읽기 API 요청
    const { postId } = match.params;
    const dispatch = useDispatch();
    const { post, error, loading, user } = useSelector(({ post, loading, user }) => ({
        post: post.post,
        error: post.error,
        loading: loading['post/READ_POST'],
        user: user.user,
    }));

    useEffect(() => {
        dispatch(readPost(postId));
        // 언마운트될 때 리덕스에서 포스트 데이터 없애기
        return () => {
            dispatch(unloadPost());
        };
    }, [dispatch, postId]);

    const onEdit = () => {
        dispatch(setOriginalPost(post));
        history.push('/write');
    }

    const ownPost = (user && user._id) === (post && post.user._id);

    return (
        <PostViewer 
            post={post} 
            loading={loading} 
            error={error} 
            actionButtons={ownPost && <PostActionButtons onEdit={onEdit} />}
            />
    );
};

export default withRouter(PostViewerContainer);


기존에는 PostActionButtons가 무조건 나타났는데, 현재 사용자가 보고 있는 포스트가 자신의 포스트일 때만
PostActionButtons가 나타나게 설정했다. 그리고 onEdit 함수를 구현하여 PostActionButtons에 전달해 주었다.

이제 수정 버튼이 클릭되면 props로 전달받은 onEdit 를 호출하도록 PostActionButtons 를 수정하자.


...

const PostActionButtons = ({ onEdit }) => {
    return (
        <PostActionButtonsBlock>
            <ActionButton onClick={onEdit}>수정</ActionButton>
            <ActionButton>삭제</ActionButton>
        </PostActionButtonsBlock>
    );
};

export default PostActionButtons;


이제 컴포넌트를 저장하고 수정버튼을 누르면 글쓰기 페이지로 이동한다. 제목, 태그만 자동으로 입력되어 있고 내용은 공백으로 나타날 것이다.
내용의 초깃값도 설정되도록 Editor 컴포넌트를 수정한다.


import React, { useRef, useEffect } from 'react';
import Quill from 'quill';
import 'quill/dist/quill.bubble.css';
import styled from 'styled-components';
import palette from '../../lib/styles/palette';
import Responsive from '../common/Responsive';

const EditorBlock = styled(Responsive)`
    /* 페이지 위아래 여백 지정 */
    padding-top: 5rem;
    padding-bottom: 5rem;
`;

const TitleInput = styled.input`
    font-size: 3rem;
    outline: none;
    padding-bottom: 0.5rem;
    border: none;
    border-bottom: 1px solid ${palette.gray[4]};
    margin-bottom: 2rem;
    width: 100%;
`;

const QuillWrapper = styled.div`
    /* 최소 크기 지정 및 padding 제거 */
    .ql-editor {
        padding: 0;
        min-height: 320px;
        font-size: 1.125rem;
        line-height: 1.5;
    }
    .ql-editor .ql-blank::before {
        left: 0px;
    }
`;

const Editor = ({ title, body, onChangeField }) => {
    ...

    const mounted = useRef(false);
    useEffect(() => {
        if(mounted.current) return;
        mounted.current = true;
        quillInstance.current.root.innerHTML = body;
    }, [body]);

    const onChangeTitle = e => {
        onChangeField({ key: 'title', value: e.target.value });
    };

    return (...);
};

export default Editor;


Editor 컴포넌트에서 받아 오는 body 값은 Quill 에디터에서 내용을 입력할 때마다 변경된다.
body가 변경될 때마다 방금 작성한 useEffect 에 등록한 함수가 호출된다. 하지만 우리는 컴포넌트가 화면에 마운트되고 나서
단 한 번만 useEffect 에 등록한 작업이 실행되도록 설정해 주어야 한다. 따라서 useRef를 사용하여 mount 상태에 따라
작업을 처리하도록 설정했다.

물론 이 상황에서 useEffect 의 두 번째 파라미터에 비어 있는 배열을 넣으면 해결될 수도 있다.
하지만 ESLint 구칙은 useEfefct 에서 사용하는 모든 외부 값을 두 번째 파라미터에 넣는 배열 안에 
포함시킬 것을 권장하고 있으므로 이렇게 처리했다.

또 다른 방법으로 해당 줄만 ESLint 규칙을 비활성화할 수도 있다.


useEffect(() => {
    quillInstance.current.root.innerHTML = body;
}, []); /* eslint-disable-line */


취향에 따라 방법을 선택하면 된다.
이제 다시 수정 버튼을 눌러 보자. 에디터에서 제목, 내용, 태그가 전부 잘 나타나는지 확인한다.

리덕스 스토어의 write 상태에 값이 제대로 들어가 있는지도 확인해 보자.
다음으로 write 상태에 originalPostId 값이 주어졌다면 포스트 작성 API 대신 수정 API를 사용하는 기능을 구현해 보겠다.
lib/api/posts.js 열어서 updatePost 함수를 작성한다.


...

export const updatePost = ({ id, title, body, tags }) =>
    client.patch(`/api/posts/${id}`, {
        title,
        body,
        tags,
    });


그리고 write 리덕스 모듈에서 UPDATE_POST 액션과 updatePostSaga 를 만들어 본다.


...
const [
    UPDATE_POST,
    UPDATE_POST_SUCCESS,
    UPDATE_POST_FAILURE,
] = createRequestActionTypes('write/UPDATE_POST');  // 포스트 수정

...
export const updatePost = createAction(
    UPDATE_POST,
    ({ id, title, body, tags }) => ({
        id,
        title,
        body,
        tags,
    }),
);

// 사가 생성
const writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);
const updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);

export function* writeSaga() {
    yield takeLatest(WRITE_POST, writePostSaga);
    yield takeLatest(UPDATE_POST, updatePostSaga);
}

...

const write = handleActions(
    {
        ...
        [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({
            ...state,
            post,
        }),
        [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({
            ...state,
            postError,
        }),
    },
    initialState,
);

export default write;


write 모듈에서 포스트 수정을 위한 코드를 작성한 후에는 WriteActionButtonsContainer와 
WriteActionButtons 컴포넌트를 차례로 수정해 준다.


import React, { useEffect } from "react";
import WriteActionButtons from '../../components/write/WriteActionButtons';
import { useSelector, useDispatch } from "react-redux";
import { withRouter } from "react-router-dom";
import { writePost, updatePost } from "../../modules/write";

const WriteActionButtonsContainer = ({ history }) => {
    const dispatch = useDispatch();
    const { title, body, tags, post, postError, originalPostId } = useSelector(({ write }) => ({
        title: write.title,
        body: write.body,
        tags: write.tags,
        post: write.post,
        postError: write.postError,
        originalPostId: write.originalPostId,
    }));

    // 포스트 등록
    const onPublish = () => {
        if(originalPostId) {
            dispatch(updatePost({ title, body, tags, id: originalPostId }));
            return;
        }
        dispatch(
            writePost({
                title,
                body,
                tags,
            }),
        );
    };

    ...
    return <WriteActionButtons 
        onPublish={onPublish} 
        onCancel={onCancel} 
        isEdit={!!originalPostId}
        />;
}

export default withRouter(WriteActionButtonsContainer);


WriteActionButtonsContainer 컴포넌트에서는 originalPostId 값이 존재하면 writePost 대신 
updatePost 액션 생성 함수를 사용하도록 수정했다. 그리고 isEdit 라는 props를 전달하여 originalPostId 값의
존재 유무에 따라 버튼 이름을 포스트 수정 또는 포스트 등록으로 설정해 주었다.

컨테이너 컴포넌트를 수정한 뒤에는 프레젠테이셔널 컴포넌트도 수정해 준다.


...

const WriteActionButtons = ({ onCancel, onPublish, isEdit }) => {
    return (
        <WriteActionButtonsBlock>
            <StyledButton cyan onClick={onPublish}>
                포스트 {isEdit ? '수정' : '등록'}
            </StyledButton>
            <StyledButton onClick={onCancel}>취소</StyledButton>
        </WriteActionButtonsBlock>
    );
};

export default WriteActionButtons;


이제 포스트를 열고 수정 버튼을 누른 다음에 제목, 내용, 태그를 변경하고 포스트 수정 버튼을 눌러보자.
변경 사항이 잘 나타나는지 확인한다.