            13.4 URL 파라미터와 쿼리

페이지 주소를 정의할 때 가끔은 유동적인 값을 전달해야 할 때도 있다.
이는 파라미터와 쿼리로 나눌 수 있다.


    파라미터 예시 : /profile/velopert
    쿼리 예시 : /about?details=true


유동적인 값을 사용해야 하는 상황에서 파라미터를 써야 할지 쿼리를 써야 할지 정할 때,
무조건 따라야 하는 규칙은 없다. 다만 일반적으로 파라미터는 특정 아이디 혹은 이름을 사용하여 조회할 때 사용하고,
쿼리는 우리가 어떤 키워드를 검색하거나 페이지에 필요한 옵션을 전달할 때 사용한다.


        13.4.1 URL 파라미터

Profile 페이지에서 파라미터를 사용해본다. /profile/velopert 와 같은 형식으로 뒷부분에 유동적인 username 값을 넣어 줄 때
해당 값을 props로 받아 와서 조회하는 방법을 알아본다.
Profile 이라는 컴포넌트를 다음과 같이 만들어보자.


import React from 'react';

const data = {
    velopert: {
        name: '김민준',
        description: '리액트를 좋아하는 개발자'
    },
    gildong: {
        name: '홍길동',
        description: '고전 소설 홍길동전의 주인공'
    }
};

const Profile = ({ match }) => {
    const { username } = match.params;
    const profile = data[username];
    if(!profile) {
        return <div>존재하지 않는 사용자입니다.</div>
    }
    return (
        <div>
            <h3>
                {username}({profile.name})
            </h3>
            <p>{profile.description}</p>
        </div>
    );
};

export default Profile;


URL 파라미터를 사용할 때는 라우트로 사용되는 컴포넌트에서 받아 오는 match 라는 객체 안의 params 값을 참조한다.
match 객체 안에는 현재 컴포넌트가 어떤 경로 규칙에 의해 보이는지에 대한 정보가 들어있다.

이제 App 컴포넌트에서 Profile 컴포넌트를 위한 라우트를 정의해보자.
이번에 사용할 path 규칙에는 /profile/:username 이라고 넣어 주면 된다.
이렇게 설정하면 match.params.username 값을 통해 현재 username 값을 조회할 수 있다.

라우트를 정의하고 나서 상단에 각 프로필 페이지로 이동하는 링크도 추가하자.


import React from 'react';
import { Route, Link } from 'react-router-dom';
import About from './About';
import Home from './Home';
import Profile from './Profile';

const App = () => {
  return (
    <div>
      <ul>
        <li>
          <Link to="/">홈</Link>
        </li>
        <li>
          <Link to="/about">소개</Link>
        </li>
        <li>
          <Link to="/profile/velopert">velopert 프로필</Link>
        </li>
        <li>
          <Link to="/profile/gildong">gildong 프로필</Link>
        </li>
      </ul>
      <hr />
      <Route path="/" component={Home} exact={true} />
      <Route path={[ '/about', 'info' ]} component={About} />
      <Route path="/profile/:username" component={Profile} />
    </div>
  );
};

export default App;


이제 페이지를 확인해보자.


        13.4.2 URL 쿼리

이번에는 About 페이지에서 쿼리를 받아 온다.
쿼리는 location 객체에 들어 있는 search 값에서 조회할 수 있다. location 객체는 라우트로 사용된 컴포넌트에게 props로 전달되며,
웹 애플리케이션의 현재 주소에 대한 정보를 지니고 있다.
location 형태는 다음과 같다.


{
    "pathname": "/about",
    "serch": "?detail=true",
    "hash": ""
}


위 location 객체는 localhost:3000/about?detail=true 주소로 들어갔을 때의 값이다.
URL 쿼리를 읽을 때는 위 객체가 지닌 값 중에서 search 값을 확인해야 한다.
이 값은 문자열 형태로 되어 있다. URL 쿼리는 ?detail=true&another=1 과 같이 문자열에 여러가지 값을 설정해 줄 수 있다.
search 값에서 특정 값을 읽어 오기 위해서는 이 문자열을 객체 형태로 변환해주어야 한다.

쿼리 문자열을 객체로 변환할 때는 qs 라는 라이브러리를 사용한다. yarn 을 사용하여 해당 라이브러리를 설치하자.


$ yarn add qs


그럼 이제 About 컴포넌트에서 location.search 값에 있는 detail 이 true 인지 아닌지에 따라
추가 정보를 보여 주도록 만들겠다. About 컴포넌트를 다음과 같이 수정해보자.


import React from 'react';
import qs from 'qs';

const About = ({ location }) => {
    const query = qs.parse(location.search, {
        ignoreQueryPrefix: true // 이 설정을 통해 문자열 맨 앞의 ?를 생략
    });
    const showDetail = query.detail === 'true'; // 쿼리의 파싱 결과 값은 문자열
    return (
        <div>
            <h1>소개</h1>
            <p>이 프로젝트는 리액트 라우터 기초를 실습해 보는 예제 프로젝트이다.</p>
            {showDetail && <p>detail 값을 true로 설정하셨군요!</p>}
        </div>
    );
};

export default About;


쿼리를 사용할 때는 쿼리 문자열을 객체로 파싱하는 과정에서 결과 값은 언제나 문자열이라는 점에 주의하자.
?value=1 혹은 ?value=true 와 같이 숫자나 논리 자료형을 사용한다고 해서 해당 값이 우리가 원하는 형태로 변환되는 것이 아니라
"1", "true"와 같이 문자열 형태로 받아진다.

그렇기 때문에 숫자를 받아 와야 하면 parseInt 함수를 통해 꼭 숫자로 변환해 주고, 지금처럼 논리 자료형 값을 사용해야 하는 경우에는
정확히 "true" 문자열이랑 일치하는지 비교해주자.

코드를 다 작성했다면 브라우저에서 localhost:3000/about?detail=true 주소롤 직접 들어가서 확인해보자.