이제 SPA가 뭔지 알았고 리액트 라우터의 역할도 알았으니 본격적인 리액트 라우터를 사용해보자.


    프로젝트 생성 및 리액트 라우터 적용
            ↓
        페이지 만들기
            ↓
    Route 컴포넌트로 특정 주소에 컴포넌트 연결
            ↓
        라우트 이동하기
            ↓
    URL 파라미터와 쿼리 이해하기
            ↓
        서브 라우트
            ↓
        부가 기능


        13.2.1 프로젝트 생성 및 라이브러리 설치

우선 리액트 라우터를 적용해 볼 리액트 프로젝트를 생성한다.


$ yarn create react-app router-tutorial


그리고 해당 프로젝트 디렉터리로 이동하여 리액트 라우터 라이브러리를 설치한다.
리액트 라우터를 설치할 때는 yarn을 사용하여 react-router-dom 이라는 라이브러리를 설치하면 된다.


$ cd router-tutorial
$ yarn add react-router-dom


        13.2.2 프로젝트에 라우터 적용

프로젝트에 리액트 라우터를 적용할 때는 src/index.js 파일에서 react-router-dom 에 내장되어 있는
BrowserRouter 라는 컴포넌트를 사용하여 감싸면 된다. 이 컴포넌트는 웹 애플리케이션에 HTML5 의 History API를 사용하여
페이지를 새로고침하지 않고도 주소를 변경하고, 현재 주소에 관련된 정보를 props로 쉽게 조회하거나 사용할 수 있도록 해준다.


import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter } from 'react-router-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
// import * as serviceWorker from './serviceWorker';

ReactDOM.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  document.getElementById('root')
);

reportWebVitals();
// serviceWorker.unregister();


        13.2.3 페이지 만들기

이제 라우터로 사용할 페이지 컴포넌트를 만들 차례입니다.
사용자가 웹 사이트에 들어왔을 때 맨 처음 보여줄 Home 컴포넌트와 웹 사이트를 소개하는 About 컴포넌트를 만들어 본다.
src 디렉터리에 다음 파일을 만들자.


import React from 'react';

const Home = () => {
    return (
        <div>
            <h1>홈</h1>
            <p>홈, 그 페이지는 가장 먼저 보여지는 페이지.</p>
        </div>
    );
};

export default Home;


import React from 'react';

const About = () => {
    return (
        <div>
            <h1>소개</h1>
            <p>이 프로젝트는 리액트 라우터 기초를 실습해 보는 예제 프로젝트이다.</p>
        </div>
    );
};

export default About;


이제 페이지로 사용할 모든 컴포넌트가 완성됐다.


        13.2.4 Route 컴포넌트로 특정 주소에 컴포넌트 연결

Route라는 컴포넌트를 사용하여 사용자의 현재 경로에 따라 다른 컴포넌트를 보여주겠다.
Route 컴포넌트를 사용하면 어떤 규칙을 가진 겨올에 어떤 컴포넌트를 보여 줄지 정의할 수 있다.
사용 방식은 다음과 같다.


예시

<Route path="주소규칙" component={보여 줄 컴포넌트} />


App.js를 열어서 기존 코드를 모두 지우고, Route 컴포넌트를 사용하여 방금 만든 Home 컴포넌트 혹은 About 컴포넌트를
보여 주도록 설정해보자.


import React from 'react';
import { Route } from 'react-router-dom';
import About from './About';
import Home from './Home';

const App = () => {
  return (
    <div>
      <Route path="/" component={Home} />
      <Route path="/about" component={About} />
    </div>
  );
};

export default App;


여기까지 코드를 작성한 뒤 터미널에 yarn start 를 입력하여 개발 서버를 시작해보자.
첫 화면에 Home 컴포넌트가 나타날 것이다.

그 다음에 주소창에 localhost:3000/about 경로를 입력하여 들어가보자.

/about 경로로 들어가면 About 컴포넌트만 나오기를 기대했지만, 예상과 다르게 두 컴포넌트가 모두 나타난다.
/about 경로가 / 규칙에도 일치하기 때문에 발생한 현상이다.
이를 수정하려면 Home을 위한 Route 컴포넌트를 사용할 때 exact라는 props를 true로 설정하면 된다.


import React from 'react';
import { Route } from 'react-router-dom';
import About from './About';
import Home from './Home';

const App = () => {
  return (
    <div>
      <Route path="/" component={Home} exact={true} />
      <Route path="/about" component={About} />
    </div>
  );
};

export default App;


다시 브라우저를 확인해보자.


        13.2.5 Link 컴포넌트를 사용하여 다른 주소로 이동하기

Link 컴포넌트는 클릭하면 다른 주소로 이동시켜주는 컴포넌트이다. 일반 웹 애플리케이션에서는 a 태그를 사용하여
페이지를 전환하는데, 리액트 라우터를 사용할 때는 이 태그를 직접 사용하면 안된다.
이 태그는 페이지를 전환하는 과정에서 페이지를 새로 불러오기 때문에 애플리케이션이 들고 있던 상태들을 모두 날려 버리게 된다.
렌더링된 컴포넌트들도 모두 사라지고 다시 처음부터 렌더링하게 된다.

Link 컴포넌트를 사용하여 페이지를 전환하면, 페이지를 새로 불러오지 않고 애플리케이션은
그대로 유지한 상태에서 HTML5 History API를 사용하여 페이지의 주소만 변경해 준다.
Link 컴포넌트 자체는 a 태그로 이루어져 있지만, 페이지 전환을 방지하는 기능이 내장되어 있다.

Link 컴포넌트는 다음과 같이 사용한다.


예시

<Link to="주소">내용</Link>


이제 App 컴포넌트에서 "/", "/about" 경로로 이동하는 Link 컴포넌트를 만들어보자.


import React from 'react';
import { Route, Link } from 'react-router-dom';
import About from './About';
import Home from './Home';

const App = () => {
  return (
    <div>
      <ul>
        <li>
          <Link to="/">홈</Link>
        </li>
        <li>
          <Link to="/about">소개</Link>
        </li>
      </ul>
      <hr />
      <Route path="/" component={Home} exact={true} />
      <Route path="/about" component={About} />
    </div>
  );
};

export default App;