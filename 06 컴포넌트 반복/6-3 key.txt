            6-3 key

리액트에서 key는 컴포넌트 배열을 렌더링했을 때 어떤 원소에 변동이 있었는지 알아내기 위해 사용한다.
예를 들어 유동적인 데이터를 다룰 때는 원소를 새로 생성하여 제거, 수정할 수도 있다.
key가 없을 때는 Virtual DOM을 비교하는 과정에서 리스트를 순차적으로 비교하며 변화를 감지한다.
하지만 key가 있다면 이 값을 사용하여 어떤 변화가 있었는지 더 빠르게 알아낼 수 있다.


        6.3.1 key 설정

key 값을 설정할 때는 map 함수의 인자로 전달되는 함수 내부에서 컴포넌트 props를 설정하듯이 설정하면 된다.
key 값은 언제나 유일해야 한다. 따라서 데이터가 가진 고유값을 key값으로 설정해야 한다.


예로 다음과 같이 게시판의 게시물을 렌더링한다면 게시물 번호를 key값으로 설정해야 한다.


const articleList = articles.map(article => (
    <Article
        title={article.title}
        writer={article.writer}
        key={article.id}
        />
));


하지만 앞서 만들었던 예제 컴포넌트에는 이런 고유값이 없다.
이때는 map 함수에 전달되는 콜백 함수의 인수인 index 값을 사용하면 된다.
예제 컴포넌트를 다음과 같이 수정하자.


import React from 'react';

const IterationSample = () => {
    const names = ['눈사람', '얼음', '눈', '바람'];
    const nameList = names.map((name, index) => <li key={index}>{name}</li>);
    return <ul>{nameList}</ul>;
};

export default IterationSample;


이제 개발자 도구에서 경고 메시지가 표시되지 않는다. 확인해보자.
고유값이 없을때만 index값을 key로 사용해야 한다.
index로 key로 사용하면 배열이 변경될 때 효율적으로 리렌더링하지 못한다.