            22.10 페이지네이션 구현

블로그에서 포스트 목록을 볼 때 한 페이지에 보이는 포스트의 개수는 10 ~ 20개 정도가 적당하다.
지금 만든 list API 는 현재 작성된 모든 포스트를 불러오는데, 포스트 개수가 몇 백 개라면 로딩 속도가 느려진다.
또 포스트 목록을 볼 때 포스트 전체 내용을 보여 줄 필요는 없고, 처음 200자(글자) 정도만 보여 주면 적당하다.
불필요하게 모든 내용을 보여주면 역시 로딩 속도가 지연되고, 트래픽도 낭비될 것이다.
따라서 list API에 페이지네이션 기능을 한번 구현해 보겠다.


        22.10.1 가짜 데이터 생성하기

페이지네이션 기능을 구현하려면 우선 데이터가 충분히 있어야 한다. 수작업으로 직접 등록을 해도 좋지만,
좀 더 편하게 데이터를 채우기 위해 가짜 데이터를 생성하는 스크립트를 작성해 보겠다.
src 디렉터리에 createFakeData.js 라는 파일을 만들자.


import Post from './models/post';

export default function createFakeData() {
    // 0, 1, ... 39 로 이루어진 배열을 생성한 후 포스트 데이터로 변환
    const posts = [...Array(40).keys()].map(i => ({
        title: `포스트 #${i}`,
        // https://www.lipsum.com/ 에서 복사한 200자 이상의 텍스트
        body: 
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
        tags: ['가짜', '데이터'],
    }));

    Post.insertMany(posts, (err, docs) => {
        console.log(docs);
    });
}


그 다음에는 main.js 에서 방금 만든 함수를 불러와 한번 호출해 보자.


require('dotenv').config();
import Koa from 'koa';
import Router from 'koa-router';
import bodyParser from 'koa-bodyparser';
import mongoose from 'mongoose';

import api from './api';
import createFakeData from './createFakeData';

// 비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기
const { PORT, MONGO_URL } = process.env;

mongoose
    .connect(MONGO_URL, { useNewUrlParser: true, useFindAndModify: false })
    .then(() => {
        console.log('Connected to MongoDB');
        createFakeData();
    })
    .catch((e) => {
        console.error(e);
    });

...


코드를 저장하고 서버가 재시작되면 터미널에서 다음과 같이 출력될 것이다.


Listening to port 4000
Connected to MongoDB
[
  {
    tags: [ '가짜', '데이터' ],
    _id: 5feaf9d75d8e5d07cc4d021f,
    title: '포스트 #0',
    body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis 
nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat 
nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
    publishedDate: 2020-12-29T09:41:43.342Z,
    __v: 0
  },
  {
    tags: [ '가짜', '데이터' ],
    _id: 5feaf9d75d8e5d07cc4d0220,
    title: '포스트 #1',
    body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis 
nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat 
nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
    publishedDate: 2020-12-29T09:41:43.344Z,
    __v: 0
  },
  ...


Compass를 통해 데이터가 잘 등록되었는지 확인해보자.
데이터가 잘 등록되었다면 createFakeData 를 호출하는 코드를 main.js에서 지워주자.


        22.10.2 포스트를 역순으로 불러오기

페이지 기능을 구현하기에 앞서 포스트를 역순으로 불러오는 방법을 알아본다.
현재 list API에서는 포스트가 작성된 순서대로 나열되는데, 블로그에 방문한 사람에게 가장 최근 작성된 포스트를 보여주는 것이 좋을 것이다.
이를 구현하려면 list API 에서 exec()를 하기 전에 sort() 구문을 넣으면 된다.
sort 함수의 파라미터는 { key: 1 } 형식으로 넣는데, key는 정렬(sorting)할 필드를 설정하는 부분이며,
오른쪽 값을 1로 설정하면 오름차순으로, -1 로 설정하면 내림차순으로 정렬한다.
우리는 _id를 내림차순으로 정렬하고 싶으니 { _id: -1 }로 설정한다.


export const list = async (ctx) => {
    try {
        const posts = await Post.find()
            .sort({ _id: -1 })
            .exec();
        ctx.body = posts;
    } catch (e) {
        ctx.throw(500, e);
    }
};


다시 Postman으로 list API를 호출해보자. 가장 마지막으로 등록된 포스트가 맨 위에 나타난다.


GET http://localhost:4000/api/posts


        20.10.3 보이는 개수 제한

이번에는 한 번에 보이는 개수를 제한해 보겠다. 개수를 제한할 때는 limit() 함수를 사용하고,
파라미터에는 제한할 숫자를 넣으면 된다. 예를 들어 열 개로 제한한다면 limit(10) 이라고 입력한다.
list 함수의 코드를 다음과 같이 수정하자.


export const list = async (ctx) => {
    try {
        const posts = await Post.find()
            .sort({ _id: -1 })
            .limit(10)
            .exec();
        ctx.body = posts;
    } catch (e) {
        ctx.throw(500, e);
    }
};


이제 Postman 으로 list API를 요청하면 최근 작성된 열 개의 포스트만 불러올 것이다.


        22.10.4 페이지 기능 구현

페이지 기능을 구현할 준비가 어느 정도 끝났다. 페이지 기능을 구현하려면 앞 절에서 배운 limit 함수를 사용해야 하고,
추가로 skip 함수도 사용해야 한다.
skip 이라는 표현엔 '넘긴다'는 의미가 있다. skip 함수에 파라미터로 10을 넣어 주면, 처음 열개를 제외하고 그 다음 데이터를 불러온다.
20을 넣어 주면 처음 20개를 제외하고 그 다음 데이터 열 개를 불러올 것이다.

감이 대충 잡혔다면 skip 함수의 파라미터에는 (page - 1) * 10 을 넣어 주면 된다.
1페이지에는 처음 열 개를 불러오고, 2페이지에는 그 다음 열 개를 불러오게 된다.
page 값은 query 에서 받아 오도록 설정한다. 이 값이 없으면 page 값을 1로 간주하여 코드를 작성해 보겠다.


export const list = async (ctx) => {
    // query는 문자열이기 때문에 숫자로 변환해 주어야 한다.
    // 값이 주어지지 않았다면 1을 기본으로 사용한다.
    const page = parseInt(ctx.query.page || '1', 10);

    if (page < 1) {
        ctx.status = 400;
        return;
    }

    try {
        const posts = await Post.find()
            .sort({ _id: -1 })
            .limit(10)
            .skip((page - 1) * 10)
            .exec();
        ctx.body = posts;
    } catch (e) {
        ctx.throw(500, e);
    }
};


이렇게 하면 http://localhost:4000/api/posts?page=2 형식으로 페이지를 지정하여 조회할 수 있다.


        22.10.5 마지막 페이지 번호 알려 주기

지금도 페이지로서 기능은 충분하다. 하지만 조금만 더 기능을 추가해 보자.
마지막 페이지를 알 수 있다면 클라이언트가 더 편할 것이다. 응답 내용의 형식을 바꾸어 새로운 필드를 설정하는 방법,
Response 헤더 중 Link 를 설정하는 방법, 커스텀 헤더를 설정하는 방법으로 이 정보를 알려 줄 수도 있다.
이 중에서 우리는 커스텀 헤더를 설정하는 방법을 사용하겠다.


export const list = async (ctx) => {
    // query는 문자열이기 때문에 숫자로 변환해 주어야 한다.
    // 값이 주어지지 않았다면 1을 기본으로 사용한다.
    const page = parseInt(ctx.query.page || '1', 10);

    if (page < 1) {
        ctx.status = 400;
        return;
    }

    try {
        const posts = await Post.find()
            .sort({ _id: -1 })
            .limit(10)
            .skip((page - 1) * 10)
            .exec();
        const postCount = await Post.countDocuments().exec();
        ctx.set('Last-Page', Math.ceil(postCount / 10));
        ctx.body = posts;
    } catch (e) {
        ctx.throw(500, e);
    }
};


Last-Page 라는 커스텀 HTTP 헤더를 설정했다. 이 값이 제대로 나타나는지 Postman을 이용하여 확인해보자.


        22.10.6 내용 길이 제한

이제 body 의 길이가 200자 이상이면 뒤에 '...' 을 붙이고 문자열을 자르는 기능을 구현해 보겠다.
find()를 통해 조회한 데이터는 mongoose 문서 인스턴스의 형태이므로 데이터를 바로 변형할 수 없다.
그 대신 toJSON() 함수를 실행하여 JSON 형태로 변환한 뒤 필요한 변형을 일으켜 줘야 한다.
list 함수를 다음과 같이 수정해 보자.


export const list = async (ctx) => {
    // query는 문자열이기 때문에 숫자로 변환해 주어야 한다.
    // 값이 주어지지 않았다면 1을 기본으로 사용한다.
    const page = parseInt(ctx.query.page || '1', 10);

    if (page < 1) {
        ctx.status = 400;
        return;
    }

    try {
        const posts = await Post.find()
            .sort({ _id: -1 })
            .limit(10)
            .skip((page - 1) * 10)
            .exec();
        const postCount = await Post.countDocuments().exec();
        ctx.set('Last-Page', Math.ceil(postCount / 10));
        ctx.body = posts
            .map((post) => post.toJSON())
            .map((post) => ({
                ...post,
                body:
                    post.body.length < 200
                        ? post.body
                        : `${post.body.slice(0, 200)}...`,
            }));
    } catch (e) {
        ctx.throw(500, e);
    }
};


또 다른 방법으로 데이터를 조회할 때 lean() 함수를 사용하는 방법이 있다.
이 함수를 사용하면 데이터를 처음부터 JSON 형태로 조회할 수 있다.


export const list = async (ctx) => {
    // query는 문자열이기 때문에 숫자로 변환해 주어야 한다.
    // 값이 주어지지 않았다면 1을 기본으로 사용한다.
    const page = parseInt(ctx.query.page || '1', 10);

    if (page < 1) {
        ctx.status = 400;
        return;
    }

    try {
        const posts = await Post.find()
            .sort({ _id: -1 })
            .limit(10)
            .skip((page - 1) * 10)
            .lean()
            .exec();
        const postCount = await Post.countDocuments().exec();
        ctx.set('Last-Page', Math.ceil(postCount / 10));
        ctx.body = posts.map(post => ({
            ...post,
            body:
                post.body.length < 200 ? post.body : `${post.body.slice(0, 200)}...`,
        }));
    } catch (e) {
        ctx.throw(500, e);
    }
};


코드를 저장한 뒤 Postman으로 list API를 호출해보자. body 길이가 200자로 제한된 것을 확인할 수 있다.


[
    {
        "_id": "5feaf9d75d8e5d07cc4d0246",
        "tags": [
            "가짜",
            "데이터"
        ],
        "title": "포스트 #39",
        "body": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut a...",
        "publishedDate": "2020-12-29T09:41:43.357Z",
        "__v": 0
    },