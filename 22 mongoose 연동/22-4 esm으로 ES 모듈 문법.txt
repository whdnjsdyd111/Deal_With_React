            22.4 esm으로 ES 모듈 import/export 문법 사용하기

기존 리액트 프로젝트에서 사용해 오던 ES 모듈 import/export 문법은 Node.js 에서 아직 정식으로 지원되지 않는다.
Node.js에 해당 기능이 구현되어 있기는 하지만 아직 실험적인 단계이기 때문에 기본 옵션으로는 사용할 수 없으며,
확장자를 .mjs 로 사용하고 node를 사용할 때 --experimental-modules라는 옵션을 넣어 주어야 한다.

Node.js 에서 import/export 문법을 꼭 사용해야 할 필요는 없지만, 이 문법을 사용하면 VS Code에서
자동 완성을 통해 모듈을 자동으로 쉽게 불러올 수 있고 코드도 더욱 깔끔해진다.
그래서 우리는 esm이라는 라이브러리의 도움을 받아 해당 문법을 사용해 보겠다.


$ yarn add esm


그리고 기존 src/index.js 파일의 이름을 main.js 이름으로 변경하고, index.js 파일을 새로 생성해서 다음 코드를 작성한다.


// 이 파일에서만 no-global0assign ESLint 옵션을 비활성화한다.
/* eslint-disable no-global-assign */

require = require('esm')(module /* , options */);
module.exports = require('./main.js');


다음으로 package.json 에서 만들었던 스크립트를 조금 수정해 주자.


"scripts": {
    "start": "node -r esm src",
    "start:dev": "nodemon --watch src/ -r esm src/index.js"
}


ESLint 에서 import/export 구문을 사용해도 오류로 간주하지 않도록 다음과 같이
.eslintrc.json 에서 sourceType 값을 "module"로 설정해 둔다.


{
    "env": {
        "commonjs": true,
        "es2021": true,
        "node": true
    },
    "extends": ["eslint:recommended", "prettier"],
    "parserOptions": {
        "ecmaVersion": 12,
        "sourceType": "module"
    },
    "rules": {
        "no-unused-vars": "warn",
        "no-console": "off"
    }
}


이제 프로젝트에서 import/export 구문을 자유롭게 사용할 수 있다. 그리고 이전에 만들었던 모듈을 하나하나 수정한다.
기존에 실행 중인 서버를 종료하고, 다시 yarn start:dev 명령어로 새로운 서버를 구동한다.


        22.4.1 기존 코드 ES Module 형태로 바꾸기

먼저 api/posts/posts.ctrl.js 파일을 열어서 exports 코드를 export const로 모두 변환한다.

...
export const write = ...
export const list = ...
export const read = ...
export const remove = ...
export const replace = ...
export const update = ...


다음으로 src/api/posts/index.js 파일을 수정한다.


const Router = require('koa-router');
import * as postsCtrl from './posts.ctrl';

const posts = new Router();

posts.get('/', postsCtrl.list);
posts.post('/', postsCtrl.write);
posts.get('/:id', postsCtrl.read);
posts.delete('/:id', postsCtrl.remove);
posts.put('/:id', postsCtrl.replace);
posts.patch('/:id', postsCtrl.update);

export default posts;


여기까지 코드를 작성하고 저장하면 서버에서 오류가 발생할 것이다.
이 오류는 파일 두 개를 더 수정하면 해결될 것이다.


import Router from 'koa-router';
import posts from './posts';

const api = new Router();

api.use('/posts', posts.routes());

// 라우터를 내보낸다.
export default api;


require('dotenv').config();
import Koa from 'koa';
import Router from 'koa-router';
import bodyParser from 'koa-bodyparser';
import mongoose from 'mongoose';

import api from './api';

// 비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기
const { PORT, MONGO_URL } = process.env;

...


이제 Postman으로 http://localhost:4000/api/posts 에 요청을 보내 우리가 만든 서버가 오류발생으로 종료되지 않고
잘 작동하는지 확인해보자.
코드를 모두 작성하고 확인도 했다면, 마지막으로 프로젝트 루트 디렉터리에 jsconfig.json 을 작성한다.


{
    "compilerOptions": {
        "target": "es6",
        "module": "es2015"
    },
    "include": ["src/**/*"]
}


이 파일을 위 코드와 같이 작성해 두면 나중에 자동 완성을 통해 모듈을 불러올 수 있다.
src 디렉터리에 sample.js 라는 파일을 작성하고 api를 입력했을 때 자동 완성할 수 있는 인텔리센스 창이 뜨는지 확인하자.
이 상태에서 Enter를 누르면 import가 잘 될 것이다. 자동완성을 확인하고 sample.js는 삭제해주자.