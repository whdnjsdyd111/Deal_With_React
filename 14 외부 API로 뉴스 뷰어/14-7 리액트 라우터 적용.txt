            14.7 리액트 라우터 적용하기

방금 진행한 뉴스 ㅂ어에 리액트 라우터를 적용해보자.
기존에는 카테고리 값을 useState로 관리했는데 이번에는 이 값을 리액트 라우터의 URL 파라미터를 사용하여 관리해보자.


        14.7.1 리액트 라우터의 설치 및 적용

현재 프로젝트에 리액트 라우터를 설치하자.


$ yarn add react-router-dom


그리고 index.js 에서 리액트 라우터를 적용하자.


import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { BrowserRouter } from 'react-router-dom';

ReactDOM.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


        14.7.2 NewsPage 생성

이번 프로젝트에 리액트 라우터를 적용할 때 만들어야 할 페이지는 단 하나이다.
src 디렉터리에 pages 라는 디렉터리를 생성하고, 그 안에 NewsPage.js 파일을 만들어서 다음과 같이 작성해보자.


import React from 'react';
import Categories from '../components/Categories';
import NewsList from '../components/NewsList';

const NewsPage =  ({ match }) => {
    // 카테고리가 선택되지 않았으면 기본값 all로 사용
    const category = match.params.category || 'all';

    return (
        <>
            <Categories />
            <NewsList category={category} />
        </>
    );
};

export default NewsPage;


현재 선택된 category 값을 URL 파라미터를 통해 사용할 것이므로 Categories 컴포넌트에서 현재 선택된 카테고리 값을 알려 줄 필요도 없고,
onSelect 함수를 따로 전달해 줄 필요도 없다.
다만들었다면 App 의 기존 내용을 모두 지우고 Route를 정의해 주자.


import React from 'react';
import { Route } from 'react-router-dom';
import NewsPage from './pages/NewsPage';

const App = () => {
  return <Route path="/:category?" component={NewsPage} />;
};


export default App;


위 코드에서 사용된 path 에 /:category? 와 같은 형태로 맨 뒤에 물음표 문자가 들어가 있는데,
이는 category 값이 선택적이라는 의미이다. 즉, 있을 수도 있고 없을 수도 있다는 뜻이다.
category URL 파라미터가 없다면 전체 카테고리를 선택한 것으로 간주한다.


        14.7.3 Categories 에서 NavLink 사용하기

이제 Categories에서 기존의 onSelect 함수를 호출하여 카테고리를 호출하고, 
선택된 카테고리에 다른 스타일을 주는 기능을 NavLink로 대체해 보자.
div, a, button, input 처럼 일반 HTML 요소가 아닌 특정 컴포넌트에 styled-components 를 사용할 때는 
styled(컴포넌트이름)`` 과 같은 형식을 사용한다.


import React from 'react';
import styled from 'styled-components';
import { NavLink } from "react-router-dom";

const categories = [
    ...
];

const CategoriesBlock = styled.div`
    ...
`;

const Category = styled(NavLink)`
    font-size: 1.125rem;
    cursor: pointer;
    white-space: pre;
    text-decoration: none;
    color: inherit;
    padding-bottom: 0.25rem;

    &:hover {
        color: #495057;
    }

    &.active {
        font-weight: 600;
        border-bottom: 2px solid #22b8cf;
        color: #22b8cf;
        &:hover {
            color: #3bc9db;
        }
    }

    & + & {
        margin-left: 1rem;
    }
`;

const Categories = ({ onSelect, category }) => {
    return (
        <CategoriesBlock>
            {categories.map(c => (
                <Category key={c.name}
                    activeClassName="active"
                    exact={c.name === 'all'}
                    to={c.name === 'all' ? '/' : `/${c.name}`}
                    >{c.text}</Category>
            ))}
        </CategoriesBlock>
    );
};

export default Categories;


NavLink로 만들어진 Category 컴포넌트에 to 값은 "/카테고리이름" 으로 설정해 주었다.
그리고 카테고리 중에서 전체보기의 경우는 예외적으로 "/all" 대신에 "/" 로 설정했다.
to 값이 "/"를 가리키고 있을 때는 exact 값을 true로 해주어야 한다. 이 값을 설정하지 않으면,
다른 카테고리가 선택되었을 때도 전체보기 링크에 active 스타일이 적용되는 오류가 발생한다.
작업을 마쳤다면, 카테고리를 클릭할 때 페이지 주소가 바뀌고 이에 따라 뉴스 목록을 잘 보여주는지 확인하자.