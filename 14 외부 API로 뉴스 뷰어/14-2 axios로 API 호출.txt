            14.2 axios로 API 호출해서 데이터 받아 오기

axios는 현재 가장 많이 사용되고 있는 자바스크립트 HTTP 클라이언트이다.
이 라이브러리의 특징은 HTTP 요청을 Promise 기반으로 처리한다는 점이다. 리액트 프로젝트를 생성하여
이 라이브러리를 설치하고 사용하는 방법을 알아보자.


$ yarn create react-app news-viewer
$ cd news-viewer
$ yarn add axios


Prettier 로 코드 스타일을 자동으로 정리하고 싶다면, 프로젝트의 최상위 디렉터리에 .prettierrc 파일을 생성하여 다음 설정을 입력하자.


{
    "singleQuote": true,
    "semi": true,
    "useTabs": false,
    "tabWidth": 2,
    "trailingComma": "all",
    "printWidth": 80
}


그리고 VS Code에서 파일 자동 불러오기 기능을 잘 활용하고 싶다면 최상위 디렉터리에 jsconfig.json 파일도 만들어 보자.


{
    "compilerOptions": {
        "target": "es6"
    }
}


이제 App.js 코드를 전부 지우고 다음과 같이 작성해보자.


import React, { useState } from 'react';
import axios from 'axios';

const App = () => {
  const [data, setData] = useState(null);
  const onClick = () => {
    axios.get('https://jsonplaceholder.typicode.com/todos/1').then(response => {
      setData(response.data);
    });
  };
  return (
    <div>
      <div>
        <button onClick={onClick}>불러오기</button>
      </div>
      {data && <textarea rows={7} value={JSON.stringify(data, null, 2)} readOnly={true} />}
    </div>
  );
};


export default App;


위 코드는 불러오기 버튼을 누르면 해당 사이트에서 제공하는 가짜 API를 호출하고 이에 대한 응답을 컴포넌트 상태에
넣어서 보여 주는 예제이다.

onClick 함수에서는 axios.get 함수를 사용하고 있다. 이 함수는 파라미터로 전달된 주소에 GET 요청을 해준다.
그리고 이에 대한 결과는 .then을 통해 비동기적으로 확인할 수 있다. 
위 코드에서 async를 적용하면 어떨까?


import React, { useState } from 'react';
import axios from 'axios';

const App = () => {
  const [data, setData] = useState(null);
  const onClick = async () => {
    try {
      const response = await axios.get(
        'https://jsonplaceholder.typicode.com/todos/1'
      );
      setData(response.data);
    } catch(e) {
      console.log(e);
    }
  };
  return (
    <div>
      <div>
        <button onClick={onClick}>불러오기</button>
      </div>
      {data && <textarea rows={7} value={JSON.stringify(data, null, 2)} readOnly={true} />}
    </div>
  );
};


export default App;


화살표 함수에 async/await 를 적용할 때는 async () => {} 와 같은 형식으로 적용한다.
불러오기를 버튼 눌러서 확인해보자.