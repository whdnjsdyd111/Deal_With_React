            14.5 데이터 연동하기

이제 NewsList 컴포넌트에서 이전에 연습삼아 사용한 API를 호출해보자.
컴포넌트가 화면에 보이는 시점에 API를 요청해 볼 것인데, 이때 useEffect를 사용하여 컴포넌트가 처음 렌더링되는 시점에 API를 요청하면 된다.
여기서 주의할 점은 useEffect에 등록하는 함수에 async를 붙이면 안된다는 것이다. useEffect에서 반환해야 하는 값은
뒷정리 함수이기 때문이다.
따라서 useEffect 내부에서 async/await 를 사용하고 싶다면, 함수 내부에 async 키워드가 붙은 또 다른 함수를 만들어서
사용해 주어야 한다

추가로 loading 이라는 상태도 관리하여 API 요청이 대기 중인지 판별할 것이다.
요청이 대기 중일 때는 loading 값이 true가 되고, 요청이 끝나면 loading 값이 false가 되어야 한다.


import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import NewsItem from './NewsItem';
import axios from 'axios'

const NewsListBlock = styled.div`
    box-sizing: border-box;
    padding-bottom: 3rem;
    width: 768px;
    margin: 0 auto;
    margin-top: 2rem;
    @media screen and (max-width: 768px) {
        width: 100%;
        padding-left: 1rem;
        padding-right: 1rem;
    }
`;

const NewsList = () => {
    const [articles, setArticles] = useState(null);
    const [loading, setLoading] = useState(false);
    
    useEffect(() => {
        // async를 사용하는 함수는 따로 선언
        const fetchData = async () => {
            setLoading(true);
            try {
                const response = await axios.get(
                    'https://newsapi.org/v2/top-headlines?country=kr&apiKey=08d076dd85844f5d8cf5ce3061ebdc95'
                );
                setArticles(response.data.articles);
            } catch(e) {
                console.log(e);
            }
            setLoading(false);
        };
        fetchData();
    }, []);

    // 대기 중일 때
    if(loading) {
        return <NewsListBlock>대기 중 ...</NewsListBlock>;
    }
    // 아직 articles 값이 설정되지 않았을 때
    if(!articles) {
        return null;
    }

    // articles 값이 유효할 때
    return (
        <NewsListBlock>
            {articles.map(article => (
                <NewsItem key={articles.url} article={article} />
            ))}
        </NewsListBlock>
    );
};

export default NewsList;


데이터를 불러와서 뉴스 데이터 배열을 map 함수를 사용하여 컴포넌트 배열로 변환할 때 신경 써야할 부분이 있다.
map 함수를 사용하기 전에 꼭 !articles 를 조회하여 해당 값이 현재 null이 아닌지 검사해야 한다.
이 작업을 하지 않으면, 아직 데이터가 없을 때 null에는 map 함수가 없기 때문에 렌더링 과정에서 오류가 발생한다.
그래서 애플리케이션이 제대로 나타나지 않고 흰 페이지만 보이게 된다.

이제 뉴스 정보가 잘 나오는지 확인해보자.