            9.1 가장 흔한 방식, 일반 CSS

프로젝트는 일반 CSS 방식으로 만들어져있다.
기존 CSS 스타일링이 딱히 불편하지 않고 새로운 기술을 배울 필요가 없다고 생각되면 일반 CSS를 계속 사용해도 된다.
실제로도 소규모 프로젝트를 개발하고 있다면 새로운 스타일링 시스템을 적용하는 것이 불필요할 수도 있다.
그런 상황에는 프로젝트에 이미 적용되어 있는 기본 CSS 시스템을 사용하는 것만으로도 충분하다.

방금 만든 프로젝트를 보면 src 디렉터리에 App.js 파일과 App.css가 있을 것이다.


import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

export default App;


.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


CSS를 작성할 때 가장 중요한 점은 CSS 클래스를 중복되지 않게 만드는 것이다.
CSS 클래스가 중복되는 것을 방지하는 여러 가지 방식이 있는데, 그중 하나는 이름을 지을 때 특별한 규칙을 사용하는 것이고,
또 다른 하나는 CSS Selector를 활용하는 것이다.


        9.1.1 이름 짓는 규칙

프로젝트에 자동 생성된 App.css 를 읽어 보면 클래스 이름이 컴포넌트 이름-클래스 형태로 지어져있다.(예: App-header).
클래스 이름에 컴포넌트 이름을 포함시킴으로써 다른 컴포넌트에서 실수로 중복되는 클래스를 만들어 사용하는 것을 방지할 수 있다.
비슷한 방식으로 BEM 네이밍이란 방식도 있다.
BEM 네이밍은 CSS 방법론 중 하나로, 이름을 지을 때 일종의 규칙을 준수하여 클래스가 어디에서 어떤 용도로 사용되는지
명확하게 작성하는 방식이다. 예를 들어 .card_title-primary 처럼말이다.


        9.1.2 CSS Selector

CSS Selector를 사용하면 CSS 클래스가 특정 클래스 내부에 있는 경우에만 스타일을 적용할 수 있다.
예를 들어 .App 안에 있는 .logo 에 스타일을 적용하고 싶다면 다음과 같이 작성하면 된다.


.App .logo {
    animtaion: App-logo-spin infinite 20s linear;
    height: 40vmin;
}


이러한 방식을 사용하여 기존 App.css 와 App.js 의 CSS 클래스 부분을 다시 작성해보자.
우선 CSS 파일을 이렇게 수정해보자.


.App {
  text-align: center;
}

/* .App 안에 들어 있는 .logo */
.App .logo {
  animation: App-logo-spin infinite 20s linear;
  height: 40vmin;
}

/*  .App 안에 들어 있는 header
    header 클래스가 아닌 header 태그 자체에
    스타일을 적용하기 위해 .이 생략
*/
.App header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

/* .App 안에 들어 있는 a 태그 */
.App a {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


그리고 이에 맞춰 컴포넌트의 JSX 부분을 수정해보자.


import React, { Component } from 'react';
import logo from './logo.svg';
import './App.css';

class App extends Component {
  render() {
    return (
      <div className={App}>
        <header>
          <img src={logo} className="logo" alt="logo" />
          <p>
            Edit <code>src/App.js</code> and save to reload.
          </p>
          <a
            href="https://reactjs.org"
            target="_blank"
            rel="noopener noreferrer"
            >
              Learn React
            </a>
        </header>
      </div>
    );
  }
}

export default App;


이런 식으로 컴포넌트의 최상위 html 요소에는 컴포넌트의 이름으로 클래스 이름을 짓고(.App),
그 내부에는 소문자를 입력하거나(.logo), header 같은 태그를 사용하여 클래스 이름이 불필요한 경우 아예 생략도 할 수 있다.
