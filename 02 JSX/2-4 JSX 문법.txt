            2.4 JSX 문법

        2.4.1 감싸인 요소

컴포넌트에 여러 요소가 있다면 반드시 부모 요소 하나로 감싸야 한다.
한번 App.js 파일의 App 컴포넌트 함수 내부를 지우고 다음과 같이 작성해보자.
상단에 있는 SVG 와 CSS 를 import 하는 코드도 지운다.


import React from 'react';

function App() {
  return (
    <h1>리액트 안녕!</h1>
    <h2>잘 작동하니?</h2>
  );
}

export default App;


이런 형태의 코드는 제대로 작동하지 않는다. 코드를 저장 후 서버를 실행하면 오류가 날것이다.
오류 내용은 요소 여러 개가 부모 요소 하나에 의해 감싸져 있지 않기 때문에 오류가 발생한다.
이 오류는 다음과 같은 코드를 작성해서 해결할 수 있다.


import React from 'react';

function App() {
  return (
    <div>
      <h1>리액트 안녕!</h1>
      <h2>잘 작동하니?</h2>
    </div>
  );
}

export default App;


리액트 컴포넌트에서 요소 여러 개를 왜 하나의 요소로 감싸 주어야 할까?
그것은 Virtual DOM 에서 컴포넌트 변화를 감지해 낼 때 효율적으로 비교할 수 있도록 컴포넌트 내부는 하나의
DOM 트리 구조로 이루어져야 한다는 규칙이 있기 때문이다.

그런데 여기서 div 요소를 사용하고 싶지 않을 수 있다. 그런 경우는 리액트 v16 이상부터 도입된
Fragment 라는 기능을 사용하면 된다.


import React, { Fragment } from 'react';

function App() {
  return (
    <Fragment>
      <h1>리액트 안녕!</h1>
      <h2>잘 작동하니?</h2>
    </Fragment>
  );
}

export default App;


코드 상단 import 구문에서 react 모듈에 들어 있는 Fragment 라는 컴포넌트를 추가로 불러온다.
Fragment 는 다음과 같은 형태로도 표현할 수 있다.


import React from 'react';

function App() {
  return (
    <>
      <h1>리액트 안녕!</h1>
      <h2>잘 작동하니?</h2>
    </>
  );
}

export default App;


훨씬 간단해졌다. 결과물도 확인하자.


        2.4.2 자바스크립트 표현

JSX가 단순히 DOM 요소를 렌더링하는 기능밖에 없었다면 좀 아쉬울 것이다.
JSX 안에서는 자바스크립트 표현식을 쓸 수 있다. 자바스크립트 표현식을 작성하려면 JSX 내부에서 { } 로 감싸면 된다.
자바스크립트 값을 JSX 안에서 한번 렌더링 해보자.


import React from 'react';

function App() {
  const name = '리액트';
  return (
    <>
      <h1>${name} 안녕!</h1>
      <h2>잘 작동하니?</h2>
    </>
  );
}

export default App;


코드를 저장하고 브라우저로 확인해보자.


        2.4.3 If 문 대신 조건부 연산자

JSX 내부의 자바스크립트 표현식에서 if 문을 사용할 수는 없다. 하지만 조건에 따라 다른 내용을 렌더링해야 할 때는
JSX 밖에서 if 문을 사용하여 사전에 값을 설정하거나, { } 안에 조건부 연산자를 사용하면 된다.
조건부 연산자의 또 다른 이름은 삼항 연산자이다.


import React from 'react';

function App() {
  const name = '리액트';
  return (
    <div>
      ${name === '리액트' ? (
        <h1>리액트입니다.</h1>
      ) : (
        <h2>리액트가 아닙니다.</h2>
      )}
    </div>
  );
}

export default App;


이렇게 코드를 작성한 후 저장하면 브라우저에서 '리액트입니다.' 라는 문구를 볼 수 있다.
하지만 name 값을 '뤼왝트' 와 같이 바꾸면, '리액트가 아닙니다' 라는 문구가 나타날 것이다.


        2.4.4 AND 연산자(&&)를 사용한 조건부 렌더링

개발하다 보면 특정 조건을 만족할 때 내용을 보여 주고, 만족하지 않을 때 아예 아무것도 렌더링하지 않아야 하는 상황이 올 수 있다.
이럴 때도 조건부 연산자를 통해 구현할 수는 있다.


import React from 'react';

function App() {
  const name = '뤼왝트';
  return
  <div>${name === '리액트' ? <h1>리액트입니다.</h1> : null}</div>
}

export default App;


위 코드와 같이 null 을 렌더링하면 아무것도 보여 주지 않는다.
하지만 이것보다 더 짧은 코드로 똑같은 작업을 할 수 있다.
다음과 같이 && 연산자를 사용해서 조건부 렌더링을 할 수 있다.


import React from 'react';

function App() {
  const name = '뤼왝트';
  return
  <div>${name === '리액트' && <h1>리액트입니다.</h1>}</div>
}

export default App;


이렇게 코드를 작성하고 나면 브라우저에 아무것도 안나타난다. 다시 name 값을 리액트로 설정하면
'리액트입니다.' 라는 문구가 나타날 것이다.
&& 연산자로 조건부 렌더링을 할 수 있는 이유는 리액트에서 false를 렌더링할 때는 null 과 마찬가지로 아무것도 안나타난다.
여기서 한 가지 주의해야 할 점은 falsy한 값인 0은 예외적으로 화면에 나타난다.


const number = 0;
return number && <div>내용</div>


이런 코드는 화면에 숫자 0을 보여준다.


        2.4.5 undefined를 렌더링하지 않기

리액트 컴포넌트에서는 함수에서 undefined만 반환하여 렌더링하는 상황을 만들면 안된다.
예를 들어 다음과 같은 코드는 오류를 발생시킨다.


import React from 'react';

function App() {
  const name = undefined;
  return name;
}

export default App;


코드를 저장한 후 브라우저로 확인하면 오류를 볼 수 있다.

어떤 값이 undefined 일 수도 있다면, OR(||) 연산자를 사용하면 해당 값이 undefined 일 때 사용할 값을
지정할 수 있으니 간단하게 오류를 방지할 수 있다.


import React from 'react';

function App() {
  const name = undefined;
  return name || '값이 undefined입니다.';
}

export default App;


반면 JSX 내부에서 undefined 를 렌더링하는 것은 괜찮다.


import React from 'react';

function App() {
  const name = undefined;
  return <div>${name}</div>;
}

export default App;


name 값이 undefined 일 때 보여주고 싶은 문구가 있다면 다음과 같이 코드를 작성하면 된다.


import React from 'react';

function App() {
  const name = undefined;
  return <div>${name || '리액트'}</div>;
}

export default App;


        2.4.6 인라인 스타일링

리액트에서 DOM 요소에 스타일을 적용할 때는 문자열 형태로 넣는 것이 아니라 객체 형태로 넣어줘야한다.
스타일 이름 중 background-color 처럼 - 문자가 포함되는 이름이 있는데,
이러한 이름은 - 문자를 없애고 카멜 표기법으로 작성해야 한다.
따라서 background-color 는 backgroundColor 로 작성한다.


import React from 'react';

function App() {
  const name = '리액트';
  const style = {
    backgroundColor: 'black',
    color: 'aqua',
    fontSize: '48px',
    fontWeight: 'bold',
    padding: 16
  };
  return <div style={style}>{name}</div>;
}

export default App;


지금은 style 객체를 미리 선언하고 div의 style 값으로 지정해주었는데, 미리 선언하지 않고 바로
style 값을 지정하고 싶다면 다음과 같이 작성하면 된다.


import React from 'react';

function App() {
  const name = '리액트';
  return <div style={{
      backgroundColor: 'black',
      color: 'aqua',
      fontSize: '48px',
      fontWeight: 'bold',
      padding: 16
  }}
    >{name}</div>;
}

export default App;


        2.4.7 class 대신 className

일반 HTML 에서 CSS 클래스를 사용할 때는 <div class="myclass"></div> 와 같이 class라는 속성을 설정한다.
하지만 JSX 에서는 class 가 아닌 className 으로 설정해 주어야 한다.

우선 src 디렉터리 안에 있는 App.css 를 열어서 내부 내용을 다 지우고 새 CSS 클래스를 작성해보자.


.react {
  background: aqua;
  color: black;
  font-size: 48px;
  font-weight: bold;
  padding: 16px;
}


이번에는 기존 App 컴포넌트에서 인라인 스타일에 사용한 폰트 색상과 배경을 뒤바꾸었다.

이제 App.js 파일에서 App.css 를 불러온 뒤 div 요소에 className 값을 지정해주자.


import React from 'react';
import './App.css';

function App() {
  const name = '리액트';
  return <div className="react">{name}</div>;
}

export default App;


JSX를 작성할 때 CSS 클래스를 설정하는 과정에서 className 이 아닌 class 값을 설정해도 스타일은 적용된다.
하지만 그렇게 사용하면 브라우저 개발자 도구의 Console 탭에서는 경고가 발생한다.

이전에는 class 로 CSS 클래스를 설정할 때 오류가 발생하고 CSS 클래스가 적용되지 않았는데,
리액트 v16 부터는 class를  className으로 변환시켜주고 경고를 띄운다.


        2.4.8 꼭 닫아야 하는 태그

HTML 코드를 작성할 때 가끔 태그를 닫지 않은 상태로 코드를 작성하기도 합니다.
예를 들면 input HTML 요소는 <input></input>이라 입력하지 않고 <input>이라고 입력해도 작동된다.
HTML에서 다음과 가은 코드는 문제없이 작동한다.


<form>
    성 : <br>
    <input><br>
    이름 : <br>
    <input>
</form>


위 코드에서 br 과 input 태그는 열기만 하고 닫지 않았다.

JSX 에서는 위 코드처럼 태그를 닫지 않으면 오류가 발생한다.
다음과 같이 App.js 파일의 코드를 수정해보자.


import React from 'react';
import './App.css';

function App() {
  const name = '리액트';
  return (
    <>
      <div className="react">{name}</div>
      <input>
    </>
  )
}

export default App;


코드를 저장하면 서버가 실행 중인 터미널에서 오류가 발생할 것이다.
이 오류를 해결하기 위해선 input 태그를 닫아주어야 한다.


import React from 'react';
import './App.css';

function App() {
  const name = '리액트';
  return (
    <>
      <div className="react">{name}</div>
      <input></input>
    </>
  )
}

export default App;


태그 사이에 별도의 내용이 들어가지 않는 경우에는 다음과 같이 작성할 수도 있따.
이러한 태그를 self-closing 태그라고 부른다. 태그를 선언하면서 동시에 닫을 수 있는 태그다.


import React from 'react';
import './App.css';

function App() {
  const name = '리액트';
  return (
    <>
      <div className="react">{name}</div>
      <input />
    </>
  )
}

export default App;


        2.4.9 주석

JSX 안에서 주석을 작성하는 방법은 일반 자바스크립트에서 주석을 작성할 때와 조금 다르다.


import React from 'react';
import './App.css';

function App() {
  const name = '리액트';
  return (
    <>
      {/* 주석은 이렇게 작성합니다. */}
      <div className="react"  // 시작 태그를 여러 줄로 작성하면 이렇게 주석 가능
        >
        {name}
        </div>
        // 하지만 이런 주석과
        /* 이런 주석은 페이지에 그대로 출력 */
      <input />
    </>
  )
}

export default App;


JSX 내부에서 주석을 작성할 때는 {/* ... */} 와 같은 형식으로 작성합니다.
이렇게 여러 줄로 작성할 수도 있다. 그리고 시작 태그를 여러 줄로 작성할 때 // .. 와 같은 형태도 작성할 수 있다.
만약 일반 자바스크립트에서 주석을 작성할 때 처럼 아무데나 주석을 작성하면 그 주석은 페이지에 고스란히 나타난다.