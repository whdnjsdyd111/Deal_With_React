            2.1 코드 이해하기

1장에서 만든 hello-react 를 열어보자.
그 다음에 src/App.js 파일을 열어보자.


import React from 'react';
import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

export default App;


코드를 하나씩 이해해보자.


import React from 'react';


이 코드는 리액트를 불러와서 사용할 수 있게 해준다. 리액트 프로젝트를 만들 때 node_modules 라는 디렉토리도 함께 생성되는데,
프로젝트 생성 과정에서 node_modules 디렉터리에 react 모듈이 설치된다.
그리고 이렇게 import 구문을 통해 리액트를 불러와서 사용할 수 있다.

여기서 한 가지 알아 둘 점이 있다. 이렇게 모듈을 불러오는 것은 원래 브라우저에는 없던 기능이다.
브라우저가 아닌 환경에서 자바스크립트를 실행할 수 있게 해주는 환경인 Node.js 에서 지원하는 기능이다.
참고로 Node.js 에서는 import 가 아닌 require 라는 구문으로 패키지를 불러온다.

이런 기능을 브라우저에도 사용하기 위해 번들러(bundler)를 사용한다.
번들은 묶는다는 뜻이다. 즉, 파일을 묶듯이 연결한다.

대표적인 번들러로 웹팩, Parcel, browserify 라는 도구들이 있고, 각 도구마다 특성이 다르다.
리액트 프로젝트는 주로 웹 팩을 사용하는 추세이다. 편의성과 확장성이 다른 도구보다 뛰어나기 때문이다.
번들러 도구를 사용하면 import(또는 require)로 모듈을 불러왔을 때 불러온 모듈을 모두 합쳐서
하나의 파일로 생성하며 최적화 과정에서 여러 개의 파일로 분리될 수 있다.

이 책의 프로젝트에서는 src/index.js 를 시작으로 필요한 파일을 다 불러와서 번들링하게 된다.
단순히 다른 경로의 자바스크립트를 불러오는 용도로 사용되기 때문에 프로젝트 번들링과는 다르다.

리액트를 불러오는 코드 하단에는 SVG 파일과 CSS 파일을 import 하는 코드가 있다.


import logo from './logo.svg';
import './App.css'


웹팩을 사용하면 SVG 파일과 CSS 파일도 불러와서 사용할 수 있다. 이렇게 불러오는 것은 웹팩의 로더라는 기능이 담당한다.
로더는 여러 종류가 있다. 예로 css-loader는 CSS 파일을 불러올 수 있게 해주고, 
file-loader는 웹 폰트나 미디어 파일 등을 불러올 수 있게 해준다.
그리고 babel-loader는 자바스크립트 파일들을 불러오면서 최신 자바스크립트 문법으로 작성된 코드를바벨이라는 도구를 사용하여
ES5 문법으로 변환해준다.

웹팩의 로더는 원래 직접 설치하고 설정해야 하지만 리액트 프로젝트를 만들 때 사용했던 create-react-app이
번거로운 작업을 모두 대신해 주기 때문에 우리는 별도의 설정을 할 필요가 없다.
이 설정을 커스터마이징하는 것은 나중에 살펴보자.

다음 코드를 살펴보자.


function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}


이 코드는 App 이라는 컴포넌트를 만들어준다.
function 키워드를 사용하여 컴포넌트를 만들었다. 이런 컴포넌트를 함수형 컴포넌트라고 부른다.
프로젝트에서 컴포넌트를 렌더링하면 함수에서 반환하고 있는 내용을 나타낸다.
함수에서 반환하는 내용을 보면 마치 HTML 작성하는 것 같다. 하지만 HTML이 아니며 템플릿도 아닌 JSM 라고 부른다.